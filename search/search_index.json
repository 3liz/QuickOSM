{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"QuickOSM # QuickOSM is a QGIS plugin to download data from Overpass server. QuickOSM allows you to work quickly with OSM data in QGIS thanks to Overpass API . Write some queries for you by providing a key/value Choose to run the query on an area or an extent Configure the query : which layers, which columns\u2026 Open a local OSM (.osm or .pbf) with a specific osmconf in QGIS Build some models with QGIS Processing There are some useful tips, like automatic colours on lines (if the tag is present), or some actions (right-click in the attribute table) for each entity (edit in JOSM for instance). Getting help # You can ask questions on https://gis.stackexchange.com/ Commercial support and training available, ask us info@3liz.com","title":"Home"},{"location":"#quickosm","text":"QuickOSM is a QGIS plugin to download data from Overpass server. QuickOSM allows you to work quickly with OSM data in QGIS thanks to Overpass API . Write some queries for you by providing a key/value Choose to run the query on an area or an extent Configure the query : which layers, which columns\u2026 Open a local OSM (.osm or .pbf) with a specific osmconf in QGIS Build some models with QGIS Processing There are some useful tips, like automatic colours on lines (if the tag is present), or some actions (right-click in the attribute table) for each entity (edit in JOSM for instance).","title":"QuickOSM"},{"location":"#getting-help","text":"You can ask questions on https://gis.stackexchange.com/ Commercial support and training available, ask us info@3liz.com","title":"Getting help"},{"location":"CHANGELOG/","text":"Changelog # Unreleased # 2.0.1 - 2022-02-07 # Fix trunk roads to Urban visualization preset (contribution from @Rikuoja) Fix an error when running Python 3.10 2.0.0 - 2021-09-09 # Release of QuickOSM 2.0.0 Add Vietnamese language Update of translations https://docs.3liz.org/QuickOSM/translation-stats/ Chinese, Dutch, French, Indonesian, Italian are now fully translated, thanks to contributors Raise minimum version to QGIS 3.16 Add presets for the keys/values Add multi-keys query from Quick Query panel Add history of queries Add option to get the metadata of OSM data such as author, timestamp etc Add default map presets to download a map with many queries Add a button to save the query in a personal preset (new or existing one) Add an action to reload the query Add processing algorithms for the \"Quick Query\", available in the QGIS Processing toolbox Add several output format such as Geopackage, KML Add the possibility to load only a subset of a local file Boost of performance using HStore processing algorithm to parse the downloaded OSM file Improve user interface Update of the documentation 2.0.0-beta4 - 2021-09-01 # Fix the query might be too long for the server when using a GET request by reducing the number of decimals Fix issue about reprojection of bounding box when using QuickOSM in QGIS Processing Update of translations https://docs.3liz.org/QuickOSM/translation-stats/ Chinese, Dutch, French, Indonesian, Italian are now fully translated, thanks to contributors 2.0.0-beta3 - 2021-08-12 # Fix the selection of the preset to run Fix the opening of an osm file with a custom configuration file Fix the reset of the dialog 2.0.0-beta2 - 2021-08-06 # Update the translations Add some documentations for users and for developers Add the preset translations in zip Fix the selection of preset 2.0.0-beta1 - 2021-08-02 # Raise minimum version to QGIS 3.16 Add presets for the keys/values Add multi-keys query from Quick Query panel Add history of queries Add option to get the metadata of OSM data such as author, timestamp etc Add default map presets to download a map with many queries Add a button to save the query in a personal preset (new or existing one) Add an action to reload the query Add processing algorithms for the \"Quick Query\" Add several output format such as geopackage, KML Add the possibility to load only a subset of a local file Boost of performance using HStore processing algorithm to parse the downloaded OSM file Improve user interface Update of the documentation 1.17.1 - 2021-06-23 # Add a reminder of the copyrights Fix loading of translations files Fix an error triggered when there was no layer in the project that prevented the generation functionality Fix an error when using QuickOSM in a Processing model 1.17.0 - 2021-06-09 # Add OpenHistoricalMap overpass server, linked to https://www.openhistoricalmap.org Add an option to use the extent of selected features Add Overpass Query Language (OQL) generator by default instead of legacy XML Add the possibility to choose the Nominatim server, by default the one from qgis.org Add one check from the Overpass API if too many requests from the user Fix the Mapillary action in the attribute table Fix some user experience issue about the place name Fix user experience about the named area drop-down menu Fix 'Around' query type to fetch any OSM object instead of only OSM nodes. In the source code, add some Python annotations and more tests 1.16.0 - 2021-03-26 # Changelog from 1.15.0 which has been unapproved Avoid regression from 1.15.0 about empty attribute table Always check to open file with UTF8 1.15.0 - 2021-03-10 # Fix the button to \"show the query\" Fix QGIS Processing algorithm about GDAL parameter Add the OSM key \"aeroway\" Add a button to open the online help from the QGIS help menu Update the documentation with a proper website https://docs.3liz.org/QuickOSM/ Add an automatic documentation for QGIS Processing algorithms on the website Some Python automatic code review 1.14.3 - 2020-09-18 # Fix issue about unicode in the OSM file when reading the end of the file only #240 1.14.2 - 2020-01-30 # Fix railway=abandoned Add a model by default in the modeler Fix loading translation file 1.14.1 - 2019-11-23 # Update translations from Transifex Fix bug #220 about loading local OSM file with custom config Add section about code contributors 1.14.0 - 2019-11-11 # Version 1.13.X was only experimental, so all features from 1.13.X Show human friendly label in the QuickQuery","title":"Changelog"},{"location":"CHANGELOG/#changelog","text":"","title":"Changelog"},{"location":"CHANGELOG/#unreleased","text":"","title":"Unreleased"},{"location":"CHANGELOG/#201-2022-02-07","text":"Fix trunk roads to Urban visualization preset (contribution from @Rikuoja) Fix an error when running Python 3.10","title":"2.0.1 - 2022-02-07"},{"location":"CHANGELOG/#200-2021-09-09","text":"Release of QuickOSM 2.0.0 Add Vietnamese language Update of translations https://docs.3liz.org/QuickOSM/translation-stats/ Chinese, Dutch, French, Indonesian, Italian are now fully translated, thanks to contributors Raise minimum version to QGIS 3.16 Add presets for the keys/values Add multi-keys query from Quick Query panel Add history of queries Add option to get the metadata of OSM data such as author, timestamp etc Add default map presets to download a map with many queries Add a button to save the query in a personal preset (new or existing one) Add an action to reload the query Add processing algorithms for the \"Quick Query\", available in the QGIS Processing toolbox Add several output format such as Geopackage, KML Add the possibility to load only a subset of a local file Boost of performance using HStore processing algorithm to parse the downloaded OSM file Improve user interface Update of the documentation","title":"2.0.0 - 2021-09-09"},{"location":"CHANGELOG/#200-beta4-2021-09-01","text":"Fix the query might be too long for the server when using a GET request by reducing the number of decimals Fix issue about reprojection of bounding box when using QuickOSM in QGIS Processing Update of translations https://docs.3liz.org/QuickOSM/translation-stats/ Chinese, Dutch, French, Indonesian, Italian are now fully translated, thanks to contributors","title":"2.0.0-beta4 - 2021-09-01"},{"location":"CHANGELOG/#200-beta3-2021-08-12","text":"Fix the selection of the preset to run Fix the opening of an osm file with a custom configuration file Fix the reset of the dialog","title":"2.0.0-beta3 - 2021-08-12"},{"location":"CHANGELOG/#200-beta2-2021-08-06","text":"Update the translations Add some documentations for users and for developers Add the preset translations in zip Fix the selection of preset","title":"2.0.0-beta2 - 2021-08-06"},{"location":"CHANGELOG/#200-beta1-2021-08-02","text":"Raise minimum version to QGIS 3.16 Add presets for the keys/values Add multi-keys query from Quick Query panel Add history of queries Add option to get the metadata of OSM data such as author, timestamp etc Add default map presets to download a map with many queries Add a button to save the query in a personal preset (new or existing one) Add an action to reload the query Add processing algorithms for the \"Quick Query\" Add several output format such as geopackage, KML Add the possibility to load only a subset of a local file Boost of performance using HStore processing algorithm to parse the downloaded OSM file Improve user interface Update of the documentation","title":"2.0.0-beta1 - 2021-08-02"},{"location":"CHANGELOG/#1171-2021-06-23","text":"Add a reminder of the copyrights Fix loading of translations files Fix an error triggered when there was no layer in the project that prevented the generation functionality Fix an error when using QuickOSM in a Processing model","title":"1.17.1 - 2021-06-23"},{"location":"CHANGELOG/#1170-2021-06-09","text":"Add OpenHistoricalMap overpass server, linked to https://www.openhistoricalmap.org Add an option to use the extent of selected features Add Overpass Query Language (OQL) generator by default instead of legacy XML Add the possibility to choose the Nominatim server, by default the one from qgis.org Add one check from the Overpass API if too many requests from the user Fix the Mapillary action in the attribute table Fix some user experience issue about the place name Fix user experience about the named area drop-down menu Fix 'Around' query type to fetch any OSM object instead of only OSM nodes. In the source code, add some Python annotations and more tests","title":"1.17.0 - 2021-06-09"},{"location":"CHANGELOG/#1160-2021-03-26","text":"Changelog from 1.15.0 which has been unapproved Avoid regression from 1.15.0 about empty attribute table Always check to open file with UTF8","title":"1.16.0 - 2021-03-26"},{"location":"CHANGELOG/#1150-2021-03-10","text":"Fix the button to \"show the query\" Fix QGIS Processing algorithm about GDAL parameter Add the OSM key \"aeroway\" Add a button to open the online help from the QGIS help menu Update the documentation with a proper website https://docs.3liz.org/QuickOSM/ Add an automatic documentation for QGIS Processing algorithms on the website Some Python automatic code review","title":"1.15.0 - 2021-03-10"},{"location":"CHANGELOG/#1143-2020-09-18","text":"Fix issue about unicode in the OSM file when reading the end of the file only #240","title":"1.14.3 - 2020-09-18"},{"location":"CHANGELOG/#1142-2020-01-30","text":"Fix railway=abandoned Add a model by default in the modeler Fix loading translation file","title":"1.14.2 - 2020-01-30"},{"location":"CHANGELOG/#1141-2019-11-23","text":"Update translations from Transifex Fix bug #220 about loading local OSM file with custom config Add section about code contributors","title":"1.14.1 - 2019-11-23"},{"location":"CHANGELOG/#1140-2019-11-11","text":"Version 1.13.X was only experimental, so all features from 1.13.X Show human friendly label in the QuickQuery","title":"1.14.0 - 2019-11-11"},{"location":"CONTRIBUTING/","text":"Contributing # This project is hosted on GitHub. Visit GitHub Scripts # We provide a Makefile which helps the developers to: run tests, build the documentation (Processing algorithms) Translation # The UI is available on Transifex , no development knowledge is required. Code # SQL and Python are covered by unittests with Docker. 1 2 3 pip install -r requirements/dev.txt flake8 make tests QuickOSM uses a Git submodule . For a new clone, including the submodule, do git clone --recursive https://github.com/3liz/QuickOSM.git . For an existing clone, do git submodule init and git submodule update . These command will populate the qgis_plugin_tools . For panels, you can find a quick diagram in the doc folder. For tests, it's using the unittest framework. They are launched on GitHub using Travis, you can check the Travis status on each commits and pull requests. You can launch them locally: make docker_test using Docker with the current LTR following the QGIS release schedule . qgis_plugin_tools/docker_test.sh QuickOSM release-3_4 for QGIS 3.4 qgis_plugin_tools/docker_test.sh QuickOSM latest for QGIS Master or any other tags available on Docker Hub . If you are using docker, do not forget to update your image from time to time docker pull qgis/qgis:latest . Setting up your IDE to launch them by adding paths to your QGIS installation. I personally use PyCharm on Ubuntu. Launching tests from QGIS Desktop app, in the Python console using : 1 2 from qgis.utils import plugins plugins [ 'QuickOSM' ] . run_tests () Documentation # The documentation is using MkDocs with Material : 1 2 pip install -r requirements/doc.txt mkdocs serve Processing algorithms documentation can be generated with: 1 make processing-doc","title":"Contributing"},{"location":"CONTRIBUTING/#contributing","text":"This project is hosted on GitHub. Visit GitHub","title":"Contributing"},{"location":"CONTRIBUTING/#scripts","text":"We provide a Makefile which helps the developers to: run tests, build the documentation (Processing algorithms)","title":"Scripts"},{"location":"CONTRIBUTING/#translation","text":"The UI is available on Transifex , no development knowledge is required.","title":"Translation"},{"location":"CONTRIBUTING/#code","text":"SQL and Python are covered by unittests with Docker. 1 2 3 pip install -r requirements/dev.txt flake8 make tests QuickOSM uses a Git submodule . For a new clone, including the submodule, do git clone --recursive https://github.com/3liz/QuickOSM.git . For an existing clone, do git submodule init and git submodule update . These command will populate the qgis_plugin_tools . For panels, you can find a quick diagram in the doc folder. For tests, it's using the unittest framework. They are launched on GitHub using Travis, you can check the Travis status on each commits and pull requests. You can launch them locally: make docker_test using Docker with the current LTR following the QGIS release schedule . qgis_plugin_tools/docker_test.sh QuickOSM release-3_4 for QGIS 3.4 qgis_plugin_tools/docker_test.sh QuickOSM latest for QGIS Master or any other tags available on Docker Hub . If you are using docker, do not forget to update your image from time to time docker pull qgis/qgis:latest . Setting up your IDE to launch them by adding paths to your QGIS installation. I personally use PyCharm on Ubuntu. Launching tests from QGIS Desktop app, in the Python console using : 1 2 from qgis.utils import plugins plugins [ 'QuickOSM' ] . run_tests ()","title":"Code"},{"location":"CONTRIBUTING/#documentation","text":"The documentation is using MkDocs with Material : 1 2 pip install -r requirements/doc.txt mkdocs serve Processing algorithms documentation can be generated with: 1 make processing-doc","title":"Documentation"},{"location":"changelog/","text":"Changelog # Unreleased # 2.0.1 - 2022-02-07 # Fix trunk roads to Urban visualization preset (contribution from @Rikuoja) Fix an error when running Python 3.10 2.0.0 - 2021-09-09 # Release of QuickOSM 2.0.0 Add Vietnamese language Update of translations https://docs.3liz.org/QuickOSM/translation-stats/ Chinese, Dutch, French, Indonesian, Italian are now fully translated, thanks to contributors Raise minimum version to QGIS 3.16 Add presets for the keys/values Add multi-keys query from Quick Query panel Add history of queries Add option to get the metadata of OSM data such as author, timestamp etc Add default map presets to download a map with many queries Add a button to save the query in a personal preset (new or existing one) Add an action to reload the query Add processing algorithms for the \"Quick Query\", available in the QGIS Processing toolbox Add several output format such as Geopackage, KML Add the possibility to load only a subset of a local file Boost of performance using HStore processing algorithm to parse the downloaded OSM file Improve user interface Update of the documentation 2.0.0-beta4 - 2021-09-01 # Fix the query might be too long for the server when using a GET request by reducing the number of decimals Fix issue about reprojection of bounding box when using QuickOSM in QGIS Processing Update of translations https://docs.3liz.org/QuickOSM/translation-stats/ Chinese, Dutch, French, Indonesian, Italian are now fully translated, thanks to contributors 2.0.0-beta3 - 2021-08-12 # Fix the selection of the preset to run Fix the opening of an osm file with a custom configuration file Fix the reset of the dialog 2.0.0-beta2 - 2021-08-06 # Update the translations Add some documentations for users and for developers Add the preset translations in zip Fix the selection of preset 2.0.0-beta1 - 2021-08-02 # Raise minimum version to QGIS 3.16 Add presets for the keys/values Add multi-keys query from Quick Query panel Add history of queries Add option to get the metadata of OSM data such as author, timestamp etc Add default map presets to download a map with many queries Add a button to save the query in a personal preset (new or existing one) Add an action to reload the query Add processing algorithms for the \"Quick Query\" Add several output format such as geopackage, KML Add the possibility to load only a subset of a local file Boost of performance using HStore processing algorithm to parse the downloaded OSM file Improve user interface Update of the documentation 1.17.1 - 2021-06-23 # Add a reminder of the copyrights Fix loading of translations files Fix an error triggered when there was no layer in the project that prevented the generation functionality Fix an error when using QuickOSM in a Processing model 1.17.0 - 2021-06-09 # Add OpenHistoricalMap overpass server, linked to https://www.openhistoricalmap.org Add an option to use the extent of selected features Add Overpass Query Language (OQL) generator by default instead of legacy XML Add the possibility to choose the Nominatim server, by default the one from qgis.org Add one check from the Overpass API if too many requests from the user Fix the Mapillary action in the attribute table Fix some user experience issue about the place name Fix user experience about the named area drop-down menu Fix 'Around' query type to fetch any OSM object instead of only OSM nodes. In the source code, add some Python annotations and more tests 1.16.0 - 2021-03-26 # Changelog from 1.15.0 which has been unapproved Avoid regression from 1.15.0 about empty attribute table Always check to open file with UTF8 1.15.0 - 2021-03-10 # Fix the button to \"show the query\" Fix QGIS Processing algorithm about GDAL parameter Add the OSM key \"aeroway\" Add a button to open the online help from the QGIS help menu Update the documentation with a proper website https://docs.3liz.org/QuickOSM/ Add an automatic documentation for QGIS Processing algorithms on the website Some Python automatic code review 1.14.3 - 2020-09-18 # Fix issue about unicode in the OSM file when reading the end of the file only #240 1.14.2 - 2020-01-30 # Fix railway=abandoned Add a model by default in the modeler Fix loading translation file 1.14.1 - 2019-11-23 # Update translations from Transifex Fix bug #220 about loading local OSM file with custom config Add section about code contributors 1.14.0 - 2019-11-11 # Version 1.13.X was only experimental, so all features from 1.13.X Show human friendly label in the QuickQuery","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"Unreleased"},{"location":"changelog/#201-2022-02-07","text":"Fix trunk roads to Urban visualization preset (contribution from @Rikuoja) Fix an error when running Python 3.10","title":"2.0.1 - 2022-02-07"},{"location":"changelog/#200-2021-09-09","text":"Release of QuickOSM 2.0.0 Add Vietnamese language Update of translations https://docs.3liz.org/QuickOSM/translation-stats/ Chinese, Dutch, French, Indonesian, Italian are now fully translated, thanks to contributors Raise minimum version to QGIS 3.16 Add presets for the keys/values Add multi-keys query from Quick Query panel Add history of queries Add option to get the metadata of OSM data such as author, timestamp etc Add default map presets to download a map with many queries Add a button to save the query in a personal preset (new or existing one) Add an action to reload the query Add processing algorithms for the \"Quick Query\", available in the QGIS Processing toolbox Add several output format such as Geopackage, KML Add the possibility to load only a subset of a local file Boost of performance using HStore processing algorithm to parse the downloaded OSM file Improve user interface Update of the documentation","title":"2.0.0 - 2021-09-09"},{"location":"changelog/#200-beta4-2021-09-01","text":"Fix the query might be too long for the server when using a GET request by reducing the number of decimals Fix issue about reprojection of bounding box when using QuickOSM in QGIS Processing Update of translations https://docs.3liz.org/QuickOSM/translation-stats/ Chinese, Dutch, French, Indonesian, Italian are now fully translated, thanks to contributors","title":"2.0.0-beta4 - 2021-09-01"},{"location":"changelog/#200-beta3-2021-08-12","text":"Fix the selection of the preset to run Fix the opening of an osm file with a custom configuration file Fix the reset of the dialog","title":"2.0.0-beta3 - 2021-08-12"},{"location":"changelog/#200-beta2-2021-08-06","text":"Update the translations Add some documentations for users and for developers Add the preset translations in zip Fix the selection of preset","title":"2.0.0-beta2 - 2021-08-06"},{"location":"changelog/#200-beta1-2021-08-02","text":"Raise minimum version to QGIS 3.16 Add presets for the keys/values Add multi-keys query from Quick Query panel Add history of queries Add option to get the metadata of OSM data such as author, timestamp etc Add default map presets to download a map with many queries Add a button to save the query in a personal preset (new or existing one) Add an action to reload the query Add processing algorithms for the \"Quick Query\" Add several output format such as geopackage, KML Add the possibility to load only a subset of a local file Boost of performance using HStore processing algorithm to parse the downloaded OSM file Improve user interface Update of the documentation","title":"2.0.0-beta1 - 2021-08-02"},{"location":"changelog/#1171-2021-06-23","text":"Add a reminder of the copyrights Fix loading of translations files Fix an error triggered when there was no layer in the project that prevented the generation functionality Fix an error when using QuickOSM in a Processing model","title":"1.17.1 - 2021-06-23"},{"location":"changelog/#1170-2021-06-09","text":"Add OpenHistoricalMap overpass server, linked to https://www.openhistoricalmap.org Add an option to use the extent of selected features Add Overpass Query Language (OQL) generator by default instead of legacy XML Add the possibility to choose the Nominatim server, by default the one from qgis.org Add one check from the Overpass API if too many requests from the user Fix the Mapillary action in the attribute table Fix some user experience issue about the place name Fix user experience about the named area drop-down menu Fix 'Around' query type to fetch any OSM object instead of only OSM nodes. In the source code, add some Python annotations and more tests","title":"1.17.0 - 2021-06-09"},{"location":"changelog/#1160-2021-03-26","text":"Changelog from 1.15.0 which has been unapproved Avoid regression from 1.15.0 about empty attribute table Always check to open file with UTF8","title":"1.16.0 - 2021-03-26"},{"location":"changelog/#1150-2021-03-10","text":"Fix the button to \"show the query\" Fix QGIS Processing algorithm about GDAL parameter Add the OSM key \"aeroway\" Add a button to open the online help from the QGIS help menu Update the documentation with a proper website https://docs.3liz.org/QuickOSM/ Add an automatic documentation for QGIS Processing algorithms on the website Some Python automatic code review","title":"1.15.0 - 2021-03-10"},{"location":"changelog/#1143-2020-09-18","text":"Fix issue about unicode in the OSM file when reading the end of the file only #240","title":"1.14.3 - 2020-09-18"},{"location":"changelog/#1142-2020-01-30","text":"Fix railway=abandoned Add a model by default in the modeler Fix loading translation file","title":"1.14.2 - 2020-01-30"},{"location":"changelog/#1141-2019-11-23","text":"Update translations from Transifex Fix bug #220 about loading local OSM file with custom config Add section about code contributors","title":"1.14.1 - 2019-11-23"},{"location":"changelog/#1140-2019-11-11","text":"Version 1.13.X was only experimental, so all features from 1.13.X Show human friendly label in the QuickQuery","title":"1.14.0 - 2019-11-11"},{"location":"contributing/","text":"Contributing # This project is hosted on GitHub. Visit GitHub Scripts # We provide a Makefile which helps the developers to: run tests, build the documentation (Processing algorithms) Translation # The UI is available on Transifex , no development knowledge is required. Code # SQL and Python are covered by unittests with Docker. 1 2 3 pip install -r requirements/dev.txt flake8 make tests QuickOSM uses a Git submodule . For a new clone, including the submodule, do git clone --recursive https://github.com/3liz/QuickOSM.git . For an existing clone, do git submodule init and git submodule update . These command will populate the qgis_plugin_tools . For panels, you can find a quick diagram in the doc folder. For tests, it's using the unittest framework. They are launched on GitHub using Travis, you can check the Travis status on each commits and pull requests. You can launch them locally: make docker_test using Docker with the current LTR following the QGIS release schedule . qgis_plugin_tools/docker_test.sh QuickOSM release-3_4 for QGIS 3.4 qgis_plugin_tools/docker_test.sh QuickOSM latest for QGIS Master or any other tags available on Docker Hub . If you are using docker, do not forget to update your image from time to time docker pull qgis/qgis:latest . Setting up your IDE to launch them by adding paths to your QGIS installation. I personally use PyCharm on Ubuntu. Launching tests from QGIS Desktop app, in the Python console using : 1 2 from qgis.utils import plugins plugins [ 'QuickOSM' ] . run_tests () Documentation # The documentation is using MkDocs with Material : 1 2 pip install -r requirements/doc.txt mkdocs serve Processing algorithms documentation can be generated with: 1 make processing-doc Architecture # classDiagram BasePanel BaseProcessingPanel ConfigurationPanel BaseOverpassPanel OsmFilePanel MapPresetPanel QueryPanel QuickQueryPanel TableKeyValue BasePanel <|-- BaseProcessingPanel BasePanel <|-- ConfigurationPanel BaseProcessingPanel <|-- BaseOverpassPanel BaseProcessingPanel <|-- OsmFilePanel BaseProcessingPanel <|-- MapPresetPanel BaseOverpassPanel <|-- QueryPanel BaseOverpassPanel <|-- QuickQueryPanel TableKeyValue <|-- QuickQueryPanel TableKeyValue <|-- OsmFilePanel class BasePanel{ <<abstract>> +Panel +Dialog } class BaseProcessingPanel{ <<abstract>> run() _run() setup_panel() _start_process() _end_process() gather_values() } class BaseOverpassPanel{ <<abstract>> last_places nominatim() end_query() gather_values() }","title":"Contributing"},{"location":"contributing/#contributing","text":"This project is hosted on GitHub. Visit GitHub","title":"Contributing"},{"location":"contributing/#scripts","text":"We provide a Makefile which helps the developers to: run tests, build the documentation (Processing algorithms)","title":"Scripts"},{"location":"contributing/#translation","text":"The UI is available on Transifex , no development knowledge is required.","title":"Translation"},{"location":"contributing/#code","text":"SQL and Python are covered by unittests with Docker. 1 2 3 pip install -r requirements/dev.txt flake8 make tests QuickOSM uses a Git submodule . For a new clone, including the submodule, do git clone --recursive https://github.com/3liz/QuickOSM.git . For an existing clone, do git submodule init and git submodule update . These command will populate the qgis_plugin_tools . For panels, you can find a quick diagram in the doc folder. For tests, it's using the unittest framework. They are launched on GitHub using Travis, you can check the Travis status on each commits and pull requests. You can launch them locally: make docker_test using Docker with the current LTR following the QGIS release schedule . qgis_plugin_tools/docker_test.sh QuickOSM release-3_4 for QGIS 3.4 qgis_plugin_tools/docker_test.sh QuickOSM latest for QGIS Master or any other tags available on Docker Hub . If you are using docker, do not forget to update your image from time to time docker pull qgis/qgis:latest . Setting up your IDE to launch them by adding paths to your QGIS installation. I personally use PyCharm on Ubuntu. Launching tests from QGIS Desktop app, in the Python console using : 1 2 from qgis.utils import plugins plugins [ 'QuickOSM' ] . run_tests ()","title":"Code"},{"location":"contributing/#documentation","text":"The documentation is using MkDocs with Material : 1 2 pip install -r requirements/doc.txt mkdocs serve Processing algorithms documentation can be generated with: 1 make processing-doc","title":"Documentation"},{"location":"contributing/#architecture","text":"classDiagram BasePanel BaseProcessingPanel ConfigurationPanel BaseOverpassPanel OsmFilePanel MapPresetPanel QueryPanel QuickQueryPanel TableKeyValue BasePanel <|-- BaseProcessingPanel BasePanel <|-- ConfigurationPanel BaseProcessingPanel <|-- BaseOverpassPanel BaseProcessingPanel <|-- OsmFilePanel BaseProcessingPanel <|-- MapPresetPanel BaseOverpassPanel <|-- QueryPanel BaseOverpassPanel <|-- QuickQueryPanel TableKeyValue <|-- QuickQueryPanel TableKeyValue <|-- OsmFilePanel class BasePanel{ <<abstract>> +Panel +Dialog } class BaseProcessingPanel{ <<abstract>> run() _run() setup_panel() _start_process() _end_process() gather_values() } class BaseOverpassPanel{ <<abstract>> last_places nominatim() end_query() gather_values() }","title":"Architecture"},{"location":"references/","text":"References # Conference # State of the Map Heidelberg 2019 #","title":"References"},{"location":"references/#references","text":"","title":"References"},{"location":"references/#conference","text":"","title":"Conference"},{"location":"references/#state-of-the-map-heidelberg-2019","text":"","title":"State of the Map Heidelberg 2019"},{"location":"translation-stats/","text":"The translation is available on Transifex , no development knowledge is required. Statistics updated: 2022-02-22 Number of strings Number of target languages Overall Translation ratio 295 18 75.99 Language Translation ratio (%) Chinese 100.0 Dutch 100.0 Italian 100.0 Finnish 99.66 French 99.66 German 99.66 Korean 99.66 Portuguese (Brazil) 99.66 Romanian 99.66 Indonesian 98.64 Polish 95.93 Chinese (Taiwan) 86.1 Vietnamese 81.69 Russian 53.9 Spanish 52.2 Danish 1.36 Portuguese 0.0 Swedish 0.0","title":"Translation"},{"location":"processing/","text":"Processing # Run QuickOSM process with a raw query # This algorithm launches all the QuickOSM process from a raw query. The url is built with the parameters, the file is downloaded and treated. Parameters # ID Description Type Info Required Advanced Option QUERY Query String A XML or OQL query to be sent to the Overpass API. It can contain some {{}} tokens. \u2713 TIMEOUT Timeout Integer The timeout to use for the overpass api connexion \u2713 \u2713 Default: 25 Type: Integer Min: 5.0, Max: 1.7976931348623157e+308 EXTENT Extent, if \"{{bbox}}\" in the query Extent If the query has a {{bbox}} token, this extent will be used for replacement. \u2713 SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter AREA Area (if you want to override {{geocodeArea}} in the query) String The query is generated in the OQL format. \u2713 FILE Output file String Path to a geoPackage where the result will be saved Outputs # ID Description Type Info OUTPUT_POINTS Layer with a point geometry QgsVectorLayer OUTPUT_LINES Layer with a line geometry QgsVectorLayer OUTPUT_MULTILINESTRINGS Layer with a multi line geometry QgsVectorLayer OUTPUT_MULTIPOLYGONS Layer with a polygon geometry QgsVectorLayer Run QuickOSM process with a not spatial query # This algorithm launches all the QuickOSM process from a not spatial query. The url is built with the parameters, the file is downloaded and treated. Parameters # ID Description Type Info Required Advanced Option KEY Key, default to all keys String The OSM key to use. It can be empty and it will default to all keys. VALUE Value, default to all values String The OSM value to use. It can be empty and it will default to all values. TIMEOUT Timeout Integer The timeout to use for the overpass api connexion \u2713 \u2713 Default: 25 Type: Integer Min: 5.0, Max: 1.7976931348623157e+308 SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter FILE Output file String Path to a geoPackage where the result will be saved Outputs # ID Description Type Info OUTPUT_POINTS Layer with a point geometry QgsVectorLayer OUTPUT_LINES Layer with a line geometry QgsVectorLayer OUTPUT_MULTILINESTRINGS Layer with a multi line geometry QgsVectorLayer OUTPUT_MULTIPOLYGONS Layer with a polygon geometry QgsVectorLayer Run QuickOSM process with an 'in area' query # This algorithm launches all the QuickOSM process from an 'in area' query. The url is built with the parameters, the file is downloaded and treated. Parameters # ID Description Type Info Required Advanced Option KEY Key, default to all keys String The OSM key to use. It can be empty and it will default to all keys. VALUE Value, default to all values String The OSM value to use. It can be empty and it will default to all values. AREA Around the area String The name of a place, a first query to the Nominatim API will be executed to fetch the OSM ID. A WKT Point string is accepted as well. \u2713 TIMEOUT Timeout Integer The timeout to use for the overpass api connexion \u2713 \u2713 Default: 25 Type: Integer Min: 5.0, Max: 1.7976931348623157e+308 SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter FILE Output file String Path to a geoPackage where the result will be saved Outputs # ID Description Type Info OUTPUT_POINTS Layer with a point geometry QgsVectorLayer OUTPUT_LINES Layer with a line geometry QgsVectorLayer OUTPUT_MULTILINESTRINGS Layer with a multi line geometry QgsVectorLayer OUTPUT_MULTIPOLYGONS Layer with a polygon geometry QgsVectorLayer Run QuickOSM process with an 'around area' query # This algorithm launches all the QuickOSM process from an 'around area' query. The url is built with the parameters, the file is downloaded and treated. Parameters # ID Description Type Info Required Advanced Option KEY Key, default to all keys String The OSM key to use. It can be empty and it will default to all keys. VALUE Value, default to all values String The OSM value to use. It can be empty and it will default to all values. AREA Around the area String The name of a place, a first query to the Nominatim API will be executed to fetch the OSM ID. A WKT Point string is accepted as well. \u2713 DISTANCE Distance (meters) Number The distance to use when doing the buffering around the named area. The distance must be in meters. \u2713 Default: 1000 Type: Integer Min: 1.0, Max: 1.7976931348623157e+308 TIMEOUT Timeout Integer The timeout to use for the overpass api connexion \u2713 \u2713 Default: 25 Type: Integer Min: 5.0, Max: 1.7976931348623157e+308 SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter FILE Output file String Path to a geoPackage where the result will be saved Outputs # ID Description Type Info OUTPUT_POINTS Layer with a point geometry QgsVectorLayer OUTPUT_LINES Layer with a line geometry QgsVectorLayer OUTPUT_MULTILINESTRINGS Layer with a multi line geometry QgsVectorLayer OUTPUT_MULTIPOLYGONS Layer with a polygon geometry QgsVectorLayer Run QuickOSM process with an 'extent' query # This algorithm launches all the QuickOSM process from an 'extent' query. The url is built with the parameters, the file is downloaded and treated. Parameters # ID Description Type Info Required Advanced Option KEY Key, default to all keys String The OSM key to use. It can be empty and it will default to all keys. VALUE Value, default to all values String The OSM value to use. It can be empty and it will default to all values. EXTENT Extent Extent The extent as a rectangle to use when building the query. \u2713 TIMEOUT Timeout Integer The timeout to use for the overpass api connexion \u2713 \u2713 Default: 25 Type: Integer Min: 5.0, Max: 1.7976931348623157e+308 SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter FILE Output file String Path to a geoPackage where the result will be saved Outputs # ID Description Type Info OUTPUT_POINTS Layer with a point geometry QgsVectorLayer OUTPUT_LINES Layer with a line geometry QgsVectorLayer OUTPUT_MULTILINESTRINGS Layer with a multi line geometry QgsVectorLayer OUTPUT_MULTIPOLYGONS Layer with a polygon geometry QgsVectorLayer Advanced # Build query around an area # This algorithm builds a query and then encode it into the Overpass API URL. The \"Download File\" algorithm might be used after that to fetch the result. Parameters # ID Description Type Info Required Advanced Option KEY Key, default to all keys String The OSM key to use. It can be empty and it will default to all keys. VALUE Value, default to all values String The OSM value to use. It can be empty and it will default to all values. AREA Around the area String The name of a place, a first query to the Nominatim API will be executed to fetch the OSM ID. A WKT Point string is accepted as well. \u2713 DISTANCE Distance (meters) Number The distance to use when doing the buffering around the named area. The distance must be in meters. \u2713 Default: 1000 Type: Integer Min: 1.0, Max: 1.7976931348623157e+308 TIMEOUT Timeout Number The timeout to use for the Overpass API. \u2713 \u2713 Default: 25 Type: Integer Min: 5.0, Max: 1.7976931348623157e+308 SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter Outputs # ID Description Type Info OUTPUT_URL Query as encoded URL String The query is generated and encoded with the Overpass API URL. This output should be used in the File Downloader algorithm. OUTPUT_OQL_QUERY Raw query as OQL String The query is generated in the OQL format. Build query by attribute only # This algorithm builds a query and then encode it into the Overpass API URL. The \"Download File\" algorithm might be used after that to fetch the result. Parameters # ID Description Type Info Required Advanced Option KEY Key, default to all keys String The OSM key to use. It can be empty and it will default to all keys. VALUE Value, default to all values String The OSM value to use. It can be empty and it will default to all values. TIMEOUT Timeout Number The timeout to use for the Overpass API. \u2713 \u2713 Default: 25 Type: Integer Min: 5.0, Max: 1.7976931348623157e+308 SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter Outputs # ID Description Type Info OUTPUT_URL Query as encoded URL String The query is generated and encoded with the Overpass API URL. This output should be used in the File Downloader algorithm. OUTPUT_OQL_QUERY Raw query as OQL String The query is generated in the OQL format. Build query inside an extent # This algorithm builds a query and then encode it into the Overpass API URL. The \"Download File\" algorithm might be used after that to fetch the result. Parameters # ID Description Type Info Required Advanced Option KEY Key, default to all keys String The OSM key to use. It can be empty and it will default to all keys. VALUE Value, default to all values String The OSM value to use. It can be empty and it will default to all values. EXTENT Extent Extent The extent as a rectangle to use when building the query. \u2713 TIMEOUT Timeout Number The timeout to use for the Overpass API. \u2713 \u2713 Default: 25 Type: Integer Min: 5.0, Max: 1.7976931348623157e+308 SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter Outputs # ID Description Type Info OUTPUT_URL Query as encoded URL String The query is generated and encoded with the Overpass API URL. This output should be used in the File Downloader algorithm. OUTPUT_OQL_QUERY Raw query as OQL String The query is generated in the OQL format. Build query inside an area # This algorithm builds a query and then encode it into the Overpass API URL. The \"Download File\" algorithm might be used after that to fetch the result. Parameters # ID Description Type Info Required Advanced Option KEY Key, default to all keys String The OSM key to use. It can be empty and it will default to all keys. VALUE Value, default to all values String The OSM value to use. It can be empty and it will default to all values. AREA Inside the area String The name of the area. This will make a first query to the Nominatim API to fetch the OSM ID. \u2713 TIMEOUT Timeout Number The timeout to use for the Overpass API. \u2713 \u2713 Default: 25 Type: Integer Min: 5.0, Max: 1.7976931348623157e+308 SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter Outputs # ID Description Type Info OUTPUT_URL Query as encoded URL String The query is generated and encoded with the Overpass API URL. This output should be used in the File Downloader algorithm. OUTPUT_OQL_QUERY Raw query as OQL String The query is generated in the OQL format. Build raw query # A XML or OQL query to send to a Overpass API server. Parameters # ID Description Type Info Required Advanced Option QUERY Query String A XML or OQL query to be sent to the Overpass API. It can contains some {{}} tokens. \u2713 EXTENT Extent, if \"{{bbox}}\" in the query Extent If the query has a {{bbox}} token, this extent will be used for replacement. SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter AREA Area (if you want to override {{geocodeArea}} in the query) String The query is generated in the OQL format. \u2713 Outputs # ID Description Type Info OUTPUT_URL Query as encoded URL String OUTPUT_OQL_QUERY Raw query as OQL String Open sublayers from an OSM file # Open all sublayers from an OSM file. A custom OSM configuration file can be specified following the OGR documentation. This algorithm will not make a copy of the input file, it will only open it using OGR and custom INI file if provided. Parameters # ID Description Type Info Required Advanced Option FILE OSM file File The extension can be a OSM or PBF file. \u2713 OSM_CONF OSM configuration File The OGR OSM configuration file. This file is used to customize the import process about OSM tags. You should read the OGR documentation https://gdal.org/drivers/vector/osm.html Outputs # ID Description Type Info OUTPUT_POINTS Output points VectorLayer The point layer from the OGR OSM driver. OUTPUT_LINES Output lines VectorLayer The line layer from the OGR OSM driver. OUTPUT_MULTILINESTRINGS Output multilinestrings VectorLayer The multilinestrings layer from the OGR OSM driver. OUTPUT_MULTIPOLYGONS Output multipolygons VectorLayer The multipolygon layer from the OGR OSM driver. OUTPUT_OTHER_RELATIONS Output other relations VectorLayer The relation layer from the OGR OSM driver.","title":"Processing"},{"location":"processing/#processing","text":"","title":"Processing"},{"location":"processing/#run-quickosm-process-with-a-raw-query","text":"This algorithm launches all the QuickOSM process from a raw query. The url is built with the parameters, the file is downloaded and treated.","title":"Run QuickOSM process with a raw query"},{"location":"processing/#parameters","text":"ID Description Type Info Required Advanced Option QUERY Query String A XML or OQL query to be sent to the Overpass API. It can contain some {{}} tokens. \u2713 TIMEOUT Timeout Integer The timeout to use for the overpass api connexion \u2713 \u2713 Default: 25 Type: Integer Min: 5.0, Max: 1.7976931348623157e+308 EXTENT Extent, if \"{{bbox}}\" in the query Extent If the query has a {{bbox}} token, this extent will be used for replacement. \u2713 SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter AREA Area (if you want to override {{geocodeArea}} in the query) String The query is generated in the OQL format. \u2713 FILE Output file String Path to a geoPackage where the result will be saved","title":"Parameters"},{"location":"processing/#outputs","text":"ID Description Type Info OUTPUT_POINTS Layer with a point geometry QgsVectorLayer OUTPUT_LINES Layer with a line geometry QgsVectorLayer OUTPUT_MULTILINESTRINGS Layer with a multi line geometry QgsVectorLayer OUTPUT_MULTIPOLYGONS Layer with a polygon geometry QgsVectorLayer","title":"Outputs"},{"location":"processing/#run-quickosm-process-with-a-not-spatial-query","text":"This algorithm launches all the QuickOSM process from a not spatial query. The url is built with the parameters, the file is downloaded and treated.","title":"Run QuickOSM process with a not spatial query"},{"location":"processing/#parameters_1","text":"ID Description Type Info Required Advanced Option KEY Key, default to all keys String The OSM key to use. It can be empty and it will default to all keys. VALUE Value, default to all values String The OSM value to use. It can be empty and it will default to all values. TIMEOUT Timeout Integer The timeout to use for the overpass api connexion \u2713 \u2713 Default: 25 Type: Integer Min: 5.0, Max: 1.7976931348623157e+308 SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter FILE Output file String Path to a geoPackage where the result will be saved","title":"Parameters"},{"location":"processing/#outputs_1","text":"ID Description Type Info OUTPUT_POINTS Layer with a point geometry QgsVectorLayer OUTPUT_LINES Layer with a line geometry QgsVectorLayer OUTPUT_MULTILINESTRINGS Layer with a multi line geometry QgsVectorLayer OUTPUT_MULTIPOLYGONS Layer with a polygon geometry QgsVectorLayer","title":"Outputs"},{"location":"processing/#run-quickosm-process-with-an-in-area-query","text":"This algorithm launches all the QuickOSM process from an 'in area' query. The url is built with the parameters, the file is downloaded and treated.","title":"Run QuickOSM process with an 'in area' query"},{"location":"processing/#parameters_2","text":"ID Description Type Info Required Advanced Option KEY Key, default to all keys String The OSM key to use. It can be empty and it will default to all keys. VALUE Value, default to all values String The OSM value to use. It can be empty and it will default to all values. AREA Around the area String The name of a place, a first query to the Nominatim API will be executed to fetch the OSM ID. A WKT Point string is accepted as well. \u2713 TIMEOUT Timeout Integer The timeout to use for the overpass api connexion \u2713 \u2713 Default: 25 Type: Integer Min: 5.0, Max: 1.7976931348623157e+308 SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter FILE Output file String Path to a geoPackage where the result will be saved","title":"Parameters"},{"location":"processing/#outputs_2","text":"ID Description Type Info OUTPUT_POINTS Layer with a point geometry QgsVectorLayer OUTPUT_LINES Layer with a line geometry QgsVectorLayer OUTPUT_MULTILINESTRINGS Layer with a multi line geometry QgsVectorLayer OUTPUT_MULTIPOLYGONS Layer with a polygon geometry QgsVectorLayer","title":"Outputs"},{"location":"processing/#run-quickosm-process-with-an-around-area-query","text":"This algorithm launches all the QuickOSM process from an 'around area' query. The url is built with the parameters, the file is downloaded and treated.","title":"Run QuickOSM process with an 'around area' query"},{"location":"processing/#parameters_3","text":"ID Description Type Info Required Advanced Option KEY Key, default to all keys String The OSM key to use. It can be empty and it will default to all keys. VALUE Value, default to all values String The OSM value to use. It can be empty and it will default to all values. AREA Around the area String The name of a place, a first query to the Nominatim API will be executed to fetch the OSM ID. A WKT Point string is accepted as well. \u2713 DISTANCE Distance (meters) Number The distance to use when doing the buffering around the named area. The distance must be in meters. \u2713 Default: 1000 Type: Integer Min: 1.0, Max: 1.7976931348623157e+308 TIMEOUT Timeout Integer The timeout to use for the overpass api connexion \u2713 \u2713 Default: 25 Type: Integer Min: 5.0, Max: 1.7976931348623157e+308 SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter FILE Output file String Path to a geoPackage where the result will be saved","title":"Parameters"},{"location":"processing/#outputs_3","text":"ID Description Type Info OUTPUT_POINTS Layer with a point geometry QgsVectorLayer OUTPUT_LINES Layer with a line geometry QgsVectorLayer OUTPUT_MULTILINESTRINGS Layer with a multi line geometry QgsVectorLayer OUTPUT_MULTIPOLYGONS Layer with a polygon geometry QgsVectorLayer","title":"Outputs"},{"location":"processing/#run-quickosm-process-with-an-extent-query","text":"This algorithm launches all the QuickOSM process from an 'extent' query. The url is built with the parameters, the file is downloaded and treated.","title":"Run QuickOSM process with an 'extent' query"},{"location":"processing/#parameters_4","text":"ID Description Type Info Required Advanced Option KEY Key, default to all keys String The OSM key to use. It can be empty and it will default to all keys. VALUE Value, default to all values String The OSM value to use. It can be empty and it will default to all values. EXTENT Extent Extent The extent as a rectangle to use when building the query. \u2713 TIMEOUT Timeout Integer The timeout to use for the overpass api connexion \u2713 \u2713 Default: 25 Type: Integer Min: 5.0, Max: 1.7976931348623157e+308 SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter FILE Output file String Path to a geoPackage where the result will be saved","title":"Parameters"},{"location":"processing/#outputs_4","text":"ID Description Type Info OUTPUT_POINTS Layer with a point geometry QgsVectorLayer OUTPUT_LINES Layer with a line geometry QgsVectorLayer OUTPUT_MULTILINESTRINGS Layer with a multi line geometry QgsVectorLayer OUTPUT_MULTIPOLYGONS Layer with a polygon geometry QgsVectorLayer","title":"Outputs"},{"location":"processing/#advanced","text":"","title":"Advanced"},{"location":"processing/#build-query-around-an-area","text":"This algorithm builds a query and then encode it into the Overpass API URL. The \"Download File\" algorithm might be used after that to fetch the result.","title":"Build query around an area"},{"location":"processing/#parameters_5","text":"ID Description Type Info Required Advanced Option KEY Key, default to all keys String The OSM key to use. It can be empty and it will default to all keys. VALUE Value, default to all values String The OSM value to use. It can be empty and it will default to all values. AREA Around the area String The name of a place, a first query to the Nominatim API will be executed to fetch the OSM ID. A WKT Point string is accepted as well. \u2713 DISTANCE Distance (meters) Number The distance to use when doing the buffering around the named area. The distance must be in meters. \u2713 Default: 1000 Type: Integer Min: 1.0, Max: 1.7976931348623157e+308 TIMEOUT Timeout Number The timeout to use for the Overpass API. \u2713 \u2713 Default: 25 Type: Integer Min: 5.0, Max: 1.7976931348623157e+308 SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter","title":"Parameters"},{"location":"processing/#outputs_5","text":"ID Description Type Info OUTPUT_URL Query as encoded URL String The query is generated and encoded with the Overpass API URL. This output should be used in the File Downloader algorithm. OUTPUT_OQL_QUERY Raw query as OQL String The query is generated in the OQL format.","title":"Outputs"},{"location":"processing/#build-query-by-attribute-only","text":"This algorithm builds a query and then encode it into the Overpass API URL. The \"Download File\" algorithm might be used after that to fetch the result.","title":"Build query by attribute only"},{"location":"processing/#parameters_6","text":"ID Description Type Info Required Advanced Option KEY Key, default to all keys String The OSM key to use. It can be empty and it will default to all keys. VALUE Value, default to all values String The OSM value to use. It can be empty and it will default to all values. TIMEOUT Timeout Number The timeout to use for the Overpass API. \u2713 \u2713 Default: 25 Type: Integer Min: 5.0, Max: 1.7976931348623157e+308 SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter","title":"Parameters"},{"location":"processing/#outputs_6","text":"ID Description Type Info OUTPUT_URL Query as encoded URL String The query is generated and encoded with the Overpass API URL. This output should be used in the File Downloader algorithm. OUTPUT_OQL_QUERY Raw query as OQL String The query is generated in the OQL format.","title":"Outputs"},{"location":"processing/#build-query-inside-an-extent","text":"This algorithm builds a query and then encode it into the Overpass API URL. The \"Download File\" algorithm might be used after that to fetch the result.","title":"Build query inside an extent"},{"location":"processing/#parameters_7","text":"ID Description Type Info Required Advanced Option KEY Key, default to all keys String The OSM key to use. It can be empty and it will default to all keys. VALUE Value, default to all values String The OSM value to use. It can be empty and it will default to all values. EXTENT Extent Extent The extent as a rectangle to use when building the query. \u2713 TIMEOUT Timeout Number The timeout to use for the Overpass API. \u2713 \u2713 Default: 25 Type: Integer Min: 5.0, Max: 1.7976931348623157e+308 SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter","title":"Parameters"},{"location":"processing/#outputs_7","text":"ID Description Type Info OUTPUT_URL Query as encoded URL String The query is generated and encoded with the Overpass API URL. This output should be used in the File Downloader algorithm. OUTPUT_OQL_QUERY Raw query as OQL String The query is generated in the OQL format.","title":"Outputs"},{"location":"processing/#build-query-inside-an-area","text":"This algorithm builds a query and then encode it into the Overpass API URL. The \"Download File\" algorithm might be used after that to fetch the result.","title":"Build query inside an area"},{"location":"processing/#parameters_8","text":"ID Description Type Info Required Advanced Option KEY Key, default to all keys String The OSM key to use. It can be empty and it will default to all keys. VALUE Value, default to all values String The OSM value to use. It can be empty and it will default to all values. AREA Inside the area String The name of the area. This will make a first query to the Nominatim API to fetch the OSM ID. \u2713 TIMEOUT Timeout Number The timeout to use for the Overpass API. \u2713 \u2713 Default: 25 Type: Integer Min: 5.0, Max: 1.7976931348623157e+308 SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter","title":"Parameters"},{"location":"processing/#outputs_8","text":"ID Description Type Info OUTPUT_URL Query as encoded URL String The query is generated and encoded with the Overpass API URL. This output should be used in the File Downloader algorithm. OUTPUT_OQL_QUERY Raw query as OQL String The query is generated in the OQL format.","title":"Outputs"},{"location":"processing/#build-raw-query","text":"A XML or OQL query to send to a Overpass API server.","title":"Build raw query"},{"location":"processing/#parameters_9","text":"ID Description Type Info Required Advanced Option QUERY Query String A XML or OQL query to be sent to the Overpass API. It can contains some {{}} tokens. \u2713 EXTENT Extent, if \"{{bbox}}\" in the query Extent If the query has a {{bbox}} token, this extent will be used for replacement. SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter AREA Area (if you want to override {{geocodeArea}} in the query) String The query is generated in the OQL format. \u2713","title":"Parameters"},{"location":"processing/#outputs_9","text":"ID Description Type Info OUTPUT_URL Query as encoded URL String OUTPUT_OQL_QUERY Raw query as OQL String","title":"Outputs"},{"location":"processing/#open-sublayers-from-an-osm-file","text":"Open all sublayers from an OSM file. A custom OSM configuration file can be specified following the OGR documentation. This algorithm will not make a copy of the input file, it will only open it using OGR and custom INI file if provided.","title":"Open sublayers from an OSM file"},{"location":"processing/#parameters_10","text":"ID Description Type Info Required Advanced Option FILE OSM file File The extension can be a OSM or PBF file. \u2713 OSM_CONF OSM configuration File The OGR OSM configuration file. This file is used to customize the import process about OSM tags. You should read the OGR documentation https://gdal.org/drivers/vector/osm.html","title":"Parameters"},{"location":"processing/#outputs_10","text":"ID Description Type Info OUTPUT_POINTS Output points VectorLayer The point layer from the OGR OSM driver. OUTPUT_LINES Output lines VectorLayer The line layer from the OGR OSM driver. OUTPUT_MULTILINESTRINGS Output multilinestrings VectorLayer The multilinestrings layer from the OGR OSM driver. OUTPUT_MULTIPOLYGONS Output multipolygons VectorLayer The multipolygon layer from the OGR OSM driver. OUTPUT_OTHER_RELATIONS Output other relations VectorLayer The relation layer from the OGR OSM driver.","title":"Outputs"},{"location":"user-guide/end-user/","text":"Using the GUI # Map features # To have an overview of all keys and values, have a look to the OpenStreetMap wiki page . Tip You can write what ever you want in the Key and Value fields. OSM data model doesn't restrict any keys or values. Tip If you want to query all data, you can let key and value empty. Video # (Outdated) Watch the Video tutorial Quick how to # Install the QuickOSM plugin : # QGIS Plugins menu \u2192 Manage and Install Plugins\u2026 Search for QuickOSM and select it Install Plugin Try a quick query : # Vector menu \u2192 QuickOSM \u2192 QuickOSM In the key field enter amenity In the value field enter toilets Set the name of the town/village to London Run Query The Overpass API takes a few seconds to respond, and after that you should get new point and polygon layers for the toilets of London! (nodes and ways in OpenStreetMap with the amenity = toilet tag on them) Try to run a preset # Vector menu \u2192 QuickOSM \u2192 QuickOSM Go in Map preset panel Click on preset named Urban Set the name of the town/village to Montpellier Run preset The Overpass API takes a few seconds to respond, and after that you should get new lines and polygon layers that match roads and buildings in Montpellier with a custom style. Try to save and edit a preset # Vector menu \u2192 QuickOSM \u2192 QuickOSM In the key field enter amenity In the value field enter theater Set the name of the town/village to Paris Save query in a new preset Click on edit button in preset named amenity_theater_Paris In the preset name field enter Culture In the description field enter Theater and museum in Paris Add anew query Right click on Query2 \u2192 Rename \u2192 enter Museum In the Layer name field enter tourism_museum_Paris In the key field enter tourism In the value field enter museum In the area field enter Paris Validate You now have a preset that download the theaters and then the museums. You don't need to fill the parameter to run the preset, but you can if you want the theaters and museums in another place than Paris. Custom API server # If you want to add some customs servers, add a file called custom_config.json in your profile_name/QuickOSM folder and add this template in it : 1 2 3 4 5 6 7 8 { \"overpass_servers\" : [ \"http://your_custom_url.com/api/\" ], \"nominatim_servers\" : [ \"http://your_custom_url.com/search?\" ] } Both overpass_servers et nominatim_servers are optionals. If you want to add only one of them, you don't need to write the other. QuickOSM will add your custom list to the list below. To find the profile folder, go in Settings \u2192 Profile \u2192 Open active profile folder . Warning Do not change any files in profile_name/python/plugins/QuickOSM for adding a server. Your changes will be lost everytime the plugin is upgraded. A pull request is more than welcome if you want to add your server in QuickOSM core by updating this list below.","title":"End user"},{"location":"user-guide/end-user/#using-the-gui","text":"","title":"Using the GUI"},{"location":"user-guide/end-user/#map-features","text":"To have an overview of all keys and values, have a look to the OpenStreetMap wiki page . Tip You can write what ever you want in the Key and Value fields. OSM data model doesn't restrict any keys or values. Tip If you want to query all data, you can let key and value empty.","title":"Map features"},{"location":"user-guide/end-user/#video","text":"(Outdated) Watch the Video tutorial","title":"Video"},{"location":"user-guide/end-user/#quick-how-to","text":"","title":"Quick how to"},{"location":"user-guide/end-user/#install-the-quickosm-plugin","text":"QGIS Plugins menu \u2192 Manage and Install Plugins\u2026 Search for QuickOSM and select it Install Plugin","title":"Install the QuickOSM plugin :"},{"location":"user-guide/end-user/#try-a-quick-query","text":"Vector menu \u2192 QuickOSM \u2192 QuickOSM In the key field enter amenity In the value field enter toilets Set the name of the town/village to London Run Query The Overpass API takes a few seconds to respond, and after that you should get new point and polygon layers for the toilets of London! (nodes and ways in OpenStreetMap with the amenity = toilet tag on them)","title":"Try a quick query :"},{"location":"user-guide/end-user/#try-to-run-a-preset","text":"Vector menu \u2192 QuickOSM \u2192 QuickOSM Go in Map preset panel Click on preset named Urban Set the name of the town/village to Montpellier Run preset The Overpass API takes a few seconds to respond, and after that you should get new lines and polygon layers that match roads and buildings in Montpellier with a custom style.","title":"Try to run a preset"},{"location":"user-guide/end-user/#try-to-save-and-edit-a-preset","text":"Vector menu \u2192 QuickOSM \u2192 QuickOSM In the key field enter amenity In the value field enter theater Set the name of the town/village to Paris Save query in a new preset Click on edit button in preset named amenity_theater_Paris In the preset name field enter Culture In the description field enter Theater and museum in Paris Add anew query Right click on Query2 \u2192 Rename \u2192 enter Museum In the Layer name field enter tourism_museum_Paris In the key field enter tourism In the value field enter museum In the area field enter Paris Validate You now have a preset that download the theaters and then the museums. You don't need to fill the parameter to run the preset, but you can if you want the theaters and museums in another place than Paris.","title":"Try to save and edit a preset"},{"location":"user-guide/end-user/#custom-api-server","text":"If you want to add some customs servers, add a file called custom_config.json in your profile_name/QuickOSM folder and add this template in it : 1 2 3 4 5 6 7 8 { \"overpass_servers\" : [ \"http://your_custom_url.com/api/\" ], \"nominatim_servers\" : [ \"http://your_custom_url.com/search?\" ] } Both overpass_servers et nominatim_servers are optionals. If you want to add only one of them, you don't need to write the other. QuickOSM will add your custom list to the list below. To find the profile folder, go in Settings \u2192 Profile \u2192 Open active profile folder . Warning Do not change any files in profile_name/python/plugins/QuickOSM for adding a server. Your changes will be lost everytime the plugin is upgraded. A pull request is more than welcome if you want to add your server in QuickOSM core by updating this list below.","title":"Custom API server"},{"location":"user-guide/processing/","text":"Using QGIS Processing # For the list of algorithms, read the Processing section. Since QGIS 3.4, QuickOSM is available in the Processing modeler . Here some useful algorithms in an appropriate order: QuickOSM \u2192 Advanced , one of the Build query algorithms. File Tools \u2192 Download file , by using the Encoded URL as a input parameter from the previous algorithm. To process the OSM file : Either Modeler Tools \u2192 String concatenation . Useful to concatenate the downloaded filepath with |layername=points |layername=lines |layername=multilinestrings |layername=multipolygons Or QuickOSM \u2192 Open OSM file . Instead of the step above with the string concatenation. Then it's up to you to combine other QGIS algorithms. Check a more detailed answer on stackexchange : Vector Table \u2192 Explode HStore field (QGIS \u2265 3.6) Vector Table \u2192 Feature filter Since QGIS 3.6, you can export your Processing model as a Python script. You can also call these algorithms individually from the QGIS Python Processing framework. As an example, you can download this model and load it in your QGIS . Additionally, you can download example QGIS style files for OSM from here . The model will download and style OSM data from an extent and packages it in one Geopackage.","title":"QGIS Model and Python API"},{"location":"user-guide/processing/#using-qgis-processing","text":"For the list of algorithms, read the Processing section. Since QGIS 3.4, QuickOSM is available in the Processing modeler . Here some useful algorithms in an appropriate order: QuickOSM \u2192 Advanced , one of the Build query algorithms. File Tools \u2192 Download file , by using the Encoded URL as a input parameter from the previous algorithm. To process the OSM file : Either Modeler Tools \u2192 String concatenation . Useful to concatenate the downloaded filepath with |layername=points |layername=lines |layername=multilinestrings |layername=multipolygons Or QuickOSM \u2192 Open OSM file . Instead of the step above with the string concatenation. Then it's up to you to combine other QGIS algorithms. Check a more detailed answer on stackexchange : Vector Table \u2192 Explode HStore field (QGIS \u2265 3.6) Vector Table \u2192 Feature filter Since QGIS 3.6, you can export your Processing model as a Python script. You can also call these algorithms individually from the QGIS Python Processing framework. As an example, you can download this model and load it in your QGIS . Additionally, you can download example QGIS style files for OSM from here . The model will download and style OSM data from an extent and packages it in one Geopackage.","title":"Using QGIS Processing"}]}