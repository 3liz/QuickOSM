{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"QuickOSM # QuickOSM is a QGIS plugin to download data from Overpass server. QuickOSM allows you to work quickly with OSM data in QGIS thanks to Overpass API . Write some queries for you by providing a key/value Choose to run the query on an area or an extent Configure the query : which layers, which columns\u2026 Open a local OSM (.osm or .pbf) with a specific osmconf in QGIS Build some models with QGIS Processing There are some useful tips, like automatic colours on lines (if the tag is present), or some actions (right-click in the attribute table) for each entity (edit in JOSM for instance).","title":"Home"},{"location":"#quickosm","text":"QuickOSM is a QGIS plugin to download data from Overpass server. QuickOSM allows you to work quickly with OSM data in QGIS thanks to Overpass API . Write some queries for you by providing a key/value Choose to run the query on an area or an extent Configure the query : which layers, which columns\u2026 Open a local OSM (.osm or .pbf) with a specific osmconf in QGIS Build some models with QGIS Processing There are some useful tips, like automatic colours on lines (if the tag is present), or some actions (right-click in the attribute table) for each entity (edit in JOSM for instance).","title":"QuickOSM"},{"location":"CHANGELOG/","text":"Changelog # Unreleased # 2.0.0-beta3 - 2021-08-12 # Fix the selection of the preset to run Fix the opening of an osm file with a custom configuration file Fix the reset of the dialog 2.0.0-beta2 - 2021-08-06 # Update the translations Add some documentations for users and for developers Add the preset translations in zip Fix the selection of preset 2.0.0-beta1 - 2021-08-02 # Raise minimum version to QGIS 3.16 Add presets for the keys/values Add multi-keys query from Quick Query panel Add history of queries Add option to get the metadata of OSM data such as author, timestamp etc Add default map presets to download a map with many queries Add a button to save the query in a personal preset (new or existing one) Add an action to reload the query Add processing algorithms for the \"Quick Query\" Add several output format such as geopackage, KML Add the possibility to load only a subset of a local file Boost of performance using HStore processing algorithm to parse the downloaded OSM file Improve user interface Update of the documentation 1.17.1 - 2021-06-23 # Add a reminder of the copyrights Fix loading of translations files Fix an error triggered when there was no layer in the project that prevented the generation functionality Fix an error when using QuickOSM in a Processing model 1.17.0 - 2021-06-09 # Add OpenHistoricalMap overpass server, linked to https://www.openhistoricalmap.org Add an option to use the extent of selected features Add Overpass Query Language (OQL) generator by default instead of legacy XML Add the possibility to choose the Nominatim server, by default the one from qgis.org Add one check from the Overpass API if too many requests from the user Fix the Mapillary action in the attribute table Fix some user experience issue about the place name Fix user experience about the named area drop-down menu Fix 'Around' query type to fetch any OSM object instead of only OSM nodes. In the source code, add some Python annotations and more tests 1.16.0 - 2021-03-26 # Changelog from 1.15.0 which has been unapproved Avoid regression from 1.15.0 about empty attribute table Always check to open file with UTF8 1.15.0 - 2021-03-10 # Fix the button to \"show the query\" Fix QGIS Processing algorithm about GDAL parameter Add the OSM key \"aeroway\" Add a button to open the online help from the QGIS help menu Update the documentation with a proper website https://docs.3liz.org/QuickOSM/ Add an automatic documentation for QGIS Processing algorithms on the website Some Python automatic code review 1.14.3 - 2020-09-18 # Fix issue about unicode in the OSM file when reading the end of the file only #240 1.14.2 - 2020-01-30 # Fix railway=abandoned Add a model by default in the modeler Fix loading translation file 1.14.1 - 2019-11-23 # Update translations from Transifex Fix bug #220 about loading local OSM file with custom config Add section about code contributors 1.14.0 - 2019-11-11 # Version 1.13.X was only experimental, so all features from 1.13.X Show human friendly label in the QuickQuery","title":"Changelog"},{"location":"CHANGELOG/#changelog","text":"","title":"Changelog"},{"location":"CHANGELOG/#unreleased","text":"","title":"Unreleased"},{"location":"CHANGELOG/#200-beta3-2021-08-12","text":"Fix the selection of the preset to run Fix the opening of an osm file with a custom configuration file Fix the reset of the dialog","title":"2.0.0-beta3 - 2021-08-12"},{"location":"CHANGELOG/#200-beta2-2021-08-06","text":"Update the translations Add some documentations for users and for developers Add the preset translations in zip Fix the selection of preset","title":"2.0.0-beta2 - 2021-08-06"},{"location":"CHANGELOG/#200-beta1-2021-08-02","text":"Raise minimum version to QGIS 3.16 Add presets for the keys/values Add multi-keys query from Quick Query panel Add history of queries Add option to get the metadata of OSM data such as author, timestamp etc Add default map presets to download a map with many queries Add a button to save the query in a personal preset (new or existing one) Add an action to reload the query Add processing algorithms for the \"Quick Query\" Add several output format such as geopackage, KML Add the possibility to load only a subset of a local file Boost of performance using HStore processing algorithm to parse the downloaded OSM file Improve user interface Update of the documentation","title":"2.0.0-beta1 - 2021-08-02"},{"location":"CHANGELOG/#1171-2021-06-23","text":"Add a reminder of the copyrights Fix loading of translations files Fix an error triggered when there was no layer in the project that prevented the generation functionality Fix an error when using QuickOSM in a Processing model","title":"1.17.1 - 2021-06-23"},{"location":"CHANGELOG/#1170-2021-06-09","text":"Add OpenHistoricalMap overpass server, linked to https://www.openhistoricalmap.org Add an option to use the extent of selected features Add Overpass Query Language (OQL) generator by default instead of legacy XML Add the possibility to choose the Nominatim server, by default the one from qgis.org Add one check from the Overpass API if too many requests from the user Fix the Mapillary action in the attribute table Fix some user experience issue about the place name Fix user experience about the named area drop-down menu Fix 'Around' query type to fetch any OSM object instead of only OSM nodes. In the source code, add some Python annotations and more tests","title":"1.17.0 - 2021-06-09"},{"location":"CHANGELOG/#1160-2021-03-26","text":"Changelog from 1.15.0 which has been unapproved Avoid regression from 1.15.0 about empty attribute table Always check to open file with UTF8","title":"1.16.0 - 2021-03-26"},{"location":"CHANGELOG/#1150-2021-03-10","text":"Fix the button to \"show the query\" Fix QGIS Processing algorithm about GDAL parameter Add the OSM key \"aeroway\" Add a button to open the online help from the QGIS help menu Update the documentation with a proper website https://docs.3liz.org/QuickOSM/ Add an automatic documentation for QGIS Processing algorithms on the website Some Python automatic code review","title":"1.15.0 - 2021-03-10"},{"location":"CHANGELOG/#1143-2020-09-18","text":"Fix issue about unicode in the OSM file when reading the end of the file only #240","title":"1.14.3 - 2020-09-18"},{"location":"CHANGELOG/#1142-2020-01-30","text":"Fix railway=abandoned Add a model by default in the modeler Fix loading translation file","title":"1.14.2 - 2020-01-30"},{"location":"CHANGELOG/#1141-2019-11-23","text":"Update translations from Transifex Fix bug #220 about loading local OSM file with custom config Add section about code contributors","title":"1.14.1 - 2019-11-23"},{"location":"CHANGELOG/#1140-2019-11-11","text":"Version 1.13.X was only experimental, so all features from 1.13.X Show human friendly label in the QuickQuery","title":"1.14.0 - 2019-11-11"},{"location":"CONTRIBUTING/","text":"Contributing # This project is hosted on GitHub. Visit GitHub Scripts # We provide a Makefile which helps the developers to: run tests, build the documentation (Processing algorithms) Translation # The UI is available on Transifex , no development knowledge is required. Code # SQL and Python are covered by unittests with Docker. 1 2 3 pip install -r requirements/dev.txt flake8 make tests QuickOSM uses a Git submodule . For a new clone, including the submodule, do git clone --recursive https://github.com/3liz/QuickOSM.git . For an existing clone, do git submodule init and git submodule update . These command will populate the qgis_plugin_tools . For panels, you can find a quick diagram in the doc folder. For tests, it's using the unittest framework. They are launched on GitHub using Travis, you can check the Travis status on each commits and pull requests. You can launch them locally: make docker_test using Docker with the current LTR following the QGIS release schedule . qgis_plugin_tools/docker_test.sh QuickOSM release-3_4 for QGIS 3.4 qgis_plugin_tools/docker_test.sh QuickOSM latest for QGIS Master or any other tags available on Docker Hub . If you are using docker, do not forget to update your image from time to time docker pull qgis/qgis:latest . Setting up your IDE to launch them by adding paths to your QGIS installation. I personally use PyCharm on Ubuntu. Launching tests from QGIS Desktop app, in the Python console using : 1 2 from qgis.utils import plugins plugins [ 'QuickOSM' ] . run_tests () Documentation # The documentation is using MkDocs with Material : 1 2 pip install -r requirements/doc.txt mkdocs serve Processing algorithms documentation can be generated with: 1 make processing-doc","title":"Contributing"},{"location":"CONTRIBUTING/#contributing","text":"This project is hosted on GitHub. Visit GitHub","title":"Contributing"},{"location":"CONTRIBUTING/#scripts","text":"We provide a Makefile which helps the developers to: run tests, build the documentation (Processing algorithms)","title":"Scripts"},{"location":"CONTRIBUTING/#translation","text":"The UI is available on Transifex , no development knowledge is required.","title":"Translation"},{"location":"CONTRIBUTING/#code","text":"SQL and Python are covered by unittests with Docker. 1 2 3 pip install -r requirements/dev.txt flake8 make tests QuickOSM uses a Git submodule . For a new clone, including the submodule, do git clone --recursive https://github.com/3liz/QuickOSM.git . For an existing clone, do git submodule init and git submodule update . These command will populate the qgis_plugin_tools . For panels, you can find a quick diagram in the doc folder. For tests, it's using the unittest framework. They are launched on GitHub using Travis, you can check the Travis status on each commits and pull requests. You can launch them locally: make docker_test using Docker with the current LTR following the QGIS release schedule . qgis_plugin_tools/docker_test.sh QuickOSM release-3_4 for QGIS 3.4 qgis_plugin_tools/docker_test.sh QuickOSM latest for QGIS Master or any other tags available on Docker Hub . If you are using docker, do not forget to update your image from time to time docker pull qgis/qgis:latest . Setting up your IDE to launch them by adding paths to your QGIS installation. I personally use PyCharm on Ubuntu. Launching tests from QGIS Desktop app, in the Python console using : 1 2 from qgis.utils import plugins plugins [ 'QuickOSM' ] . run_tests ()","title":"Code"},{"location":"CONTRIBUTING/#documentation","text":"The documentation is using MkDocs with Material : 1 2 pip install -r requirements/doc.txt mkdocs serve Processing algorithms documentation can be generated with: 1 make processing-doc","title":"Documentation"},{"location":"changelog/","text":"Changelog # Unreleased # 2.0.0-beta3 - 2021-08-12 # Fix the selection of the preset to run Fix the opening of an osm file with a custom configuration file Fix the reset of the dialog 2.0.0-beta2 - 2021-08-06 # Update the translations Add some documentations for users and for developers Add the preset translations in zip Fix the selection of preset 2.0.0-beta1 - 2021-08-02 # Raise minimum version to QGIS 3.16 Add presets for the keys/values Add multi-keys query from Quick Query panel Add history of queries Add option to get the metadata of OSM data such as author, timestamp etc Add default map presets to download a map with many queries Add a button to save the query in a personal preset (new or existing one) Add an action to reload the query Add processing algorithms for the \"Quick Query\" Add several output format such as geopackage, KML Add the possibility to load only a subset of a local file Boost of performance using HStore processing algorithm to parse the downloaded OSM file Improve user interface Update of the documentation 1.17.1 - 2021-06-23 # Add a reminder of the copyrights Fix loading of translations files Fix an error triggered when there was no layer in the project that prevented the generation functionality Fix an error when using QuickOSM in a Processing model 1.17.0 - 2021-06-09 # Add OpenHistoricalMap overpass server, linked to https://www.openhistoricalmap.org Add an option to use the extent of selected features Add Overpass Query Language (OQL) generator by default instead of legacy XML Add the possibility to choose the Nominatim server, by default the one from qgis.org Add one check from the Overpass API if too many requests from the user Fix the Mapillary action in the attribute table Fix some user experience issue about the place name Fix user experience about the named area drop-down menu Fix 'Around' query type to fetch any OSM object instead of only OSM nodes. In the source code, add some Python annotations and more tests 1.16.0 - 2021-03-26 # Changelog from 1.15.0 which has been unapproved Avoid regression from 1.15.0 about empty attribute table Always check to open file with UTF8 1.15.0 - 2021-03-10 # Fix the button to \"show the query\" Fix QGIS Processing algorithm about GDAL parameter Add the OSM key \"aeroway\" Add a button to open the online help from the QGIS help menu Update the documentation with a proper website https://docs.3liz.org/QuickOSM/ Add an automatic documentation for QGIS Processing algorithms on the website Some Python automatic code review 1.14.3 - 2020-09-18 # Fix issue about unicode in the OSM file when reading the end of the file only #240 1.14.2 - 2020-01-30 # Fix railway=abandoned Add a model by default in the modeler Fix loading translation file 1.14.1 - 2019-11-23 # Update translations from Transifex Fix bug #220 about loading local OSM file with custom config Add section about code contributors 1.14.0 - 2019-11-11 # Version 1.13.X was only experimental, so all features from 1.13.X Show human friendly label in the QuickQuery","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"Unreleased"},{"location":"changelog/#200-beta3-2021-08-12","text":"Fix the selection of the preset to run Fix the opening of an osm file with a custom configuration file Fix the reset of the dialog","title":"2.0.0-beta3 - 2021-08-12"},{"location":"changelog/#200-beta2-2021-08-06","text":"Update the translations Add some documentations for users and for developers Add the preset translations in zip Fix the selection of preset","title":"2.0.0-beta2 - 2021-08-06"},{"location":"changelog/#200-beta1-2021-08-02","text":"Raise minimum version to QGIS 3.16 Add presets for the keys/values Add multi-keys query from Quick Query panel Add history of queries Add option to get the metadata of OSM data such as author, timestamp etc Add default map presets to download a map with many queries Add a button to save the query in a personal preset (new or existing one) Add an action to reload the query Add processing algorithms for the \"Quick Query\" Add several output format such as geopackage, KML Add the possibility to load only a subset of a local file Boost of performance using HStore processing algorithm to parse the downloaded OSM file Improve user interface Update of the documentation","title":"2.0.0-beta1 - 2021-08-02"},{"location":"changelog/#1171-2021-06-23","text":"Add a reminder of the copyrights Fix loading of translations files Fix an error triggered when there was no layer in the project that prevented the generation functionality Fix an error when using QuickOSM in a Processing model","title":"1.17.1 - 2021-06-23"},{"location":"changelog/#1170-2021-06-09","text":"Add OpenHistoricalMap overpass server, linked to https://www.openhistoricalmap.org Add an option to use the extent of selected features Add Overpass Query Language (OQL) generator by default instead of legacy XML Add the possibility to choose the Nominatim server, by default the one from qgis.org Add one check from the Overpass API if too many requests from the user Fix the Mapillary action in the attribute table Fix some user experience issue about the place name Fix user experience about the named area drop-down menu Fix 'Around' query type to fetch any OSM object instead of only OSM nodes. In the source code, add some Python annotations and more tests","title":"1.17.0 - 2021-06-09"},{"location":"changelog/#1160-2021-03-26","text":"Changelog from 1.15.0 which has been unapproved Avoid regression from 1.15.0 about empty attribute table Always check to open file with UTF8","title":"1.16.0 - 2021-03-26"},{"location":"changelog/#1150-2021-03-10","text":"Fix the button to \"show the query\" Fix QGIS Processing algorithm about GDAL parameter Add the OSM key \"aeroway\" Add a button to open the online help from the QGIS help menu Update the documentation with a proper website https://docs.3liz.org/QuickOSM/ Add an automatic documentation for QGIS Processing algorithms on the website Some Python automatic code review","title":"1.15.0 - 2021-03-10"},{"location":"changelog/#1143-2020-09-18","text":"Fix issue about unicode in the OSM file when reading the end of the file only #240","title":"1.14.3 - 2020-09-18"},{"location":"changelog/#1142-2020-01-30","text":"Fix railway=abandoned Add a model by default in the modeler Fix loading translation file","title":"1.14.2 - 2020-01-30"},{"location":"changelog/#1141-2019-11-23","text":"Update translations from Transifex Fix bug #220 about loading local OSM file with custom config Add section about code contributors","title":"1.14.1 - 2019-11-23"},{"location":"changelog/#1140-2019-11-11","text":"Version 1.13.X was only experimental, so all features from 1.13.X Show human friendly label in the QuickQuery","title":"1.14.0 - 2019-11-11"},{"location":"contributing/","text":"Contributing # This project is hosted on GitHub. Visit GitHub Scripts # We provide a Makefile which helps the developers to: run tests, build the documentation (Processing algorithms) Translation # The UI is available on Transifex , no development knowledge is required. Code # SQL and Python are covered by unittests with Docker. 1 2 3 pip install -r requirements/dev.txt flake8 make tests QuickOSM uses a Git submodule . For a new clone, including the submodule, do git clone --recursive https://github.com/3liz/QuickOSM.git . For an existing clone, do git submodule init and git submodule update . These command will populate the qgis_plugin_tools . For panels, you can find a quick diagram in the doc folder. For tests, it's using the unittest framework. They are launched on GitHub using Travis, you can check the Travis status on each commits and pull requests. You can launch them locally: make docker_test using Docker with the current LTR following the QGIS release schedule . qgis_plugin_tools/docker_test.sh QuickOSM release-3_4 for QGIS 3.4 qgis_plugin_tools/docker_test.sh QuickOSM latest for QGIS Master or any other tags available on Docker Hub . If you are using docker, do not forget to update your image from time to time docker pull qgis/qgis:latest . Setting up your IDE to launch them by adding paths to your QGIS installation. I personally use PyCharm on Ubuntu. Launching tests from QGIS Desktop app, in the Python console using : 1 2 from qgis.utils import plugins plugins [ 'QuickOSM' ] . run_tests () Documentation # The documentation is using MkDocs with Material : 1 2 pip install -r requirements/doc.txt mkdocs serve Processing algorithms documentation can be generated with: 1 make processing-doc Architecture # classDiagram BasePanel BaseProcessingPanel ConfigurationPanel BaseOverpassPanel OsmFilePanel MapPresetPanel QueryPanel QuickQueryPanel TableKeyValue BasePanel <|-- BaseProcessingPanel BasePanel <|-- ConfigurationPanel BaseProcessingPanel <|-- BaseOverpassPanel BaseProcessingPanel <|-- OsmFilePanel BaseProcessingPanel <|-- MapPresetPanel BaseOverpassPanel <|-- QueryPanel BaseOverpassPanel <|-- QuickQueryPanel TableKeyValue <|-- QuickQueryPanel TableKeyValue <|-- OsmFilePanel class BasePanel{ <<abstract>> +Panel +Dialog } class BaseProcessingPanel{ <<abstract>> run() _run() setup_panel() _start_process() _end_process() gather_values() } class BaseOverpassPanel{ <<abstract>> last_places nominatim() end_query() gather_values() }","title":"Contributing"},{"location":"contributing/#contributing","text":"This project is hosted on GitHub. Visit GitHub","title":"Contributing"},{"location":"contributing/#scripts","text":"We provide a Makefile which helps the developers to: run tests, build the documentation (Processing algorithms)","title":"Scripts"},{"location":"contributing/#translation","text":"The UI is available on Transifex , no development knowledge is required.","title":"Translation"},{"location":"contributing/#code","text":"SQL and Python are covered by unittests with Docker. 1 2 3 pip install -r requirements/dev.txt flake8 make tests QuickOSM uses a Git submodule . For a new clone, including the submodule, do git clone --recursive https://github.com/3liz/QuickOSM.git . For an existing clone, do git submodule init and git submodule update . These command will populate the qgis_plugin_tools . For panels, you can find a quick diagram in the doc folder. For tests, it's using the unittest framework. They are launched on GitHub using Travis, you can check the Travis status on each commits and pull requests. You can launch them locally: make docker_test using Docker with the current LTR following the QGIS release schedule . qgis_plugin_tools/docker_test.sh QuickOSM release-3_4 for QGIS 3.4 qgis_plugin_tools/docker_test.sh QuickOSM latest for QGIS Master or any other tags available on Docker Hub . If you are using docker, do not forget to update your image from time to time docker pull qgis/qgis:latest . Setting up your IDE to launch them by adding paths to your QGIS installation. I personally use PyCharm on Ubuntu. Launching tests from QGIS Desktop app, in the Python console using : 1 2 from qgis.utils import plugins plugins [ 'QuickOSM' ] . run_tests ()","title":"Code"},{"location":"contributing/#documentation","text":"The documentation is using MkDocs with Material : 1 2 pip install -r requirements/doc.txt mkdocs serve Processing algorithms documentation can be generated with: 1 make processing-doc","title":"Documentation"},{"location":"contributing/#architecture","text":"classDiagram BasePanel BaseProcessingPanel ConfigurationPanel BaseOverpassPanel OsmFilePanel MapPresetPanel QueryPanel QuickQueryPanel TableKeyValue BasePanel <|-- BaseProcessingPanel BasePanel <|-- ConfigurationPanel BaseProcessingPanel <|-- BaseOverpassPanel BaseProcessingPanel <|-- OsmFilePanel BaseProcessingPanel <|-- MapPresetPanel BaseOverpassPanel <|-- QueryPanel BaseOverpassPanel <|-- QuickQueryPanel TableKeyValue <|-- QuickQueryPanel TableKeyValue <|-- OsmFilePanel class BasePanel{ <<abstract>> +Panel +Dialog } class BaseProcessingPanel{ <<abstract>> run() _run() setup_panel() _start_process() _end_process() gather_values() } class BaseOverpassPanel{ <<abstract>> last_places nominatim() end_query() gather_values() }","title":"Architecture"},{"location":"references/","text":"References # Conference # State of the Map Heidelberg 2019 #","title":"References"},{"location":"references/#references","text":"","title":"References"},{"location":"references/#conference","text":"","title":"Conference"},{"location":"references/#state-of-the-map-heidelberg-2019","text":"","title":"State of the Map Heidelberg 2019"},{"location":"translation-stats/","text":"The translation is available on Transifex , no development knowledge is required. Statistics updated: 2021-08-23 Number of strings Number of target languages Overall Translation ratio 291 13 64.6 Language Translation ratio (%) Chinese 100.0 Dutch 100.0 French 100.0 Indonesian 100.0 Italian 100.0 Portuguese (Brazil) 87.97 Polish 73.54 Chinese (Taiwan) 57.39 Russian 54.64 Spanish 52.92 German 9.62 Finnish 3.78 Danish 0.0","title":"Translation"},{"location":"code-documentation/core/","text":"Files documentation # Core files documentation # QuickOSM.core special # actions # Actions definitions. Actions # Manage actions available on layers pre_run_reload ( self ) # Prepare the reload run ( field : str , value : str ) staticmethod # Run an action with only one value as parameter Parameters: Name Type Description Default field str Type of the action required value str Value of the field for one entity required run_reload ( layer_name : str = '' , layer : QgsVectorLayer = None , dialog : QDialog = None ) staticmethod # Reload the query run_sketch_line ( network : str , ref : str ) staticmethod # Run an action with two values for sketchline Parameters: Name Type Description Default network str network of the bus required ref str ref of the bus required add_actions ( layer : QgsVectorLayer , keys : list ) # Add actions on layer. Parameters: Name Type Description Default layer QgsVectorLayer The layer. required keys list The list of keys in the layer. required add_relaunch_action ( layer : QgsVectorLayer , layer_name : str = '' ) # Add the relaunch action api special # connexion_oapi # Manage Overpass API connexion. ConnexionOAPI # Manage connexion to the overpass API. __init__ ( self , url : str , convert : bool = False ) special # Constructor of query. Parameters: Name Type Description Default url str Full URL of OverPass Query with the query encoded in it. required check_file ( path : str ) staticmethod # Verify the file provided by the Overpass API is_bad_request ( string : str ) staticmethod # Check the bad request exception is_query_timed_out ( string : str ) staticmethod # Check the time out exception run ( self ) -> str # Run the query. Returns: Type Description str The result of the query. Exceptions: Type Description OverpassBadRequestException NetWorkErrorException OverpassTimeoutException run_convert ( self ) -> str # Run the query converter Returns: Type Description str The converted query too_many_request ( string : str ) staticmethod # Check the too many request exception downloader # Manage downloader. Downloader # Manage downloader. __init__ ( self , url : str = None ) special # Constructor. canceled () staticmethod # Display the status in logger completed () staticmethod # Display the status in logger download ( self ) # Download the data error ( self , messages : str ) # Store the messages error nominatim # Manage nominatim connexion. Nominatim # Manage connexion to Nominatim. __init__ ( self , url : str = None ) special # Constructor. Parameters: Name Type Description Default url str URL of Nominatim server. None error ( self , messages : str ) # Display the status in logger get_first_point_from_query ( self , query : str , hack_test : bool = False ) -> ( < class ' str '>, <class ' str '>) # Get first longitude, latitude of a Nominatim point. Parameters: Name Type Description Default query str Query to execute. required hack_test bool set up test without internet False Returns: Type Description (<class 'str'>, <class 'str'>) First node with its longitude and latitude. Exceptions: Type Description NominatimAreaException get_first_polygon_from_query ( self , query : str , hack_test : bool = False ) -> str # Get first OSM_ID of a Nominatim area. Parameters: Name Type Description Default query str Query to execute. required hack_test bool set up test without internet False Returns: Type Description str First relation's with an \"osm_id\". Exceptions: Type Description NominatimAreaException query ( self , query : str ) -> dict # Perform a nominatim query. Parameters: Name Type Description Default query str Query to execute on the nominatim server. required Returns: Type Description dict The result of the query as a dictionary. Exceptions: Type Description NetWorkErrorException exceptions # Exceptions definitions. DirectoryOutPutException # Directory doesn't exist exception. FileDoesntExistException # File doesn't exist exception. FileOutPutException # File already exist exception. MissingLayerUI # No layer exception. MissingParameterException # Missing parameter exception. NetWorkErrorException # Network error exception. NominatimAreaException # Raised when no Nominatim area has been found. __init__ ( self , query : str ) special # Raised when no Nominatim area has been found. Parameters: Name Type Description Default query str Name of the place. required NominatimBadRequest # Raised when no Nominatim data has been downloaded. __init__ ( self , query : str ) special # Raised when no Nominatim area has been found. Parameters: Name Type Description Default query str Name of the place. required NoSelectedFeatures # No selected features exception. NoSelectedPreset # No selected preset exception. OsmObjectsException # No OSM objects selected exception. OutPutGeomTypesException # No outputs geometries selected exception. OverpassBadRequestException # Bad request exception. OverpassManyRequestException # Too many request exception. OverpassMemoryException # Out of memory exception. OverpassRuntimeError # Runtime exceeded exception. OverpassTimeoutException # Time out exception QueryFactoryException # Query can't be build exception. QueryNotSupported # Query not supported exception. QuickOsmException # These exceptions are created by QuickOSM during a process. __init__ ( self , message : str = None , more_details : str = None ) special # Constructor. Parameters: Name Type Description Default message str The base message to display in the message bar. None more_details str More information to be displayed in the \"More info\" button. None parser special # osm_parser # OSM Parser file. OsmParser # Parse an OSM file with OGR. processing_parse ( self ) # Start parsing the osm file with processing. preset_parser # Parser of the presets file. PresetsParser # Management of the presets file. node_filter ( node , search : str = 'group' ) -> bool staticmethod # Test if the node has the tag we search osm_keys_values ( self ) -> dict # Retrieval of key/value couple parser ( self ) -> < function namedtuple at 0x7f6c21216f70 > # Parse the presets file Returns: Type Description <function namedtuple at 0x7f6c21216f70> a dictionary of two dictionaries. Elements contains the data needed for the completer Items contains the data needed for the preset Items_combo contains couples key/value needed to specify more the query preset_translate ( file : str ) -> dict staticmethod # Translate the preset in the language define in QGIS process # The full process of opening a query, an OSM file. open_file ( dialog : QDialog = None , osm_file : str = None , output_geom_types : list = None , white_list_column : dict = None , key : Union [ str , List [ str ]] = None , layer_name : str = 'OsmFile' , config_outputs : dict = None , output_dir : str = None , output_format : Format = None , final_query : str = None , prefix_file : str = None , subset : bool = False , subset_query : str = None , feedback : QgsFeedback = None ) -> int # Open an osm file. Memory layer if no output directory is set, or Geojson in the output directory. Parameters: Name Type Description Default final_query str The query where the file comes from. Might be empty if it's a local OSM file. None process_query ( dialog : QDialog = None , query : str = None , description : str = None , area : Union [ str , List [ str ]] = None , key : Union [ str , List [ str ]] = None , value : Union [ str , List [ str ]] = None , type_multi_request : list = None , bbox : QgsRectangle = None , output_dir : str = None , output_format : Format = None , prefix_file : str = None , output_geometry_types : list = None , layer_name : str = 'OsmQuery' , white_list_values : dict = None , config_outputs : dict = None ) -> int # execute a query and send the result file to open_file. process_quick_query ( dialog : QDialog = None , description : str = None , type_multi_request : list = None , query_type : QueryType = None , key : Union [ str , List [ str ]] = None , value : Union [ str , List [ str ]] = None , bbox : QgsRectangle = None , area : str = None , distance : int = None , osm_objects : List [ QuickOSM . definitions . osm . OsmType ] = None , metadata : str = 'body' , timeout : int = 25 , output_directory : str = None , output_format : Format = None , prefix_file : str = None , layer_name : str = None , white_list_values : dict = None , output_geometry_types : list = None , config_outputs : dict = None ) -> int # Generate a query and send it to process_query. reload_query ( query : str , layer_name : str = 'Reloaded_query' , dialog : QDialog = None , new_file : bool = True ) # Reload a query with only the query query_factory # Query factory, for building queries. QueryFactory # Build a XML or OQL query. area : list property readonly # Return the area defined for the query. Either None if no area or a list of areas. __init__ ( self , type_multi_request : list = None , query_type : QueryType = None , key : str = None , value : str = None , area : str = None , around_distance : int = None , osm_objects : List [ QuickOSM . definitions . osm . OsmType ] = None , output : str = 'xml' , timeout : int = 25 , print_mode : str = 'body' ) special # Query Factory constructor according to Overpass API. Parameters: Name Type Description Default type_multi_request list The type of query to build. None query_type QueryType The type of query to build. None key str OSM key or None. None value str OSM value or None. None area str A place name if needed or None. None around_distance int Distance to use if it's an around query or None None osm_objects List[QuickOSM.definitions.osm.OsmType] List of osm objects to query on (node/way/relation) None output str output of overpass : XML or JSON 'xml' timeout int Timeout of the query 25 print_mode str Print type of the overpass query (read overpass doc) 'body' _check_parameters ( self ) -> bool private # Internal function to check that the query can be built. Returns: Type Description bool True if everything went fine. Exceptions: Type Description QueryFactoryException _make_for_test ( self , output : QueryLanguage ) -> str private # Helper for tests only! Without indentation and lines. friendly_message ( self ) -> str # Create a friendly/human message about what the query will do. return: The message rtype: str generate_oql ( self ) -> str # Generate the OQL. The query will not be valid because of Overpass templates ! generate_xml ( self ) -> str # Generate the XML. The query will not be valid because of Overpass templates ! get_pretty_xml ( query ) staticmethod # Helper to get a good indentation of the query. make ( self , output : QueryLanguage = < QueryLanguage . OQL : 'oql' > ) -> str # Make the query. Returns: Type Description str query replace_template ( query ) staticmethod # Add some templates tags to the query {{ }}. This is a hack to get pretty XML working, because templates are not a valid XML ! query_preparation # Query preparation step. QueryPreparation # Prepare the query before sending it to Overpass. final_query : str property readonly # The generated query or None if it's not yet generated. Returns: Type Description str The final query. query : str property readonly # The original query. Returns: Type Description str The original query. __init__ ( self , query : str , extent : QgsRectangle = None , area : Union [ str , List [ str ]] = None , overpass : str = None , output_format : str = 'xml' ) special # Constructor. Parameters: Name Type Description Default query str The query to prepare. required extent QgsRectangle The extent to use in 4326, if needed. It can be None. None area Union[str, List[str]] A name or a list of place names. None _replace_center ( self ) private # Replace {{center}} by the centroid of the extent if needed. The temporary query will be updated. _replace_geocode_area ( self ) private # Replace {{geocodeCoords}} by the centroid of the extent. The temporary query will be updated. _replace_geocode_coords ( self ) private # Replace {{geocodeCoords}} by the centroid of the extent. The temporary query will be updated. clean_query ( self ) # Remove extra characters that might be present in the query. The temporary query will be updated. is_compatible ( self ) -> ( < class ' bool '>, <class ' str '>) # The plugin doesn't support all special tags like Overpass Turbo. Returns: Type Description (<class 'bool'>, <class 'str'>) A tuple (bool, reason). is_oql_query ( self ) -> bool # Return if the query is written in OQL or not. Returns: Type Description bool If the it's OQL query. prepare_query ( self ) # Prepare the query before sending it to Overpass. The temporary query will be updated. Returns: Type Description basestring The final query. prepare_url ( self , output : QueryLanguage = None ) -> str # Prepare a query to be as an URL. if the query is not ready to be URL prepared, a None is returned. Returns: Type Description str The URL encoded with the query. replace_bbox ( self ) # Replace {{bbox}} by the extent BBOX if needed. The temporary query will be updated. utilities special # completer_free # Set up a completer that ignore diacritics and accents DiacriticFreeCompleter # Set up a custom completer that ignore diacritic pathFromIndex ( self , index ) # Return the path at the given index splitPath ( self , path : str ) -> list # Manage diacritic elements DiactricFreeStringListModel # Set up a custom model for the custom completer __init__ ( self , * args , ** kwargs ) special # Constructor data ( self , index , role : int ) -> str # Handle the diacritic elements diactricFreeRole ( self ) -> int # Get the diacritic free role setDiactricFreeRole ( self , role : int ) # Set the diacritic free role strip_accents ( s : str ) -> str # Decode diacritic text extent_tool # A tool that enable to select or show an extent in the canvas. ShowExtent # Show an extent in the canvas __init__ ( self , canvas ) special # Constructor canvasPressEvent ( self , event ) # Change the outcome of the click event to end the ongoing process. show_extent ( self , extent : QgsRectangle ) # Display the extent on the canvas transform_coordinates ( self ) # Transform the coordinates in 4326. json_encoder # Modify an json encoder/decoder to accept enum. EnumEncoder # Override the json encoder to serialize enum. default ( self , obj ) # Function of serialization. as_enum ( d ) # Retrieval of enum from deserialization of a json file. query_saved # Manage the saved query in history or preset. QueryManagement # Manage the saved query in history or preset. __init__ ( self , query : Union [ str , List [ str ]] = '' , name : str = '' , description : Union [ str , List [ str ]] = '' , advanced : bool = False , type_multi_request : list = None , keys : Union [ str , List [ str ]] = None , values : Union [ str , List [ str ]] = None , area : Union [ str , List [ str ]] = None , bbox : Union [ qgis . _core . QgsRectangle , List [ qgis . _core . QgsRectangle ]] = None , output_geometry_types : list = None , white_list_column : dict = None , output_directory : str = None , output_format : Format = None ) special # Constructor add_empty_query_in_preset ( data : dict ) -> dict staticmethod # Add an empty query in a preset file add_preset ( self , name_preset : str ) # Add a new query in the preset folder add_query_in_preset ( self , existing_preset : str ) # Add a query in a preset file remove_preset ( name : str ) staticmethod # Remove a preset. remove_query_in_preset ( data : dict , num_query : int ) -> dict staticmethod # Remove a query in a preset file. rename_preset ( self , former_name : str , new_name : str , data : dict ) # Rename a preset query update_preset ( data : dict ) staticmethod # Rename a preset query write_json ( self , file : str ) # Write the saved file in json write_query_historic ( self ) # Write new query in the history folder tools # Tools for QuickOSM. custom_config_file () -> str # Get the custom config file or None. get_default_encoding () -> str # Get the default encoding. get_setting ( key : str , default : str = None ) -> str # Get a value in the QgsSettings. Parameters: Name Type Description Default key str The key to fetch in the QgsSettings required default str The default value if the key is not found. None Returns: Type Description str The value or the default value. nominatim_file () -> str # Get the nominatim history file. query_historic () -> str # Get the query history folder query_preset () -> str # Get the query preset folder quickosm_user_folder () -> str # Get the QuickOSM user folder. If the folder does not exist, it will create it. On Linux: .local/share/QGIS/QGIS3/profiles/default/QuickOSM Returns: Type Description str path set_setting ( key : str , value : str ) -> bool # Set a value in the QgsSettings Parameters: Name Type Description Default key str key required value str value required Returns: Type Description bool result utilities_qgis # Utilities when using QGIS. open_doc_overpass () # Open Overpass's documentation. open_log_panel () # Open the log panel for bug reporting. open_overpass_turbo () # Open Overpass Turbo. open_plugin_documentation () # Open the map features webpage. open_webpage ( url ) # Open a specific webpage.","title":"Core files"},{"location":"code-documentation/core/#files-documentation","text":"","title":"Files documentation"},{"location":"code-documentation/core/#core-files-documentation","text":"","title":"Core files documentation"},{"location":"code-documentation/core/#QuickOSM.core","text":"","title":"core"},{"location":"code-documentation/core/#QuickOSM.core.actions","text":"Actions definitions.","title":"actions"},{"location":"code-documentation/core/#QuickOSM.core.actions.Actions","text":"Manage actions available on layers","title":"Actions"},{"location":"code-documentation/core/#QuickOSM.core.actions.Actions.pre_run_reload","text":"Prepare the reload","title":"pre_run_reload()"},{"location":"code-documentation/core/#QuickOSM.core.actions.Actions.run","text":"Run an action with only one value as parameter Parameters: Name Type Description Default field str Type of the action required value str Value of the field for one entity required","title":"run()"},{"location":"code-documentation/core/#QuickOSM.core.actions.Actions.run_reload","text":"Reload the query","title":"run_reload()"},{"location":"code-documentation/core/#QuickOSM.core.actions.Actions.run_sketch_line","text":"Run an action with two values for sketchline Parameters: Name Type Description Default network str network of the bus required ref str ref of the bus required","title":"run_sketch_line()"},{"location":"code-documentation/core/#QuickOSM.core.actions.add_actions","text":"Add actions on layer. Parameters: Name Type Description Default layer QgsVectorLayer The layer. required keys list The list of keys in the layer. required","title":"add_actions()"},{"location":"code-documentation/core/#QuickOSM.core.actions.add_relaunch_action","text":"Add the relaunch action","title":"add_relaunch_action()"},{"location":"code-documentation/core/#QuickOSM.core.api","text":"","title":"api"},{"location":"code-documentation/core/#QuickOSM.core.api.connexion_oapi","text":"Manage Overpass API connexion.","title":"connexion_oapi"},{"location":"code-documentation/core/#QuickOSM.core.api.connexion_oapi.ConnexionOAPI","text":"Manage connexion to the overpass API.","title":"ConnexionOAPI"},{"location":"code-documentation/core/#QuickOSM.core.api.connexion_oapi.ConnexionOAPI.__init__","text":"Constructor of query. Parameters: Name Type Description Default url str Full URL of OverPass Query with the query encoded in it. required","title":"__init__()"},{"location":"code-documentation/core/#QuickOSM.core.api.connexion_oapi.ConnexionOAPI.check_file","text":"Verify the file provided by the Overpass API","title":"check_file()"},{"location":"code-documentation/core/#QuickOSM.core.api.connexion_oapi.ConnexionOAPI.is_bad_request","text":"Check the bad request exception","title":"is_bad_request()"},{"location":"code-documentation/core/#QuickOSM.core.api.connexion_oapi.ConnexionOAPI.is_query_timed_out","text":"Check the time out exception","title":"is_query_timed_out()"},{"location":"code-documentation/core/#QuickOSM.core.api.connexion_oapi.ConnexionOAPI.run","text":"Run the query. Returns: Type Description str The result of the query. Exceptions: Type Description OverpassBadRequestException NetWorkErrorException OverpassTimeoutException","title":"run()"},{"location":"code-documentation/core/#QuickOSM.core.api.connexion_oapi.ConnexionOAPI.run_convert","text":"Run the query converter Returns: Type Description str The converted query","title":"run_convert()"},{"location":"code-documentation/core/#QuickOSM.core.api.connexion_oapi.ConnexionOAPI.too_many_request","text":"Check the too many request exception","title":"too_many_request()"},{"location":"code-documentation/core/#QuickOSM.core.api.downloader","text":"Manage downloader.","title":"downloader"},{"location":"code-documentation/core/#QuickOSM.core.api.downloader.Downloader","text":"Manage downloader.","title":"Downloader"},{"location":"code-documentation/core/#QuickOSM.core.api.downloader.Downloader.__init__","text":"Constructor.","title":"__init__()"},{"location":"code-documentation/core/#QuickOSM.core.api.downloader.Downloader.canceled","text":"Display the status in logger","title":"canceled()"},{"location":"code-documentation/core/#QuickOSM.core.api.downloader.Downloader.completed","text":"Display the status in logger","title":"completed()"},{"location":"code-documentation/core/#QuickOSM.core.api.downloader.Downloader.download","text":"Download the data","title":"download()"},{"location":"code-documentation/core/#QuickOSM.core.api.downloader.Downloader.error","text":"Store the messages error","title":"error()"},{"location":"code-documentation/core/#QuickOSM.core.api.nominatim","text":"Manage nominatim connexion.","title":"nominatim"},{"location":"code-documentation/core/#QuickOSM.core.api.nominatim.Nominatim","text":"Manage connexion to Nominatim.","title":"Nominatim"},{"location":"code-documentation/core/#QuickOSM.core.api.nominatim.Nominatim.__init__","text":"Constructor. Parameters: Name Type Description Default url str URL of Nominatim server. None","title":"__init__()"},{"location":"code-documentation/core/#QuickOSM.core.api.nominatim.Nominatim.error","text":"Display the status in logger","title":"error()"},{"location":"code-documentation/core/#QuickOSM.core.api.nominatim.Nominatim.get_first_point_from_query","text":"Get first longitude, latitude of a Nominatim point. Parameters: Name Type Description Default query str Query to execute. required hack_test bool set up test without internet False Returns: Type Description (<class 'str'>, <class 'str'>) First node with its longitude and latitude. Exceptions: Type Description NominatimAreaException","title":"get_first_point_from_query()"},{"location":"code-documentation/core/#QuickOSM.core.api.nominatim.Nominatim.get_first_polygon_from_query","text":"Get first OSM_ID of a Nominatim area. Parameters: Name Type Description Default query str Query to execute. required hack_test bool set up test without internet False Returns: Type Description str First relation's with an \"osm_id\". Exceptions: Type Description NominatimAreaException","title":"get_first_polygon_from_query()"},{"location":"code-documentation/core/#QuickOSM.core.api.nominatim.Nominatim.query","text":"Perform a nominatim query. Parameters: Name Type Description Default query str Query to execute on the nominatim server. required Returns: Type Description dict The result of the query as a dictionary. Exceptions: Type Description NetWorkErrorException","title":"query()"},{"location":"code-documentation/core/#QuickOSM.core.exceptions","text":"Exceptions definitions.","title":"exceptions"},{"location":"code-documentation/core/#QuickOSM.core.exceptions.DirectoryOutPutException","text":"Directory doesn't exist exception.","title":"DirectoryOutPutException"},{"location":"code-documentation/core/#QuickOSM.core.exceptions.FileDoesntExistException","text":"File doesn't exist exception.","title":"FileDoesntExistException"},{"location":"code-documentation/core/#QuickOSM.core.exceptions.FileOutPutException","text":"File already exist exception.","title":"FileOutPutException"},{"location":"code-documentation/core/#QuickOSM.core.exceptions.MissingLayerUI","text":"No layer exception.","title":"MissingLayerUI"},{"location":"code-documentation/core/#QuickOSM.core.exceptions.MissingParameterException","text":"Missing parameter exception.","title":"MissingParameterException"},{"location":"code-documentation/core/#QuickOSM.core.exceptions.NetWorkErrorException","text":"Network error exception.","title":"NetWorkErrorException"},{"location":"code-documentation/core/#QuickOSM.core.exceptions.NominatimAreaException","text":"Raised when no Nominatim area has been found.","title":"NominatimAreaException"},{"location":"code-documentation/core/#QuickOSM.core.exceptions.NominatimAreaException.__init__","text":"Raised when no Nominatim area has been found. Parameters: Name Type Description Default query str Name of the place. required","title":"__init__()"},{"location":"code-documentation/core/#QuickOSM.core.exceptions.NominatimBadRequest","text":"Raised when no Nominatim data has been downloaded.","title":"NominatimBadRequest"},{"location":"code-documentation/core/#QuickOSM.core.exceptions.NominatimBadRequest.__init__","text":"Raised when no Nominatim area has been found. Parameters: Name Type Description Default query str Name of the place. required","title":"__init__()"},{"location":"code-documentation/core/#QuickOSM.core.exceptions.NoSelectedFeatures","text":"No selected features exception.","title":"NoSelectedFeatures"},{"location":"code-documentation/core/#QuickOSM.core.exceptions.NoSelectedPreset","text":"No selected preset exception.","title":"NoSelectedPreset"},{"location":"code-documentation/core/#QuickOSM.core.exceptions.OsmObjectsException","text":"No OSM objects selected exception.","title":"OsmObjectsException"},{"location":"code-documentation/core/#QuickOSM.core.exceptions.OutPutGeomTypesException","text":"No outputs geometries selected exception.","title":"OutPutGeomTypesException"},{"location":"code-documentation/core/#QuickOSM.core.exceptions.OverpassBadRequestException","text":"Bad request exception.","title":"OverpassBadRequestException"},{"location":"code-documentation/core/#QuickOSM.core.exceptions.OverpassManyRequestException","text":"Too many request exception.","title":"OverpassManyRequestException"},{"location":"code-documentation/core/#QuickOSM.core.exceptions.OverpassMemoryException","text":"Out of memory exception.","title":"OverpassMemoryException"},{"location":"code-documentation/core/#QuickOSM.core.exceptions.OverpassRuntimeError","text":"Runtime exceeded exception.","title":"OverpassRuntimeError"},{"location":"code-documentation/core/#QuickOSM.core.exceptions.OverpassTimeoutException","text":"Time out exception","title":"OverpassTimeoutException"},{"location":"code-documentation/core/#QuickOSM.core.exceptions.QueryFactoryException","text":"Query can't be build exception.","title":"QueryFactoryException"},{"location":"code-documentation/core/#QuickOSM.core.exceptions.QueryNotSupported","text":"Query not supported exception.","title":"QueryNotSupported"},{"location":"code-documentation/core/#QuickOSM.core.exceptions.QuickOsmException","text":"These exceptions are created by QuickOSM during a process.","title":"QuickOsmException"},{"location":"code-documentation/core/#QuickOSM.core.exceptions.QuickOsmException.__init__","text":"Constructor. Parameters: Name Type Description Default message str The base message to display in the message bar. None more_details str More information to be displayed in the \"More info\" button. None","title":"__init__()"},{"location":"code-documentation/core/#QuickOSM.core.parser","text":"","title":"parser"},{"location":"code-documentation/core/#QuickOSM.core.parser.osm_parser","text":"OSM Parser file.","title":"osm_parser"},{"location":"code-documentation/core/#QuickOSM.core.parser.osm_parser.OsmParser","text":"Parse an OSM file with OGR.","title":"OsmParser"},{"location":"code-documentation/core/#QuickOSM.core.parser.osm_parser.OsmParser.processing_parse","text":"Start parsing the osm file with processing.","title":"processing_parse()"},{"location":"code-documentation/core/#QuickOSM.core.parser.preset_parser","text":"Parser of the presets file.","title":"preset_parser"},{"location":"code-documentation/core/#QuickOSM.core.parser.preset_parser.PresetsParser","text":"Management of the presets file.","title":"PresetsParser"},{"location":"code-documentation/core/#QuickOSM.core.parser.preset_parser.PresetsParser.node_filter","text":"Test if the node has the tag we search","title":"node_filter()"},{"location":"code-documentation/core/#QuickOSM.core.parser.preset_parser.PresetsParser.osm_keys_values","text":"Retrieval of key/value couple","title":"osm_keys_values()"},{"location":"code-documentation/core/#QuickOSM.core.parser.preset_parser.PresetsParser.parser","text":"Parse the presets file Returns: Type Description <function namedtuple at 0x7f6c21216f70> a dictionary of two dictionaries. Elements contains the data needed for the completer Items contains the data needed for the preset Items_combo contains couples key/value needed to specify more the query","title":"parser()"},{"location":"code-documentation/core/#QuickOSM.core.parser.preset_parser.PresetsParser.preset_translate","text":"Translate the preset in the language define in QGIS","title":"preset_translate()"},{"location":"code-documentation/core/#QuickOSM.core.process","text":"The full process of opening a query, an OSM file.","title":"process"},{"location":"code-documentation/core/#QuickOSM.core.process.open_file","text":"Open an osm file. Memory layer if no output directory is set, or Geojson in the output directory. Parameters: Name Type Description Default final_query str The query where the file comes from. Might be empty if it's a local OSM file. None","title":"open_file()"},{"location":"code-documentation/core/#QuickOSM.core.process.process_query","text":"execute a query and send the result file to open_file.","title":"process_query()"},{"location":"code-documentation/core/#QuickOSM.core.process.process_quick_query","text":"Generate a query and send it to process_query.","title":"process_quick_query()"},{"location":"code-documentation/core/#QuickOSM.core.process.reload_query","text":"Reload a query with only the query","title":"reload_query()"},{"location":"code-documentation/core/#QuickOSM.core.query_factory","text":"Query factory, for building queries.","title":"query_factory"},{"location":"code-documentation/core/#QuickOSM.core.query_factory.QueryFactory","text":"Build a XML or OQL query.","title":"QueryFactory"},{"location":"code-documentation/core/#QuickOSM.core.query_factory.QueryFactory.area","text":"Return the area defined for the query. Either None if no area or a list of areas.","title":"area"},{"location":"code-documentation/core/#QuickOSM.core.query_factory.QueryFactory.__init__","text":"Query Factory constructor according to Overpass API. Parameters: Name Type Description Default type_multi_request list The type of query to build. None query_type QueryType The type of query to build. None key str OSM key or None. None value str OSM value or None. None area str A place name if needed or None. None around_distance int Distance to use if it's an around query or None None osm_objects List[QuickOSM.definitions.osm.OsmType] List of osm objects to query on (node/way/relation) None output str output of overpass : XML or JSON 'xml' timeout int Timeout of the query 25 print_mode str Print type of the overpass query (read overpass doc) 'body'","title":"__init__()"},{"location":"code-documentation/core/#QuickOSM.core.query_factory.QueryFactory._check_parameters","text":"Internal function to check that the query can be built. Returns: Type Description bool True if everything went fine. Exceptions: Type Description QueryFactoryException","title":"_check_parameters()"},{"location":"code-documentation/core/#QuickOSM.core.query_factory.QueryFactory._make_for_test","text":"Helper for tests only! Without indentation and lines.","title":"_make_for_test()"},{"location":"code-documentation/core/#QuickOSM.core.query_factory.QueryFactory.friendly_message","text":"Create a friendly/human message about what the query will do. return: The message rtype: str","title":"friendly_message()"},{"location":"code-documentation/core/#QuickOSM.core.query_factory.QueryFactory.generate_oql","text":"Generate the OQL. The query will not be valid because of Overpass templates !","title":"generate_oql()"},{"location":"code-documentation/core/#QuickOSM.core.query_factory.QueryFactory.generate_xml","text":"Generate the XML. The query will not be valid because of Overpass templates !","title":"generate_xml()"},{"location":"code-documentation/core/#QuickOSM.core.query_factory.QueryFactory.get_pretty_xml","text":"Helper to get a good indentation of the query.","title":"get_pretty_xml()"},{"location":"code-documentation/core/#QuickOSM.core.query_factory.QueryFactory.make","text":"Make the query. Returns: Type Description str query","title":"make()"},{"location":"code-documentation/core/#QuickOSM.core.query_factory.QueryFactory.replace_template","text":"Add some templates tags to the query {{ }}. This is a hack to get pretty XML working, because templates are not a valid XML !","title":"replace_template()"},{"location":"code-documentation/core/#QuickOSM.core.query_preparation","text":"Query preparation step.","title":"query_preparation"},{"location":"code-documentation/core/#QuickOSM.core.query_preparation.QueryPreparation","text":"Prepare the query before sending it to Overpass.","title":"QueryPreparation"},{"location":"code-documentation/core/#QuickOSM.core.query_preparation.QueryPreparation.final_query","text":"The generated query or None if it's not yet generated. Returns: Type Description str The final query.","title":"final_query"},{"location":"code-documentation/core/#QuickOSM.core.query_preparation.QueryPreparation.query","text":"The original query. Returns: Type Description str The original query.","title":"query"},{"location":"code-documentation/core/#QuickOSM.core.query_preparation.QueryPreparation.__init__","text":"Constructor. Parameters: Name Type Description Default query str The query to prepare. required extent QgsRectangle The extent to use in 4326, if needed. It can be None. None area Union[str, List[str]] A name or a list of place names. None","title":"__init__()"},{"location":"code-documentation/core/#QuickOSM.core.query_preparation.QueryPreparation._replace_center","text":"Replace {{center}} by the centroid of the extent if needed. The temporary query will be updated.","title":"_replace_center()"},{"location":"code-documentation/core/#QuickOSM.core.query_preparation.QueryPreparation._replace_geocode_area","text":"Replace {{geocodeCoords}} by the centroid of the extent. The temporary query will be updated.","title":"_replace_geocode_area()"},{"location":"code-documentation/core/#QuickOSM.core.query_preparation.QueryPreparation._replace_geocode_coords","text":"Replace {{geocodeCoords}} by the centroid of the extent. The temporary query will be updated.","title":"_replace_geocode_coords()"},{"location":"code-documentation/core/#QuickOSM.core.query_preparation.QueryPreparation.clean_query","text":"Remove extra characters that might be present in the query. The temporary query will be updated.","title":"clean_query()"},{"location":"code-documentation/core/#QuickOSM.core.query_preparation.QueryPreparation.is_compatible","text":"The plugin doesn't support all special tags like Overpass Turbo. Returns: Type Description (<class 'bool'>, <class 'str'>) A tuple (bool, reason).","title":"is_compatible()"},{"location":"code-documentation/core/#QuickOSM.core.query_preparation.QueryPreparation.is_oql_query","text":"Return if the query is written in OQL or not. Returns: Type Description bool If the it's OQL query.","title":"is_oql_query()"},{"location":"code-documentation/core/#QuickOSM.core.query_preparation.QueryPreparation.prepare_query","text":"Prepare the query before sending it to Overpass. The temporary query will be updated. Returns: Type Description basestring The final query.","title":"prepare_query()"},{"location":"code-documentation/core/#QuickOSM.core.query_preparation.QueryPreparation.prepare_url","text":"Prepare a query to be as an URL. if the query is not ready to be URL prepared, a None is returned. Returns: Type Description str The URL encoded with the query.","title":"prepare_url()"},{"location":"code-documentation/core/#QuickOSM.core.query_preparation.QueryPreparation.replace_bbox","text":"Replace {{bbox}} by the extent BBOX if needed. The temporary query will be updated.","title":"replace_bbox()"},{"location":"code-documentation/core/#QuickOSM.core.utilities","text":"","title":"utilities"},{"location":"code-documentation/core/#QuickOSM.core.utilities.completer_free","text":"Set up a completer that ignore diacritics and accents","title":"completer_free"},{"location":"code-documentation/core/#QuickOSM.core.utilities.completer_free.DiacriticFreeCompleter","text":"Set up a custom completer that ignore diacritic","title":"DiacriticFreeCompleter"},{"location":"code-documentation/core/#QuickOSM.core.utilities.completer_free.DiacriticFreeCompleter.pathFromIndex","text":"Return the path at the given index","title":"pathFromIndex()"},{"location":"code-documentation/core/#QuickOSM.core.utilities.completer_free.DiacriticFreeCompleter.splitPath","text":"Manage diacritic elements","title":"splitPath()"},{"location":"code-documentation/core/#QuickOSM.core.utilities.completer_free.DiactricFreeStringListModel","text":"Set up a custom model for the custom completer","title":"DiactricFreeStringListModel"},{"location":"code-documentation/core/#QuickOSM.core.utilities.completer_free.DiactricFreeStringListModel.__init__","text":"Constructor","title":"__init__()"},{"location":"code-documentation/core/#QuickOSM.core.utilities.completer_free.DiactricFreeStringListModel.data","text":"Handle the diacritic elements","title":"data()"},{"location":"code-documentation/core/#QuickOSM.core.utilities.completer_free.DiactricFreeStringListModel.diactricFreeRole","text":"Get the diacritic free role","title":"diactricFreeRole()"},{"location":"code-documentation/core/#QuickOSM.core.utilities.completer_free.DiactricFreeStringListModel.setDiactricFreeRole","text":"Set the diacritic free role","title":"setDiactricFreeRole()"},{"location":"code-documentation/core/#QuickOSM.core.utilities.completer_free.strip_accents","text":"Decode diacritic text","title":"strip_accents()"},{"location":"code-documentation/core/#QuickOSM.core.utilities.extent_tool","text":"A tool that enable to select or show an extent in the canvas.","title":"extent_tool"},{"location":"code-documentation/core/#QuickOSM.core.utilities.extent_tool.ShowExtent","text":"Show an extent in the canvas","title":"ShowExtent"},{"location":"code-documentation/core/#QuickOSM.core.utilities.extent_tool.ShowExtent.__init__","text":"Constructor","title":"__init__()"},{"location":"code-documentation/core/#QuickOSM.core.utilities.extent_tool.ShowExtent.canvasPressEvent","text":"Change the outcome of the click event to end the ongoing process.","title":"canvasPressEvent()"},{"location":"code-documentation/core/#QuickOSM.core.utilities.extent_tool.ShowExtent.show_extent","text":"Display the extent on the canvas","title":"show_extent()"},{"location":"code-documentation/core/#QuickOSM.core.utilities.extent_tool.ShowExtent.transform_coordinates","text":"Transform the coordinates in 4326.","title":"transform_coordinates()"},{"location":"code-documentation/core/#QuickOSM.core.utilities.json_encoder","text":"Modify an json encoder/decoder to accept enum.","title":"json_encoder"},{"location":"code-documentation/core/#QuickOSM.core.utilities.json_encoder.EnumEncoder","text":"Override the json encoder to serialize enum.","title":"EnumEncoder"},{"location":"code-documentation/core/#QuickOSM.core.utilities.json_encoder.EnumEncoder.default","text":"Function of serialization.","title":"default()"},{"location":"code-documentation/core/#QuickOSM.core.utilities.json_encoder.as_enum","text":"Retrieval of enum from deserialization of a json file.","title":"as_enum()"},{"location":"code-documentation/core/#QuickOSM.core.utilities.query_saved","text":"Manage the saved query in history or preset.","title":"query_saved"},{"location":"code-documentation/core/#QuickOSM.core.utilities.query_saved.QueryManagement","text":"Manage the saved query in history or preset.","title":"QueryManagement"},{"location":"code-documentation/core/#QuickOSM.core.utilities.query_saved.QueryManagement.__init__","text":"Constructor","title":"__init__()"},{"location":"code-documentation/core/#QuickOSM.core.utilities.query_saved.QueryManagement.add_empty_query_in_preset","text":"Add an empty query in a preset file","title":"add_empty_query_in_preset()"},{"location":"code-documentation/core/#QuickOSM.core.utilities.query_saved.QueryManagement.add_preset","text":"Add a new query in the preset folder","title":"add_preset()"},{"location":"code-documentation/core/#QuickOSM.core.utilities.query_saved.QueryManagement.add_query_in_preset","text":"Add a query in a preset file","title":"add_query_in_preset()"},{"location":"code-documentation/core/#QuickOSM.core.utilities.query_saved.QueryManagement.remove_preset","text":"Remove a preset.","title":"remove_preset()"},{"location":"code-documentation/core/#QuickOSM.core.utilities.query_saved.QueryManagement.remove_query_in_preset","text":"Remove a query in a preset file.","title":"remove_query_in_preset()"},{"location":"code-documentation/core/#QuickOSM.core.utilities.query_saved.QueryManagement.rename_preset","text":"Rename a preset query","title":"rename_preset()"},{"location":"code-documentation/core/#QuickOSM.core.utilities.query_saved.QueryManagement.update_preset","text":"Rename a preset query","title":"update_preset()"},{"location":"code-documentation/core/#QuickOSM.core.utilities.query_saved.QueryManagement.write_json","text":"Write the saved file in json","title":"write_json()"},{"location":"code-documentation/core/#QuickOSM.core.utilities.query_saved.QueryManagement.write_query_historic","text":"Write new query in the history folder","title":"write_query_historic()"},{"location":"code-documentation/core/#QuickOSM.core.utilities.tools","text":"Tools for QuickOSM.","title":"tools"},{"location":"code-documentation/core/#QuickOSM.core.utilities.tools.custom_config_file","text":"Get the custom config file or None.","title":"custom_config_file()"},{"location":"code-documentation/core/#QuickOSM.core.utilities.tools.get_default_encoding","text":"Get the default encoding.","title":"get_default_encoding()"},{"location":"code-documentation/core/#QuickOSM.core.utilities.tools.get_setting","text":"Get a value in the QgsSettings. Parameters: Name Type Description Default key str The key to fetch in the QgsSettings required default str The default value if the key is not found. None Returns: Type Description str The value or the default value.","title":"get_setting()"},{"location":"code-documentation/core/#QuickOSM.core.utilities.tools.nominatim_file","text":"Get the nominatim history file.","title":"nominatim_file()"},{"location":"code-documentation/core/#QuickOSM.core.utilities.tools.query_historic","text":"Get the query history folder","title":"query_historic()"},{"location":"code-documentation/core/#QuickOSM.core.utilities.tools.query_preset","text":"Get the query preset folder","title":"query_preset()"},{"location":"code-documentation/core/#QuickOSM.core.utilities.tools.quickosm_user_folder","text":"Get the QuickOSM user folder. If the folder does not exist, it will create it. On Linux: .local/share/QGIS/QGIS3/profiles/default/QuickOSM Returns: Type Description str path","title":"quickosm_user_folder()"},{"location":"code-documentation/core/#QuickOSM.core.utilities.tools.set_setting","text":"Set a value in the QgsSettings Parameters: Name Type Description Default key str key required value str value required Returns: Type Description bool result","title":"set_setting()"},{"location":"code-documentation/core/#QuickOSM.core.utilities.utilities_qgis","text":"Utilities when using QGIS.","title":"utilities_qgis"},{"location":"code-documentation/core/#QuickOSM.core.utilities.utilities_qgis.open_doc_overpass","text":"Open Overpass's documentation.","title":"open_doc_overpass()"},{"location":"code-documentation/core/#QuickOSM.core.utilities.utilities_qgis.open_log_panel","text":"Open the log panel for bug reporting.","title":"open_log_panel()"},{"location":"code-documentation/core/#QuickOSM.core.utilities.utilities_qgis.open_overpass_turbo","text":"Open Overpass Turbo.","title":"open_overpass_turbo()"},{"location":"code-documentation/core/#QuickOSM.core.utilities.utilities_qgis.open_plugin_documentation","text":"Open the map features webpage.","title":"open_plugin_documentation()"},{"location":"code-documentation/core/#QuickOSM.core.utilities.utilities_qgis.open_webpage","text":"Open a specific webpage.","title":"open_webpage()"},{"location":"code-documentation/definitions/","text":"Files documentation # Definitions files documentation # QuickOSM.definitions special # action # Definitions for action visibilities. SaveType # Type of save for saving a query. Visibility # Visibility of actions. format # Definitions for output formats. Format # Name of output formats. format_output # format(label, driver_name, extension) __getnewargs__ ( self ) special # Return self as a plain tuple. Used by copy and pickle. __new__ ( _cls , label , driver_name , extension ) special staticmethod # Create new instance of format(label, driver_name, extension) __repr__ ( self ) special # Return a nicely formatted representation string _asdict ( self ) private # Return a new dict which maps field names to their values. _make ( iterable ) classmethod private # Make a new format object from a sequence or iterable _replace ( / , self , ** kwds ) private # Return a new format object replacing specified fields with new values gui # Definitions for GUI concepts. Panels # Name of panels in the GUI. nominatim # List of Nominatim servers. This file mustn't be modified by users. This file is updated with the plugin. If you want to add some customs servers, add a file called 'custom_config.json' in your profile_name/QuickOSM folder and add this template in it: { \"nominatim_servers\": [ \" http://your_custom_url.com/search ?\" ] } QuickOSM will add your custom list to the list below. A pull request is more than welcome if you want to add your server in QuickOSM core by updating this list below. osm # Definitions for OSM concepts. LayerType # Layers that ogr2ogr can generate from an OSM file which are readable. MultiType # Type of combination of two queries OsmType # OSM objects. QueryLanguage # Language of query that QuickOSM can generate. QueryType # Type of query that QuickOSM can generate. overpass # List of Overpass servers. This file mustn't be modified by users. This file is updated with the plugin. If you want to add some customs servers, add a file called 'custom_config.json' in your profile_name/QuickOSM folder and add this template in it: { \"overpass_servers\": [ \" http://your_custom_url.com/api/ \" ] } QuickOSM will add your custom list to the list below. A pull request is more than welcome if you want to add your server in QuickOSM core by updating this list below. urls # Definitions for urls.","title":"Definition files"},{"location":"code-documentation/definitions/#files-documentation","text":"","title":"Files documentation"},{"location":"code-documentation/definitions/#definitions-files-documentation","text":"","title":"Definitions files documentation"},{"location":"code-documentation/definitions/#QuickOSM.definitions","text":"","title":"definitions"},{"location":"code-documentation/definitions/#QuickOSM.definitions.action","text":"Definitions for action visibilities.","title":"action"},{"location":"code-documentation/definitions/#QuickOSM.definitions.action.SaveType","text":"Type of save for saving a query.","title":"SaveType"},{"location":"code-documentation/definitions/#QuickOSM.definitions.action.Visibility","text":"Visibility of actions.","title":"Visibility"},{"location":"code-documentation/definitions/#QuickOSM.definitions.format","text":"Definitions for output formats.","title":"format"},{"location":"code-documentation/definitions/#QuickOSM.definitions.format.Format","text":"Name of output formats.","title":"Format"},{"location":"code-documentation/definitions/#QuickOSM.definitions.format.format_output","text":"format(label, driver_name, extension)","title":"format_output"},{"location":"code-documentation/definitions/#QuickOSM.definitions.format.format_output.__getnewargs__","text":"Return self as a plain tuple. Used by copy and pickle.","title":"__getnewargs__()"},{"location":"code-documentation/definitions/#QuickOSM.definitions.format.format_output.__new__","text":"Create new instance of format(label, driver_name, extension)","title":"__new__()"},{"location":"code-documentation/definitions/#QuickOSM.definitions.format.format_output.__repr__","text":"Return a nicely formatted representation string","title":"__repr__()"},{"location":"code-documentation/definitions/#QuickOSM.definitions.format.format_output._asdict","text":"Return a new dict which maps field names to their values.","title":"_asdict()"},{"location":"code-documentation/definitions/#QuickOSM.definitions.format.format_output._make","text":"Make a new format object from a sequence or iterable","title":"_make()"},{"location":"code-documentation/definitions/#QuickOSM.definitions.format.format_output._replace","text":"Return a new format object replacing specified fields with new values","title":"_replace()"},{"location":"code-documentation/definitions/#QuickOSM.definitions.gui","text":"Definitions for GUI concepts.","title":"gui"},{"location":"code-documentation/definitions/#QuickOSM.definitions.gui.Panels","text":"Name of panels in the GUI.","title":"Panels"},{"location":"code-documentation/definitions/#QuickOSM.definitions.nominatim","text":"List of Nominatim servers. This file mustn't be modified by users. This file is updated with the plugin. If you want to add some customs servers, add a file called 'custom_config.json' in your profile_name/QuickOSM folder and add this template in it: { \"nominatim_servers\": [ \" http://your_custom_url.com/search ?\" ] } QuickOSM will add your custom list to the list below. A pull request is more than welcome if you want to add your server in QuickOSM core by updating this list below.","title":"nominatim"},{"location":"code-documentation/definitions/#QuickOSM.definitions.osm","text":"Definitions for OSM concepts.","title":"osm"},{"location":"code-documentation/definitions/#QuickOSM.definitions.osm.LayerType","text":"Layers that ogr2ogr can generate from an OSM file which are readable.","title":"LayerType"},{"location":"code-documentation/definitions/#QuickOSM.definitions.osm.MultiType","text":"Type of combination of two queries","title":"MultiType"},{"location":"code-documentation/definitions/#QuickOSM.definitions.osm.OsmType","text":"OSM objects.","title":"OsmType"},{"location":"code-documentation/definitions/#QuickOSM.definitions.osm.QueryLanguage","text":"Language of query that QuickOSM can generate.","title":"QueryLanguage"},{"location":"code-documentation/definitions/#QuickOSM.definitions.osm.QueryType","text":"Type of query that QuickOSM can generate.","title":"QueryType"},{"location":"code-documentation/definitions/#QuickOSM.definitions.overpass","text":"List of Overpass servers. This file mustn't be modified by users. This file is updated with the plugin. If you want to add some customs servers, add a file called 'custom_config.json' in your profile_name/QuickOSM folder and add this template in it: { \"overpass_servers\": [ \" http://your_custom_url.com/api/ \" ] } QuickOSM will add your custom list to the list below. A pull request is more than welcome if you want to add your server in QuickOSM core by updating this list below.","title":"overpass"},{"location":"code-documentation/definitions/#QuickOSM.definitions.urls","text":"Definitions for urls.","title":"urls"},{"location":"code-documentation/developer/","text":"Files documentation # This section displays the developer documentation of the code.","title":"Developer documentation"},{"location":"code-documentation/developer/#files-documentation","text":"This section displays the developer documentation of the code.","title":"Files documentation"},{"location":"code-documentation/processing/","text":"Files documentation # Quick_osm_processing files documentation # QuickOSM.quick_osm_processing special # advanced special # build_query # Processing algorithm for building a query. BuildQueryAroundAreaAlgorithm # Processing algorithm for building a 'around' query. displayName () -> str staticmethod # Return the display name of the algorithm. name () -> str staticmethod # Return the name of the algorithm. processAlgorithm ( self , parameters , context , feedback ) -> Dict [ str , str ] # Run the algorithm. BuildQueryBasedAlgorithm # Processing algorithm for building a query. add_outputs ( self ) # Set up the advanced parameters. build_query ( self ) -> Dict [ str , str ] # Build the query requested. flags ( self ) # Return the flags. group () -> str staticmethod # Return the group of the algorithm. groupId () -> str staticmethod # Return the id of the group. initAlgorithm ( self , config = None ) # Set up of the algorithm. shortHelpString ( self ) -> str # Return an helper for the algorithm. BuildQueryExtentAlgorithm # Processing algorithm for building a 'extent' query. displayName () -> str staticmethod # Return the display name of the algorithm. name () -> str staticmethod # Return the name of the algorithm. processAlgorithm ( self , parameters , context , feedback ) -> Dict [ str , str ] # Run the algorithm. BuildQueryInAreaAlgorithm # Processing algorithm for building a 'in area' query. displayName () -> str staticmethod # Return the display name of the algorithm. name () -> str staticmethod # Return the name of the algorithm. processAlgorithm ( self , parameters , context , feedback ) -> Dict [ str , str ] # Run the algorithm. BuildQueryNotSpatialAlgorithm # Processing algorithm for building a 'not spatial' query. displayName () -> str staticmethod # Return the display name of the algorithm. name () -> str staticmethod # Return the name of the algorithm. processAlgorithm ( self , parameters , context , feedback ) -> Dict [ str , str ] # Run the algorithm. decorate_output # Decorate the layer as a QuickOSM output. DecorateLayerAlgorithm # Decorate the layer as a QuickOSM output. __init__ ( self ) special # Constructor add_outputs ( self ) # Set up the outputs of the algorithm. add_parameters ( self ) # Set up the parameters. displayName () -> str staticmethod # Return the display name of the algorithm. fetch_based_parameters ( self , parameters , context ) # Get the parameters. flags ( self ) # Return the flags. group () -> str staticmethod # Return the group of the algorithm. groupId () -> str staticmethod # Return the id of the group. initAlgorithm ( self , config = None ) # Set up of the algorithm. name () -> str staticmethod # Return the name of the algorithm. processAlgorithm ( self , parameters , context , feedback ) # Run the algorithm. shortHelpString ( self ) -> str # Return an helper for the algorithm. SetColoringPostProcessor # Color the layer with the value of the 'colour' field. create ( fields ) -> SetColoringPostProcessor staticmethod # Launch the algorithm postProcessLayer ( self , layer , context , feedback ) # Run the coloring process download_overpass # Processing algorithm to download a Overpass query. DownloadOverpassUrl # Processing algorithm to download a Overpass query. displayName ( self ) -> str # Return the display name of the algorithm. flags ( self ) # Return the flags. group ( self ) -> str # Return the group of the algorithm. groupId () -> str staticmethod # Return the id of the group. initAlgorithm ( self , config = None ) # Set up of the algorithm. name () -> str staticmethod # Return the name of the algorithm. processAlgorithm ( self , parameters , context , feedback ) -> dict # Run the algorithm. shortHelpString ( self ) -> str # Return an helper for the algorithm. open_osm_file # Simple Processing algorithm to open a OSM file with sub layers. OpenOsmFile # Simple Processing algorithm to open a OSM file with sub layers. displayName ( self ) -> str # Return the display name of the algorithm. flags ( self ) # Return the flags. group () -> str staticmethod # Return the group of the algorithm. groupId () -> str staticmethod # Return the id of the group. initAlgorithm ( self , config = None ) # Set up of the algorithm. name () -> str staticmethod # Return the name of the algorithm. processAlgorithm ( self , parameters , context , feedback ) -> Dict [ str , < built - in function any > ] # Run the algorithm. shortHelpString ( self ) -> str # Return an helper for the algorithm. raw_query # Generate a raw query. RawQueryAlgorithm # Processing algorithm to generate a raw query. displayName () -> str staticmethod # Return the display name of the algorithm. flags ( self ) # Return the flags. group () -> str staticmethod # Return the group of the algorithm. groupId () -> str staticmethod # Return the id of the group. initAlgorithm ( self , config = None ) # Set up of the algorithm. name () -> str staticmethod # Return the name of the algorithm. processAlgorithm ( self , parameters , context , feedback ) -> Dict [ str , str ] # Run the algorithm. shortHelpString ( self ) -> str # Return an helper for the algorithm. build_input # Set up the parameters for the processing algorithms. BuildBased # Set up the parameters. __init__ ( self ) special # Constructor add_bottom_parameters ( self ) # Set up the advanced parameters. add_top_parameters ( self ) # Set up the parameters. fetch_based_parameters ( self , parameters , context ) # Get the parameters. BuildBasedAroundAreaQuery # Set up the parameters for an 'around area' query. add_top_parameters ( self ) # Set up the parameter. fetch_based_parameters ( self , parameters , context ) # Get the parameters. BuildBasedExtentQuery # Set up the parameters for an 'around area' query. add_top_parameters ( self ) # Set up the parameter. fetch_based_parameters ( self , parameters , context ) # Get the parameters. BuildBasedInAreaQuery # Set up the parameters for a 'in area' query. add_top_parameters ( self ) # Set up the parameter. fetch_based_parameters ( self , parameters , context ) # Get the parameters. BuildBasedNotSpatialQuery # Set up the parameters for a not spatial query. BuildBasedQuery # Set up the parameters for a query input. add_top_parameters ( self ) # Set up the parameters. fetch_based_parameters ( self , parameters , context ) # Get the parameters. BuildRaw # Set up the parameters for a raw query input. add_bottom_parameters ( self ) # Set up the advanced parameters. add_top_parameters ( self ) # Set up the parameters. fetch_based_parameters ( self , parameters , context ) # Get the parameters. provider # Processing QuickOSM provider. Provider # Processing QuickOSM provider. icon ( self ) # Return the icon. id ( self ) -> str # Return the id. loadAlgorithms ( self ) # Load the algorithms name ( self ) -> str # Return the name. svgIconPath ( self ) -> str # Return the icon path. quickosm_process # Run the process of the plugin as an algorithm. DownloadOSMData # Set up the parameters needed for the download algorithms. __init__ ( self ) special # Constructor add_outputs ( self ) # Set up the outputs of the algorithm. add_parameters ( self ) # Set up additional parameters. fetch_based_parameters ( self , parameters , context ) # Get the parameters. flags ( self ) # Return the flags. group () -> str staticmethod # Return the group of the algorithm. groupId () -> str staticmethod # Return the id of the group. icon ( self ) # Return the icon. initAlgorithm ( self , config = None ) # Set up of the algorithm. process_road ( self , context , url ) # Major step of the process shortHelpString ( self ) -> str # Return an helper for the algorithm. DownloadOSMDataAroundAreaQuery # Run the process of the plugin as an algorithm with a query input. displayName () -> str staticmethod # Return the display name of the algorithm. fetch_based_parameters ( self , parameters , context ) # Get the parameters. flags ( self ) # Return the flags. name () -> str staticmethod # Return the name of the algorithm. processAlgorithm ( self , parameters , context , feedback ) # Run the algorithm. DownloadOSMDataExtentQuery # Run the process of the plugin as an algorithm with a query input. displayName () -> str staticmethod # Return the display name of the algorithm. fetch_based_parameters ( self , parameters , context ) # Get the parameters. flags ( self ) # Return the flags. name () -> str staticmethod # Return the name of the algorithm. processAlgorithm ( self , parameters , context , feedback ) # Run the algorithm. DownloadOSMDataInAreaQuery # Run the process of the plugin as an algorithm with a query input. displayName () -> str staticmethod # Return the display name of the algorithm. fetch_based_parameters ( self , parameters , context ) # Get the parameters. flags ( self ) # Return the flags. name () -> str staticmethod # Return the name of the algorithm. processAlgorithm ( self , parameters , context , feedback ) # Run the algorithm. DownloadOSMDataNotSpatialQuery # Run the process of the plugin as an algorithm with a query input. displayName () -> str staticmethod # Return the display name of the algorithm. fetch_based_parameters ( self , parameters , context ) # Get the parameters. flags ( self ) # Return the flags. name () -> str staticmethod # Return the name of the algorithm. processAlgorithm ( self , parameters , context , feedback ) # Run the algorithm. DownloadOSMDataRawQuery # Run the process of the plugin as an algorithm with a raw query input. displayName () -> str staticmethod # Return the display name of the algorithm. fetch_based_parameters ( self , parameters , context ) # Get the parameters. flags ( self ) # Return the flags. name () -> str staticmethod # Return the name of the algorithm. processAlgorithm ( self , parameters , context , feedback ) # Run the algorithm.","title":"Processing files"},{"location":"code-documentation/processing/#files-documentation","text":"","title":"Files documentation"},{"location":"code-documentation/processing/#quick_osm_processing-files-documentation","text":"","title":"Quick_osm_processing files documentation"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing","text":"","title":"quick_osm_processing"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced","text":"","title":"advanced"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.build_query","text":"Processing algorithm for building a query.","title":"build_query"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.build_query.BuildQueryAroundAreaAlgorithm","text":"Processing algorithm for building a 'around' query.","title":"BuildQueryAroundAreaAlgorithm"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.build_query.BuildQueryAroundAreaAlgorithm.displayName","text":"Return the display name of the algorithm.","title":"displayName()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.build_query.BuildQueryAroundAreaAlgorithm.name","text":"Return the name of the algorithm.","title":"name()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.build_query.BuildQueryAroundAreaAlgorithm.processAlgorithm","text":"Run the algorithm.","title":"processAlgorithm()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.build_query.BuildQueryBasedAlgorithm","text":"Processing algorithm for building a query.","title":"BuildQueryBasedAlgorithm"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.build_query.BuildQueryBasedAlgorithm.add_outputs","text":"Set up the advanced parameters.","title":"add_outputs()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.build_query.BuildQueryBasedAlgorithm.build_query","text":"Build the query requested.","title":"build_query()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.build_query.BuildQueryBasedAlgorithm.flags","text":"Return the flags.","title":"flags()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.build_query.BuildQueryBasedAlgorithm.group","text":"Return the group of the algorithm.","title":"group()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.build_query.BuildQueryBasedAlgorithm.groupId","text":"Return the id of the group.","title":"groupId()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.build_query.BuildQueryBasedAlgorithm.initAlgorithm","text":"Set up of the algorithm.","title":"initAlgorithm()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.build_query.BuildQueryBasedAlgorithm.shortHelpString","text":"Return an helper for the algorithm.","title":"shortHelpString()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.build_query.BuildQueryExtentAlgorithm","text":"Processing algorithm for building a 'extent' query.","title":"BuildQueryExtentAlgorithm"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.build_query.BuildQueryExtentAlgorithm.displayName","text":"Return the display name of the algorithm.","title":"displayName()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.build_query.BuildQueryExtentAlgorithm.name","text":"Return the name of the algorithm.","title":"name()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.build_query.BuildQueryExtentAlgorithm.processAlgorithm","text":"Run the algorithm.","title":"processAlgorithm()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.build_query.BuildQueryInAreaAlgorithm","text":"Processing algorithm for building a 'in area' query.","title":"BuildQueryInAreaAlgorithm"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.build_query.BuildQueryInAreaAlgorithm.displayName","text":"Return the display name of the algorithm.","title":"displayName()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.build_query.BuildQueryInAreaAlgorithm.name","text":"Return the name of the algorithm.","title":"name()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.build_query.BuildQueryInAreaAlgorithm.processAlgorithm","text":"Run the algorithm.","title":"processAlgorithm()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.build_query.BuildQueryNotSpatialAlgorithm","text":"Processing algorithm for building a 'not spatial' query.","title":"BuildQueryNotSpatialAlgorithm"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.build_query.BuildQueryNotSpatialAlgorithm.displayName","text":"Return the display name of the algorithm.","title":"displayName()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.build_query.BuildQueryNotSpatialAlgorithm.name","text":"Return the name of the algorithm.","title":"name()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.build_query.BuildQueryNotSpatialAlgorithm.processAlgorithm","text":"Run the algorithm.","title":"processAlgorithm()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.decorate_output","text":"Decorate the layer as a QuickOSM output.","title":"decorate_output"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.decorate_output.DecorateLayerAlgorithm","text":"Decorate the layer as a QuickOSM output.","title":"DecorateLayerAlgorithm"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.decorate_output.DecorateLayerAlgorithm.__init__","text":"Constructor","title":"__init__()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.decorate_output.DecorateLayerAlgorithm.add_outputs","text":"Set up the outputs of the algorithm.","title":"add_outputs()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.decorate_output.DecorateLayerAlgorithm.add_parameters","text":"Set up the parameters.","title":"add_parameters()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.decorate_output.DecorateLayerAlgorithm.displayName","text":"Return the display name of the algorithm.","title":"displayName()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.decorate_output.DecorateLayerAlgorithm.fetch_based_parameters","text":"Get the parameters.","title":"fetch_based_parameters()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.decorate_output.DecorateLayerAlgorithm.flags","text":"Return the flags.","title":"flags()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.decorate_output.DecorateLayerAlgorithm.group","text":"Return the group of the algorithm.","title":"group()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.decorate_output.DecorateLayerAlgorithm.groupId","text":"Return the id of the group.","title":"groupId()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.decorate_output.DecorateLayerAlgorithm.initAlgorithm","text":"Set up of the algorithm.","title":"initAlgorithm()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.decorate_output.DecorateLayerAlgorithm.name","text":"Return the name of the algorithm.","title":"name()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.decorate_output.DecorateLayerAlgorithm.processAlgorithm","text":"Run the algorithm.","title":"processAlgorithm()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.decorate_output.DecorateLayerAlgorithm.shortHelpString","text":"Return an helper for the algorithm.","title":"shortHelpString()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.decorate_output.SetColoringPostProcessor","text":"Color the layer with the value of the 'colour' field.","title":"SetColoringPostProcessor"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.decorate_output.SetColoringPostProcessor.create","text":"Launch the algorithm","title":"create()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.decorate_output.SetColoringPostProcessor.postProcessLayer","text":"Run the coloring process","title":"postProcessLayer()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.download_overpass","text":"Processing algorithm to download a Overpass query.","title":"download_overpass"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.download_overpass.DownloadOverpassUrl","text":"Processing algorithm to download a Overpass query.","title":"DownloadOverpassUrl"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.download_overpass.DownloadOverpassUrl.displayName","text":"Return the display name of the algorithm.","title":"displayName()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.download_overpass.DownloadOverpassUrl.flags","text":"Return the flags.","title":"flags()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.download_overpass.DownloadOverpassUrl.group","text":"Return the group of the algorithm.","title":"group()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.download_overpass.DownloadOverpassUrl.groupId","text":"Return the id of the group.","title":"groupId()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.download_overpass.DownloadOverpassUrl.initAlgorithm","text":"Set up of the algorithm.","title":"initAlgorithm()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.download_overpass.DownloadOverpassUrl.name","text":"Return the name of the algorithm.","title":"name()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.download_overpass.DownloadOverpassUrl.processAlgorithm","text":"Run the algorithm.","title":"processAlgorithm()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.download_overpass.DownloadOverpassUrl.shortHelpString","text":"Return an helper for the algorithm.","title":"shortHelpString()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.open_osm_file","text":"Simple Processing algorithm to open a OSM file with sub layers.","title":"open_osm_file"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.open_osm_file.OpenOsmFile","text":"Simple Processing algorithm to open a OSM file with sub layers.","title":"OpenOsmFile"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.open_osm_file.OpenOsmFile.displayName","text":"Return the display name of the algorithm.","title":"displayName()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.open_osm_file.OpenOsmFile.flags","text":"Return the flags.","title":"flags()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.open_osm_file.OpenOsmFile.group","text":"Return the group of the algorithm.","title":"group()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.open_osm_file.OpenOsmFile.groupId","text":"Return the id of the group.","title":"groupId()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.open_osm_file.OpenOsmFile.initAlgorithm","text":"Set up of the algorithm.","title":"initAlgorithm()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.open_osm_file.OpenOsmFile.name","text":"Return the name of the algorithm.","title":"name()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.open_osm_file.OpenOsmFile.processAlgorithm","text":"Run the algorithm.","title":"processAlgorithm()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.open_osm_file.OpenOsmFile.shortHelpString","text":"Return an helper for the algorithm.","title":"shortHelpString()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.raw_query","text":"Generate a raw query.","title":"raw_query"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.raw_query.RawQueryAlgorithm","text":"Processing algorithm to generate a raw query.","title":"RawQueryAlgorithm"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.raw_query.RawQueryAlgorithm.displayName","text":"Return the display name of the algorithm.","title":"displayName()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.raw_query.RawQueryAlgorithm.flags","text":"Return the flags.","title":"flags()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.raw_query.RawQueryAlgorithm.group","text":"Return the group of the algorithm.","title":"group()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.raw_query.RawQueryAlgorithm.groupId","text":"Return the id of the group.","title":"groupId()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.raw_query.RawQueryAlgorithm.initAlgorithm","text":"Set up of the algorithm.","title":"initAlgorithm()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.raw_query.RawQueryAlgorithm.name","text":"Return the name of the algorithm.","title":"name()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.raw_query.RawQueryAlgorithm.processAlgorithm","text":"Run the algorithm.","title":"processAlgorithm()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.advanced.raw_query.RawQueryAlgorithm.shortHelpString","text":"Return an helper for the algorithm.","title":"shortHelpString()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.build_input","text":"Set up the parameters for the processing algorithms.","title":"build_input"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.build_input.BuildBased","text":"Set up the parameters.","title":"BuildBased"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.build_input.BuildBased.__init__","text":"Constructor","title":"__init__()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.build_input.BuildBased.add_bottom_parameters","text":"Set up the advanced parameters.","title":"add_bottom_parameters()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.build_input.BuildBased.add_top_parameters","text":"Set up the parameters.","title":"add_top_parameters()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.build_input.BuildBased.fetch_based_parameters","text":"Get the parameters.","title":"fetch_based_parameters()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.build_input.BuildBasedAroundAreaQuery","text":"Set up the parameters for an 'around area' query.","title":"BuildBasedAroundAreaQuery"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.build_input.BuildBasedAroundAreaQuery.add_top_parameters","text":"Set up the parameter.","title":"add_top_parameters()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.build_input.BuildBasedAroundAreaQuery.fetch_based_parameters","text":"Get the parameters.","title":"fetch_based_parameters()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.build_input.BuildBasedExtentQuery","text":"Set up the parameters for an 'around area' query.","title":"BuildBasedExtentQuery"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.build_input.BuildBasedExtentQuery.add_top_parameters","text":"Set up the parameter.","title":"add_top_parameters()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.build_input.BuildBasedExtentQuery.fetch_based_parameters","text":"Get the parameters.","title":"fetch_based_parameters()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.build_input.BuildBasedInAreaQuery","text":"Set up the parameters for a 'in area' query.","title":"BuildBasedInAreaQuery"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.build_input.BuildBasedInAreaQuery.add_top_parameters","text":"Set up the parameter.","title":"add_top_parameters()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.build_input.BuildBasedInAreaQuery.fetch_based_parameters","text":"Get the parameters.","title":"fetch_based_parameters()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.build_input.BuildBasedNotSpatialQuery","text":"Set up the parameters for a not spatial query.","title":"BuildBasedNotSpatialQuery"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.build_input.BuildBasedQuery","text":"Set up the parameters for a query input.","title":"BuildBasedQuery"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.build_input.BuildBasedQuery.add_top_parameters","text":"Set up the parameters.","title":"add_top_parameters()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.build_input.BuildBasedQuery.fetch_based_parameters","text":"Get the parameters.","title":"fetch_based_parameters()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.build_input.BuildRaw","text":"Set up the parameters for a raw query input.","title":"BuildRaw"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.build_input.BuildRaw.add_bottom_parameters","text":"Set up the advanced parameters.","title":"add_bottom_parameters()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.build_input.BuildRaw.add_top_parameters","text":"Set up the parameters.","title":"add_top_parameters()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.build_input.BuildRaw.fetch_based_parameters","text":"Get the parameters.","title":"fetch_based_parameters()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.provider","text":"Processing QuickOSM provider.","title":"provider"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.provider.Provider","text":"Processing QuickOSM provider.","title":"Provider"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.provider.Provider.icon","text":"Return the icon.","title":"icon()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.provider.Provider.id","text":"Return the id.","title":"id()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.provider.Provider.loadAlgorithms","text":"Load the algorithms","title":"loadAlgorithms()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.provider.Provider.name","text":"Return the name.","title":"name()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.provider.Provider.svgIconPath","text":"Return the icon path.","title":"svgIconPath()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process","text":"Run the process of the plugin as an algorithm.","title":"quickosm_process"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMData","text":"Set up the parameters needed for the download algorithms.","title":"DownloadOSMData"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMData.__init__","text":"Constructor","title":"__init__()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMData.add_outputs","text":"Set up the outputs of the algorithm.","title":"add_outputs()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMData.add_parameters","text":"Set up additional parameters.","title":"add_parameters()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMData.fetch_based_parameters","text":"Get the parameters.","title":"fetch_based_parameters()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMData.flags","text":"Return the flags.","title":"flags()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMData.group","text":"Return the group of the algorithm.","title":"group()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMData.groupId","text":"Return the id of the group.","title":"groupId()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMData.icon","text":"Return the icon.","title":"icon()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMData.initAlgorithm","text":"Set up of the algorithm.","title":"initAlgorithm()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMData.process_road","text":"Major step of the process","title":"process_road()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMData.shortHelpString","text":"Return an helper for the algorithm.","title":"shortHelpString()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMDataAroundAreaQuery","text":"Run the process of the plugin as an algorithm with a query input.","title":"DownloadOSMDataAroundAreaQuery"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMDataAroundAreaQuery.displayName","text":"Return the display name of the algorithm.","title":"displayName()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMDataAroundAreaQuery.fetch_based_parameters","text":"Get the parameters.","title":"fetch_based_parameters()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMDataAroundAreaQuery.flags","text":"Return the flags.","title":"flags()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMDataAroundAreaQuery.name","text":"Return the name of the algorithm.","title":"name()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMDataAroundAreaQuery.processAlgorithm","text":"Run the algorithm.","title":"processAlgorithm()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMDataExtentQuery","text":"Run the process of the plugin as an algorithm with a query input.","title":"DownloadOSMDataExtentQuery"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMDataExtentQuery.displayName","text":"Return the display name of the algorithm.","title":"displayName()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMDataExtentQuery.fetch_based_parameters","text":"Get the parameters.","title":"fetch_based_parameters()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMDataExtentQuery.flags","text":"Return the flags.","title":"flags()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMDataExtentQuery.name","text":"Return the name of the algorithm.","title":"name()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMDataExtentQuery.processAlgorithm","text":"Run the algorithm.","title":"processAlgorithm()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMDataInAreaQuery","text":"Run the process of the plugin as an algorithm with a query input.","title":"DownloadOSMDataInAreaQuery"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMDataInAreaQuery.displayName","text":"Return the display name of the algorithm.","title":"displayName()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMDataInAreaQuery.fetch_based_parameters","text":"Get the parameters.","title":"fetch_based_parameters()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMDataInAreaQuery.flags","text":"Return the flags.","title":"flags()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMDataInAreaQuery.name","text":"Return the name of the algorithm.","title":"name()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMDataInAreaQuery.processAlgorithm","text":"Run the algorithm.","title":"processAlgorithm()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMDataNotSpatialQuery","text":"Run the process of the plugin as an algorithm with a query input.","title":"DownloadOSMDataNotSpatialQuery"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMDataNotSpatialQuery.displayName","text":"Return the display name of the algorithm.","title":"displayName()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMDataNotSpatialQuery.fetch_based_parameters","text":"Get the parameters.","title":"fetch_based_parameters()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMDataNotSpatialQuery.flags","text":"Return the flags.","title":"flags()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMDataNotSpatialQuery.name","text":"Return the name of the algorithm.","title":"name()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMDataNotSpatialQuery.processAlgorithm","text":"Run the algorithm.","title":"processAlgorithm()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMDataRawQuery","text":"Run the process of the plugin as an algorithm with a raw query input.","title":"DownloadOSMDataRawQuery"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMDataRawQuery.displayName","text":"Return the display name of the algorithm.","title":"displayName()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMDataRawQuery.fetch_based_parameters","text":"Get the parameters.","title":"fetch_based_parameters()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMDataRawQuery.flags","text":"Return the flags.","title":"flags()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMDataRawQuery.name","text":"Return the name of the algorithm.","title":"name()"},{"location":"code-documentation/processing/#QuickOSM.quick_osm_processing.quickosm_process.DownloadOSMDataRawQuery.processAlgorithm","text":"Run the algorithm.","title":"processAlgorithm()"},{"location":"code-documentation/tests/","text":"Files documentation # Test files documentation # QuickOSM.test special # test_configuration_panel # Test for the configuration panel. TestUiMainWindow # Test for the configuration panel. setUp ( self ) -> None # Set up the test for the configuration panel. test_configuration_panel ( self ) # Test we can save the custom server. test_connexion_nominatim # Tests for Nominatim API requests. TestNominatim # Tests for Nominatim API requests. test_request_area ( self ) # Test valid osm_id request. This test is using internet. test_request_coord ( self ) # Test valid coordinate request. This test is using internet. test_wrong_request ( self ) # Test wrong request. This test is using internet. test_wrong_request_area ( self ) # Test wrong osm_id request. This test is using internet. test_wrong_request_coord ( self ) # Test wrong coordinate request. This test is using internet. test_connexion_overpass # Tests for Overpass API requests. TestOverpass # Tests for Overpass API requests. test_parsing_http_string ( self ) # Test we can parse the HTTP return string from QGIS for timing out. test_read_xml_encoding ( self ) # Test #240 related to encoding. test_real_wrong_request ( self ) # Test wrong request. This test is using internet. test_xml_error ( self ) # Test we can parse Overpass error within a file. test_file_panel # Test the osm file loader panel. TestFileLoader # Test the osm file loader panel. setUp ( self ) # Hook method for setting up the test fixture before exercising it. test_generate_filter ( self ) # Test if we can obtain a valid filter expression test_load_only ( self ) # Test if we can only load a file. test_main_window_dialog # Tests for the main window. TestUiMainWindow # Tests for the main window. test_add_row_below ( self ) # Test we can can add a row below in the table. test_preset ( self ) # Test we can obtain a couple key/value with preset. test_remove_row ( self ) # Test we can can remove a row in the table. test_show_query_empty ( self ) # Test we can show a query by switching tab with all params. test_show_query_key_value_in ( self ) # Test we can show a query by switching tab with key value in params. test_show_query_oql ( self ) # Test we can show a query in OQL by switching tab. test_show_query_xml ( self ) # Test we can show a query in XML by switching tab. test_osm_parser # Tests for the parser of the osm data. TestOsmParser # Tests for the parser of the osm data. setUp ( self ) # Hook method for setting up the test fixture before exercising it. test_parser ( self ) # Test if the osm parser output is as expected. test_subset_parser ( self ) # Test if we can select a subset of a file. test_overpass_panel # Tests for the overpass panel file. TestQuickOSMWidget # Tests for the overpass panel file. selected_features_set_up () -> ( < class ' QuickOSM . ui . dialog . Dialog '>, <class ' qgis . _core . QgsVectorLayer '>) staticmethod # Set the tests about the selected features. test_no_selected_features ( self ) # Test the exception of the selected features option test_selected_features ( self ) # Test the selected features option test_sort_nominatim_places ( self ) # Test if reorder last nominatim places works. test_preset_parser # Tests for the parser of the presets. TestPresetParser # Tests for the parser of the presets. setUp ( self ) # Hook method for setting up the test fixture before exercising it. test_parser_complex_files ( self ) # Test if the parser return the format expected test_parser_simple_files ( self ) # Test if the parser return the format expected test_retrieval_couples ( self ) # Test if we can retrieve the key/value couples test_processing # Tests for processing algorithms. TestProcessing # Tests for processing algorithms. setUp ( self ) -> None # Set up the processing tests. test_build_around_area_query ( self ) # Test for the build of an around area query algorithm. test_build_in_area_query ( self ) # Test for the build of a in area query algorithm. test_build_in_extent_query ( self ) # Test for the build of a in extent query algorithm. test_build_not_spatial_query ( self ) # Test for the build of a not spatial query algorithm. test_build_raw_query ( self ) # Test for the build of a raw query algorithm. test_open_osm_file ( self ) # Test for the opening of an osm file. test_process_around_query ( self ) # Test for the process algorithm from an 'around' query. test_process_extent_query ( self ) # Test for the process algorithm from an 'extent' query. test_process_in_query ( self ) # Test for the process algorithm from an 'in' query. test_process_not_spacial_query ( self ) # Test for the process algorithm from a not spacial query. test_process_raw_query ( self ) # Test for the process algorithm from a raw query. test_query_factory # Tests for Query factory. TestQueryFactory # Tests for Query factory. setUp ( self ) # Set up the tests about the query factory. test_impossible_queries ( self ) # Test queries which are not possible and must raise an exception. test_make ( self ) # Test make query with valid indentation and lines. test_possible_queries ( self ) # Test queries which are possible and must return a XML query. test_replace_template ( self ) # Test replace template. test_query_preparation # Tests for the query preparation. FakeNominatim # NOTE, because of the fake nominatim instance, latitude, longitude and relation ID are wrong and are replaced by the area name. get_first_point_from_query ( self , fake_query ) # Get first longitude, latitude of a Nominatim point. Parameters: Name Type Description Default query basestring Query to execute. required hack_test bool set up test without internet required Returns: Type Description tuple(float, float) First node with its longitude and latitude. Exceptions: Type Description NominatimAreaException get_first_polygon_from_query ( self , fake_query ) # Get first OSM_ID of a Nominatim area. Parameters: Name Type Description Default query basestring Query to execute. required hack_test bool set up test without internet required Returns: Type Description int First relation's with an \"osm_id\". Exceptions: Type Description NominatimAreaException TestQueryPreparation # Tests for the query preparation. setUp ( self ) # Hook method for setting up the test fixture before exercising it. test_clean_query ( self ) # Test we can clean a query. test_is_oql ( self ) # Test if OQL or XML. test_prepare_query ( self ) # Test we can prepare a query. test_replace_bbox ( self ) # Test we can replace {{bbox}} in a query. test_replace_big_bbox ( self ) # Test we can restrict a BBOX to +-90 and +-180. test_replace_center ( self ) # Test we can replace {{center}} in a query. test_replace_geocode_area ( self ) # Test we can replace {{geocodeArea}} in a query. test_replace_geocode_coords ( self ) # Test we can replace {{geocodeCoords:}} in a query. test_saved_query # Tests for the preset and the history of queries. TestBookmarkQuery # Tests for the preset and the history of queries. set_up_preset_data ( self ) -> dict # Load the data save in the json file linked to the preset. set_up_preset_data_text ( self ) -> dict # Load the data save in the json file linked to the preset. setUp ( self ) # Set up the tests tearDown ( self ) # End of the tests test_add_in_preset ( self ) # Test if we can add a query in a preset from the Quick Query panel. test_advanced_view ( self ) # Test if the view match the preset type. test_bookmark_several_query ( self ) # Test if we can manage (add and remove) several queries in a preset. test_edit_rename_bookmark ( self ) # Test if we can edit and rename a preset. test_edited_bookmark_file ( self ) # Test if we can edit a preset and check the edited json file. test_preset_format ( self ) # Test if the file in preset is as expected. test_save_in_preset ( self ) # Test if the file is save in preset. test_view_bookmark ( self ) # Test if we can display a preset.","title":"Tests files"},{"location":"code-documentation/tests/#files-documentation","text":"","title":"Files documentation"},{"location":"code-documentation/tests/#test-files-documentation","text":"","title":"Test files documentation"},{"location":"code-documentation/tests/#QuickOSM.test","text":"","title":"test"},{"location":"code-documentation/tests/#QuickOSM.test.test_configuration_panel","text":"Test for the configuration panel.","title":"test_configuration_panel"},{"location":"code-documentation/tests/#QuickOSM.test.test_configuration_panel.TestUiMainWindow","text":"Test for the configuration panel.","title":"TestUiMainWindow"},{"location":"code-documentation/tests/#QuickOSM.test.test_configuration_panel.TestUiMainWindow.setUp","text":"Set up the test for the configuration panel.","title":"setUp()"},{"location":"code-documentation/tests/#QuickOSM.test.test_configuration_panel.TestUiMainWindow.test_configuration_panel","text":"Test we can save the custom server.","title":"test_configuration_panel()"},{"location":"code-documentation/tests/#QuickOSM.test.test_connexion_nominatim","text":"Tests for Nominatim API requests.","title":"test_connexion_nominatim"},{"location":"code-documentation/tests/#QuickOSM.test.test_connexion_nominatim.TestNominatim","text":"Tests for Nominatim API requests.","title":"TestNominatim"},{"location":"code-documentation/tests/#QuickOSM.test.test_connexion_nominatim.TestNominatim.test_request_area","text":"Test valid osm_id request. This test is using internet.","title":"test_request_area()"},{"location":"code-documentation/tests/#QuickOSM.test.test_connexion_nominatim.TestNominatim.test_request_coord","text":"Test valid coordinate request. This test is using internet.","title":"test_request_coord()"},{"location":"code-documentation/tests/#QuickOSM.test.test_connexion_nominatim.TestNominatim.test_wrong_request","text":"Test wrong request. This test is using internet.","title":"test_wrong_request()"},{"location":"code-documentation/tests/#QuickOSM.test.test_connexion_nominatim.TestNominatim.test_wrong_request_area","text":"Test wrong osm_id request. This test is using internet.","title":"test_wrong_request_area()"},{"location":"code-documentation/tests/#QuickOSM.test.test_connexion_nominatim.TestNominatim.test_wrong_request_coord","text":"Test wrong coordinate request. This test is using internet.","title":"test_wrong_request_coord()"},{"location":"code-documentation/tests/#QuickOSM.test.test_connexion_overpass","text":"Tests for Overpass API requests.","title":"test_connexion_overpass"},{"location":"code-documentation/tests/#QuickOSM.test.test_connexion_overpass.TestOverpass","text":"Tests for Overpass API requests.","title":"TestOverpass"},{"location":"code-documentation/tests/#QuickOSM.test.test_connexion_overpass.TestOverpass.test_parsing_http_string","text":"Test we can parse the HTTP return string from QGIS for timing out.","title":"test_parsing_http_string()"},{"location":"code-documentation/tests/#QuickOSM.test.test_connexion_overpass.TestOverpass.test_read_xml_encoding","text":"Test #240 related to encoding.","title":"test_read_xml_encoding()"},{"location":"code-documentation/tests/#QuickOSM.test.test_connexion_overpass.TestOverpass.test_real_wrong_request","text":"Test wrong request. This test is using internet.","title":"test_real_wrong_request()"},{"location":"code-documentation/tests/#QuickOSM.test.test_connexion_overpass.TestOverpass.test_xml_error","text":"Test we can parse Overpass error within a file.","title":"test_xml_error()"},{"location":"code-documentation/tests/#QuickOSM.test.test_file_panel","text":"Test the osm file loader panel.","title":"test_file_panel"},{"location":"code-documentation/tests/#QuickOSM.test.test_file_panel.TestFileLoader","text":"Test the osm file loader panel.","title":"TestFileLoader"},{"location":"code-documentation/tests/#QuickOSM.test.test_file_panel.TestFileLoader.setUp","text":"Hook method for setting up the test fixture before exercising it.","title":"setUp()"},{"location":"code-documentation/tests/#QuickOSM.test.test_file_panel.TestFileLoader.test_generate_filter","text":"Test if we can obtain a valid filter expression","title":"test_generate_filter()"},{"location":"code-documentation/tests/#QuickOSM.test.test_file_panel.TestFileLoader.test_load_only","text":"Test if we can only load a file.","title":"test_load_only()"},{"location":"code-documentation/tests/#QuickOSM.test.test_main_window_dialog","text":"Tests for the main window.","title":"test_main_window_dialog"},{"location":"code-documentation/tests/#QuickOSM.test.test_main_window_dialog.TestUiMainWindow","text":"Tests for the main window.","title":"TestUiMainWindow"},{"location":"code-documentation/tests/#QuickOSM.test.test_main_window_dialog.TestUiMainWindow.test_add_row_below","text":"Test we can can add a row below in the table.","title":"test_add_row_below()"},{"location":"code-documentation/tests/#QuickOSM.test.test_main_window_dialog.TestUiMainWindow.test_preset","text":"Test we can obtain a couple key/value with preset.","title":"test_preset()"},{"location":"code-documentation/tests/#QuickOSM.test.test_main_window_dialog.TestUiMainWindow.test_remove_row","text":"Test we can can remove a row in the table.","title":"test_remove_row()"},{"location":"code-documentation/tests/#QuickOSM.test.test_main_window_dialog.TestUiMainWindow.test_show_query_empty","text":"Test we can show a query by switching tab with all params.","title":"test_show_query_empty()"},{"location":"code-documentation/tests/#QuickOSM.test.test_main_window_dialog.TestUiMainWindow.test_show_query_key_value_in","text":"Test we can show a query by switching tab with key value in params.","title":"test_show_query_key_value_in()"},{"location":"code-documentation/tests/#QuickOSM.test.test_main_window_dialog.TestUiMainWindow.test_show_query_oql","text":"Test we can show a query in OQL by switching tab.","title":"test_show_query_oql()"},{"location":"code-documentation/tests/#QuickOSM.test.test_main_window_dialog.TestUiMainWindow.test_show_query_xml","text":"Test we can show a query in XML by switching tab.","title":"test_show_query_xml()"},{"location":"code-documentation/tests/#QuickOSM.test.test_osm_parser","text":"Tests for the parser of the osm data.","title":"test_osm_parser"},{"location":"code-documentation/tests/#QuickOSM.test.test_osm_parser.TestOsmParser","text":"Tests for the parser of the osm data.","title":"TestOsmParser"},{"location":"code-documentation/tests/#QuickOSM.test.test_osm_parser.TestOsmParser.setUp","text":"Hook method for setting up the test fixture before exercising it.","title":"setUp()"},{"location":"code-documentation/tests/#QuickOSM.test.test_osm_parser.TestOsmParser.test_parser","text":"Test if the osm parser output is as expected.","title":"test_parser()"},{"location":"code-documentation/tests/#QuickOSM.test.test_osm_parser.TestOsmParser.test_subset_parser","text":"Test if we can select a subset of a file.","title":"test_subset_parser()"},{"location":"code-documentation/tests/#QuickOSM.test.test_overpass_panel","text":"Tests for the overpass panel file.","title":"test_overpass_panel"},{"location":"code-documentation/tests/#QuickOSM.test.test_overpass_panel.TestQuickOSMWidget","text":"Tests for the overpass panel file.","title":"TestQuickOSMWidget"},{"location":"code-documentation/tests/#QuickOSM.test.test_overpass_panel.TestQuickOSMWidget.selected_features_set_up","text":"Set the tests about the selected features.","title":"selected_features_set_up()"},{"location":"code-documentation/tests/#QuickOSM.test.test_overpass_panel.TestQuickOSMWidget.test_no_selected_features","text":"Test the exception of the selected features option","title":"test_no_selected_features()"},{"location":"code-documentation/tests/#QuickOSM.test.test_overpass_panel.TestQuickOSMWidget.test_selected_features","text":"Test the selected features option","title":"test_selected_features()"},{"location":"code-documentation/tests/#QuickOSM.test.test_overpass_panel.TestQuickOSMWidget.test_sort_nominatim_places","text":"Test if reorder last nominatim places works.","title":"test_sort_nominatim_places()"},{"location":"code-documentation/tests/#QuickOSM.test.test_preset_parser","text":"Tests for the parser of the presets.","title":"test_preset_parser"},{"location":"code-documentation/tests/#QuickOSM.test.test_preset_parser.TestPresetParser","text":"Tests for the parser of the presets.","title":"TestPresetParser"},{"location":"code-documentation/tests/#QuickOSM.test.test_preset_parser.TestPresetParser.setUp","text":"Hook method for setting up the test fixture before exercising it.","title":"setUp()"},{"location":"code-documentation/tests/#QuickOSM.test.test_preset_parser.TestPresetParser.test_parser_complex_files","text":"Test if the parser return the format expected","title":"test_parser_complex_files()"},{"location":"code-documentation/tests/#QuickOSM.test.test_preset_parser.TestPresetParser.test_parser_simple_files","text":"Test if the parser return the format expected","title":"test_parser_simple_files()"},{"location":"code-documentation/tests/#QuickOSM.test.test_preset_parser.TestPresetParser.test_retrieval_couples","text":"Test if we can retrieve the key/value couples","title":"test_retrieval_couples()"},{"location":"code-documentation/tests/#QuickOSM.test.test_processing","text":"Tests for processing algorithms.","title":"test_processing"},{"location":"code-documentation/tests/#QuickOSM.test.test_processing.TestProcessing","text":"Tests for processing algorithms.","title":"TestProcessing"},{"location":"code-documentation/tests/#QuickOSM.test.test_processing.TestProcessing.setUp","text":"Set up the processing tests.","title":"setUp()"},{"location":"code-documentation/tests/#QuickOSM.test.test_processing.TestProcessing.test_build_around_area_query","text":"Test for the build of an around area query algorithm.","title":"test_build_around_area_query()"},{"location":"code-documentation/tests/#QuickOSM.test.test_processing.TestProcessing.test_build_in_area_query","text":"Test for the build of a in area query algorithm.","title":"test_build_in_area_query()"},{"location":"code-documentation/tests/#QuickOSM.test.test_processing.TestProcessing.test_build_in_extent_query","text":"Test for the build of a in extent query algorithm.","title":"test_build_in_extent_query()"},{"location":"code-documentation/tests/#QuickOSM.test.test_processing.TestProcessing.test_build_not_spatial_query","text":"Test for the build of a not spatial query algorithm.","title":"test_build_not_spatial_query()"},{"location":"code-documentation/tests/#QuickOSM.test.test_processing.TestProcessing.test_build_raw_query","text":"Test for the build of a raw query algorithm.","title":"test_build_raw_query()"},{"location":"code-documentation/tests/#QuickOSM.test.test_processing.TestProcessing.test_open_osm_file","text":"Test for the opening of an osm file.","title":"test_open_osm_file()"},{"location":"code-documentation/tests/#QuickOSM.test.test_processing.TestProcessing.test_process_around_query","text":"Test for the process algorithm from an 'around' query.","title":"test_process_around_query()"},{"location":"code-documentation/tests/#QuickOSM.test.test_processing.TestProcessing.test_process_extent_query","text":"Test for the process algorithm from an 'extent' query.","title":"test_process_extent_query()"},{"location":"code-documentation/tests/#QuickOSM.test.test_processing.TestProcessing.test_process_in_query","text":"Test for the process algorithm from an 'in' query.","title":"test_process_in_query()"},{"location":"code-documentation/tests/#QuickOSM.test.test_processing.TestProcessing.test_process_not_spacial_query","text":"Test for the process algorithm from a not spacial query.","title":"test_process_not_spacial_query()"},{"location":"code-documentation/tests/#QuickOSM.test.test_processing.TestProcessing.test_process_raw_query","text":"Test for the process algorithm from a raw query.","title":"test_process_raw_query()"},{"location":"code-documentation/tests/#QuickOSM.test.test_query_factory","text":"Tests for Query factory.","title":"test_query_factory"},{"location":"code-documentation/tests/#QuickOSM.test.test_query_factory.TestQueryFactory","text":"Tests for Query factory.","title":"TestQueryFactory"},{"location":"code-documentation/tests/#QuickOSM.test.test_query_factory.TestQueryFactory.setUp","text":"Set up the tests about the query factory.","title":"setUp()"},{"location":"code-documentation/tests/#QuickOSM.test.test_query_factory.TestQueryFactory.test_impossible_queries","text":"Test queries which are not possible and must raise an exception.","title":"test_impossible_queries()"},{"location":"code-documentation/tests/#QuickOSM.test.test_query_factory.TestQueryFactory.test_make","text":"Test make query with valid indentation and lines.","title":"test_make()"},{"location":"code-documentation/tests/#QuickOSM.test.test_query_factory.TestQueryFactory.test_possible_queries","text":"Test queries which are possible and must return a XML query.","title":"test_possible_queries()"},{"location":"code-documentation/tests/#QuickOSM.test.test_query_factory.TestQueryFactory.test_replace_template","text":"Test replace template.","title":"test_replace_template()"},{"location":"code-documentation/tests/#QuickOSM.test.test_query_preparation","text":"Tests for the query preparation.","title":"test_query_preparation"},{"location":"code-documentation/tests/#QuickOSM.test.test_query_preparation.FakeNominatim","text":"NOTE, because of the fake nominatim instance, latitude, longitude and relation ID are wrong and are replaced by the area name.","title":"FakeNominatim"},{"location":"code-documentation/tests/#QuickOSM.test.test_query_preparation.FakeNominatim.get_first_point_from_query","text":"Get first longitude, latitude of a Nominatim point. Parameters: Name Type Description Default query basestring Query to execute. required hack_test bool set up test without internet required Returns: Type Description tuple(float, float) First node with its longitude and latitude. Exceptions: Type Description NominatimAreaException","title":"get_first_point_from_query()"},{"location":"code-documentation/tests/#QuickOSM.test.test_query_preparation.FakeNominatim.get_first_polygon_from_query","text":"Get first OSM_ID of a Nominatim area. Parameters: Name Type Description Default query basestring Query to execute. required hack_test bool set up test without internet required Returns: Type Description int First relation's with an \"osm_id\". Exceptions: Type Description NominatimAreaException","title":"get_first_polygon_from_query()"},{"location":"code-documentation/tests/#QuickOSM.test.test_query_preparation.TestQueryPreparation","text":"Tests for the query preparation.","title":"TestQueryPreparation"},{"location":"code-documentation/tests/#QuickOSM.test.test_query_preparation.TestQueryPreparation.setUp","text":"Hook method for setting up the test fixture before exercising it.","title":"setUp()"},{"location":"code-documentation/tests/#QuickOSM.test.test_query_preparation.TestQueryPreparation.test_clean_query","text":"Test we can clean a query.","title":"test_clean_query()"},{"location":"code-documentation/tests/#QuickOSM.test.test_query_preparation.TestQueryPreparation.test_is_oql","text":"Test if OQL or XML.","title":"test_is_oql()"},{"location":"code-documentation/tests/#QuickOSM.test.test_query_preparation.TestQueryPreparation.test_prepare_query","text":"Test we can prepare a query.","title":"test_prepare_query()"},{"location":"code-documentation/tests/#QuickOSM.test.test_query_preparation.TestQueryPreparation.test_replace_bbox","text":"Test we can replace {{bbox}} in a query.","title":"test_replace_bbox()"},{"location":"code-documentation/tests/#QuickOSM.test.test_query_preparation.TestQueryPreparation.test_replace_big_bbox","text":"Test we can restrict a BBOX to +-90 and +-180.","title":"test_replace_big_bbox()"},{"location":"code-documentation/tests/#QuickOSM.test.test_query_preparation.TestQueryPreparation.test_replace_center","text":"Test we can replace {{center}} in a query.","title":"test_replace_center()"},{"location":"code-documentation/tests/#QuickOSM.test.test_query_preparation.TestQueryPreparation.test_replace_geocode_area","text":"Test we can replace {{geocodeArea}} in a query.","title":"test_replace_geocode_area()"},{"location":"code-documentation/tests/#QuickOSM.test.test_query_preparation.TestQueryPreparation.test_replace_geocode_coords","text":"Test we can replace {{geocodeCoords:}} in a query.","title":"test_replace_geocode_coords()"},{"location":"code-documentation/tests/#QuickOSM.test.test_saved_query","text":"Tests for the preset and the history of queries.","title":"test_saved_query"},{"location":"code-documentation/tests/#QuickOSM.test.test_saved_query.TestBookmarkQuery","text":"Tests for the preset and the history of queries.","title":"TestBookmarkQuery"},{"location":"code-documentation/tests/#QuickOSM.test.test_saved_query.TestBookmarkQuery.set_up_preset_data","text":"Load the data save in the json file linked to the preset.","title":"set_up_preset_data()"},{"location":"code-documentation/tests/#QuickOSM.test.test_saved_query.TestBookmarkQuery.set_up_preset_data_text","text":"Load the data save in the json file linked to the preset.","title":"set_up_preset_data_text()"},{"location":"code-documentation/tests/#QuickOSM.test.test_saved_query.TestBookmarkQuery.setUp","text":"Set up the tests","title":"setUp()"},{"location":"code-documentation/tests/#QuickOSM.test.test_saved_query.TestBookmarkQuery.tearDown","text":"End of the tests","title":"tearDown()"},{"location":"code-documentation/tests/#QuickOSM.test.test_saved_query.TestBookmarkQuery.test_add_in_preset","text":"Test if we can add a query in a preset from the Quick Query panel.","title":"test_add_in_preset()"},{"location":"code-documentation/tests/#QuickOSM.test.test_saved_query.TestBookmarkQuery.test_advanced_view","text":"Test if the view match the preset type.","title":"test_advanced_view()"},{"location":"code-documentation/tests/#QuickOSM.test.test_saved_query.TestBookmarkQuery.test_bookmark_several_query","text":"Test if we can manage (add and remove) several queries in a preset.","title":"test_bookmark_several_query()"},{"location":"code-documentation/tests/#QuickOSM.test.test_saved_query.TestBookmarkQuery.test_edit_rename_bookmark","text":"Test if we can edit and rename a preset.","title":"test_edit_rename_bookmark()"},{"location":"code-documentation/tests/#QuickOSM.test.test_saved_query.TestBookmarkQuery.test_edited_bookmark_file","text":"Test if we can edit a preset and check the edited json file.","title":"test_edited_bookmark_file()"},{"location":"code-documentation/tests/#QuickOSM.test.test_saved_query.TestBookmarkQuery.test_preset_format","text":"Test if the file in preset is as expected.","title":"test_preset_format()"},{"location":"code-documentation/tests/#QuickOSM.test.test_saved_query.TestBookmarkQuery.test_save_in_preset","text":"Test if the file is save in preset.","title":"test_save_in_preset()"},{"location":"code-documentation/tests/#QuickOSM.test.test_saved_query.TestBookmarkQuery.test_view_bookmark","text":"Test if we can display a preset.","title":"test_view_bookmark()"},{"location":"code-documentation/ui/","text":"Files documentation # Ui files documentation # QuickOSM.ui special # base_overpass_panel # Panel OSM Queries based on Overpass base class. BaseOverpassPanel # Panel OSM Processing base class. This panels will have an run button. This is a kind of virtual class. _core_query_type_updated ( self , combo_query_type , widget , spinbox = None , checkbox = None ) private # Enable/disable the extent/layer widget. _end_process ( self ) private # Make some stuff after the process. _start_process ( self ) private # Make some stuff before launching the process. end_query ( self , num_layers ) # Display the message at the end of the query. Parameters: Name Type Description Default num_layers Number of layers which have been loaded. required gather_spatial_values ( self , properties : dict ) -> dict # Retrieval of the values set by the user. gather_values ( self ) -> dict # Retrieval of the values set by the user. init_nominatim_autofill ( self ) # Open the nominatim file and start setting up the auto-completion. query_language_oql ( self ) # Update the wanted language. query_language_updated ( self ) # Transfer the wanted language through panels. query_language_xml ( self ) # Update the wanted language. setup_panel ( self ) # Function to set custom UI for some panels. sort_nominatim_places ( existing_places : list , place : str ) -> list staticmethod # Helper to sort and limit results of saved nominatim places. write_nominatim_file ( self , panel : Panels ) # Write new nominatim value in the file. Parameters: Name Type Description Default panel Panels The panel to use so as to fetch the nominatim value. required base_panel # Panel core base class. BasePanel # Base panel for QuickOSM dialog. This is a kind of virtual class. dialog : QDialog property readonly # Return the dialog. panel : Panels property writable # Return the panel. setup_panel ( self ) # Setup the UI for the panel. base_processing_panel # Panel OSM Processing base class. BaseProcessingPanel # Base for processing panel. This panels will have an run button. This is a kind of virtual class. _end_process ( self ) private # Make some stuff after the process. _start_process ( self ) private # Make some stuff before launching the process. cancel_process ( self ) # Cancel the process disable_enable_format_prefix ( self ) # Enable only if the directory is set. gather_values ( self ) # Retrieval of the values set by the user. run ( self ) # Run the process run_saved_query ( self , data : dict ) # Run the process from a saved query. setup_panel ( self ) # Function to set custom UI for some panels. configuration_panel # Configuration panel. ConfigurationPanel # Final implementation for the panel. set_server_nominatim_api ( self ) # Save the new Nominatim server. set_server_overpass_api ( self ) # Save the new Overpass server. setup_panel ( self ) # Set UI related the configuration panel. custom_table # Set up and manage a custum table widget. TableKeyValue # Handle the keys/values parameters. __init__ ( self , table_widget : QWidget , preset_widget : QWidget ) special # Constructor add_row_to_table ( self , row : int = None ) # Add a row in the table widget. choice_preset ( self , choice : str = None ) # Fill the table with the keys/values from the preset. fill_table ( self , keys : list , values : list , type_multi_request : list , row : int = 0 ) # Fill the table with custom parameters. gather_couple ( self , properties : dict ) -> dict # Gather the keys and values parameters key_edited ( self , row : int = None ) # Add values to the combobox according to the key. prepare_button ( self ) -> ( < class ' PyQt5 . QtWidgets . QPushButton '>, <class ' PyQt5 . QtWidgets . QPushButton '>, <class ' PyQt5 . QtWidgets . QPushButton '>) # Set up the buttons for a row in the table widget. prepare_key_field ( self ) -> QComboBox # Set up the key field for a row in the table widget. prepare_type_multi_request ( self ) -> QComboBox # Set up the choice of multi request type for a row in the table widget. prepare_value_field ( self ) -> QComboBox # Set up the value field for a row in the table widget. remove_selection ( self ) # Remove the selected row from the table. set_couple ( self , couple : dict ) # Set the couple parameter setup_preset ( self ) # Set up the preset setup_table ( self ) # Set up the table update_friendly ( self ) # Updates the QuickQuery friendly label (label_qq_friendly). dialog # Main dialog of QuickOSM. Dialog # Main class about the dialog of the plugin iface property readonly # Get iface. __init__ ( self , iface = None , parent = None ) special # Constructor. display_critical_exception ( self , exception : BaseException ) # Display others exceptions, these are criticals. They are not managed by QuickOSM so it's a bug from the plugin. Parameters: Name Type Description Default exception BaseException The exception to display. required display_message_bar ( self , title : str , message : str = None , level : MessageLevel = 0 , duration : int = 5 , more_details : str = None , open_logs : bool = False ) # Display a message. Parameters: Name Type Description Default title str Title of the message. required message str The message. None level MessageLevel A QGIS error level. 0 duration int Duration in second. 5 open_logs bool If we need to add a button for the log panel. False more_details str The message to display in the \"More button\". None display_quickosm_exception ( self , exception : QuickOsmException ) # Display QuickOSM exceptions. These exceptions are been raised by QuickOSM itself. It should be an error from the user. Parameters: Name Type Description Default exception QuickOsmException The exception to display. required eventFilter ( self , obj : QObject , e : QEvent ) -> bool # Set up a custom event to avoid scroll reset_form ( self ) # Reset all the GUI to default state. set_progress_percentage ( self , percent : int ) # Slot to update percentage during process. set_progress_text ( self , text : str ) # Slot to update text during process. edit_preset # Dialog that edit a preset EditPreset # Dialog that edit a preset __init__ ( self , parent = None , data_preset : dict = None ) special # Constructor. add_query ( self ) # Add a query in the preset change_query ( self ) # Display the selected query in the view. change_type_preset ( self ) # Update the form according the preset type. data_filling_form ( self , num_query : int = 0 ) # Writing the form with data from preset delete_query ( self , row : int ) # Delete a query in the preset disable_enable_format ( self ) # Enable only if the directory is set. end_show_extent ( self ) # End the show of the extent. gather_general_parameters ( self ) # Save the general parameters. gather_parameters ( self , num_query : int = 0 ) # Save the parameters. item_context ( self , pos : QPoint ) # Set context submenu to delete item in the list. rename_query ( self , query : QListWidgetItem ) # Rename a query in the preset show_extent_canvas ( self ) # Show the extent in the canvas update_qml_format ( self ) # Update the explanation of the qml file name format. validate ( self ) # Update the preset verification_delete_query ( self , row : int ) # Delete a query in the preset map_preset_panel # Panel OSM map preset class. MapPresetPanel # Implementation of the map preset panel. __init__ ( self , dialog : QDialog ) special # Constructor _run_saved_query ( self , data : dict ) private # Run a saved query(ies). disable_enable_location ( self , row : int ) # Enable only when it is a basic preset. edit_preset ( self , data : dict ) # Open a dialog to edit the preset prepare_run ( self ) # Prepare the data before running the process. query_type_updated ( self ) # Update the ui when the query type is modified. remove_preset ( self , item : QListWidgetItem , name : str ) # Remove a preset. select_default ( self ) # Update the panel knowing a default preset is selected. select_personal ( self ) # Update the panel knowing a personal preset is selected. setup_default_preset ( self ) # Setup the display of presets setup_panel ( self ) # Function to set custom UI for some panels. update_personal_preset_view ( self ) # Update the presets displayed. verification_remove_preset ( self , item : QListWidgetItem , name : str ) # Verification of the removal a preset. osm_file_panel # Configuration panel. OsmFilePanel # Final implementation for the panel. __init__ ( self , dialog : QDialog ) special # Constructor _run ( self ) private # Run the process disable_enable_buttons ( self ) # Display enable only the suitable parameters. gather_values ( self ) -> dict # Retrieval of the values set by the user. generate_sql ( properties : dict ) -> str staticmethod # Generate the subset query. setup_panel ( self ) # Setup the panel query_panel # Panel OSM base class. QueryPanel # Final implementation for the panel. allow_nominatim_or_extent ( self ) # Disable or enable radio buttons if nominatim or extent. Disable buttons if the query is empty. gather_values ( self ) -> dict # Retrieval of the values set by the user. generate_query ( self , oql_output : bool = True ) # Generate the query as final. query_language_check ( self ) # Check the wanted language. query_type_updated ( self ) # Update the ui when the query type is modified. setup_panel ( self ) # Function to set custom UI for some panels. quick_query_panel # Panel OSM base class. QuickQueryPanel # Final implementation for the panel. __init__ ( self , dialog : QDialog ) special # Constructor _run ( self ) private # Process for running the query. _run_saved_query ( self , data : dict ) private # Run a saved query(ies). gather_values ( self ) -> dict # Retrieval of the values set by the user. query_language_oql ( self ) # Update the wanted language. query_language_xml ( self ) # Update the wanted language. query_type_updated ( self ) # Update the ui when the query type is modified. save_add_existing ( self ) # Verify and ask the save destination. save_history_preset ( self , data : dict ) # Save a query from history to preset. save_new ( self ) # Verify the save destination. save_query ( self ) # Save a query in a preset. select_preset ( self ) # Launch the wizard. setup_panel ( self ) # Function to set custom UI for some panels. show_query ( self , output : QueryLanguage ) # Show the query in the main window. update_friendly ( self ) # Updates the QuickQuery friendly label (label_qq_friendly). update_history_view ( self ) # Update the history view. wizard # Wizard of the preset. Wizard # Dialog that help with the preset __init__ ( self , parent = None ) special # Constructor. end_search ( self ) # Process the end of the dialog search_edited ( self ) # Show or hide items xml_highlighter # Query Highlighter class. QueryHighlighter # Query Highlighter class. highlightBlock ( self , text : str ) # Highlight of a comment block match_multiline ( self , text : str , start_delimiter : QRegExp , end_delimiter : QRegExp , in_state : int , style : Qt ) -> bool # Do highlighting of multi-line strings. delimiter should be a QRegExp for triple-single-quotes or triple-double-quotes, and in_state should be a unique integer to represent the corresponding state changes when inside those strings. Returns True if we're still inside a multi-line string when this function is finished.","title":"Ui files"},{"location":"code-documentation/ui/#files-documentation","text":"","title":"Files documentation"},{"location":"code-documentation/ui/#ui-files-documentation","text":"","title":"Ui files documentation"},{"location":"code-documentation/ui/#QuickOSM.ui","text":"","title":"ui"},{"location":"code-documentation/ui/#QuickOSM.ui.base_overpass_panel","text":"Panel OSM Queries based on Overpass base class.","title":"base_overpass_panel"},{"location":"code-documentation/ui/#QuickOSM.ui.base_overpass_panel.BaseOverpassPanel","text":"Panel OSM Processing base class. This panels will have an run button. This is a kind of virtual class.","title":"BaseOverpassPanel"},{"location":"code-documentation/ui/#QuickOSM.ui.base_overpass_panel.BaseOverpassPanel._core_query_type_updated","text":"Enable/disable the extent/layer widget.","title":"_core_query_type_updated()"},{"location":"code-documentation/ui/#QuickOSM.ui.base_overpass_panel.BaseOverpassPanel._end_process","text":"Make some stuff after the process.","title":"_end_process()"},{"location":"code-documentation/ui/#QuickOSM.ui.base_overpass_panel.BaseOverpassPanel._start_process","text":"Make some stuff before launching the process.","title":"_start_process()"},{"location":"code-documentation/ui/#QuickOSM.ui.base_overpass_panel.BaseOverpassPanel.end_query","text":"Display the message at the end of the query. Parameters: Name Type Description Default num_layers Number of layers which have been loaded. required","title":"end_query()"},{"location":"code-documentation/ui/#QuickOSM.ui.base_overpass_panel.BaseOverpassPanel.gather_spatial_values","text":"Retrieval of the values set by the user.","title":"gather_spatial_values()"},{"location":"code-documentation/ui/#QuickOSM.ui.base_overpass_panel.BaseOverpassPanel.gather_values","text":"Retrieval of the values set by the user.","title":"gather_values()"},{"location":"code-documentation/ui/#QuickOSM.ui.base_overpass_panel.BaseOverpassPanel.init_nominatim_autofill","text":"Open the nominatim file and start setting up the auto-completion.","title":"init_nominatim_autofill()"},{"location":"code-documentation/ui/#QuickOSM.ui.base_overpass_panel.BaseOverpassPanel.query_language_oql","text":"Update the wanted language.","title":"query_language_oql()"},{"location":"code-documentation/ui/#QuickOSM.ui.base_overpass_panel.BaseOverpassPanel.query_language_updated","text":"Transfer the wanted language through panels.","title":"query_language_updated()"},{"location":"code-documentation/ui/#QuickOSM.ui.base_overpass_panel.BaseOverpassPanel.query_language_xml","text":"Update the wanted language.","title":"query_language_xml()"},{"location":"code-documentation/ui/#QuickOSM.ui.base_overpass_panel.BaseOverpassPanel.setup_panel","text":"Function to set custom UI for some panels.","title":"setup_panel()"},{"location":"code-documentation/ui/#QuickOSM.ui.base_overpass_panel.BaseOverpassPanel.sort_nominatim_places","text":"Helper to sort and limit results of saved nominatim places.","title":"sort_nominatim_places()"},{"location":"code-documentation/ui/#QuickOSM.ui.base_overpass_panel.BaseOverpassPanel.write_nominatim_file","text":"Write new nominatim value in the file. Parameters: Name Type Description Default panel Panels The panel to use so as to fetch the nominatim value. required","title":"write_nominatim_file()"},{"location":"code-documentation/ui/#QuickOSM.ui.base_panel","text":"Panel core base class.","title":"base_panel"},{"location":"code-documentation/ui/#QuickOSM.ui.base_panel.BasePanel","text":"Base panel for QuickOSM dialog. This is a kind of virtual class.","title":"BasePanel"},{"location":"code-documentation/ui/#QuickOSM.ui.base_panel.BasePanel.dialog","text":"Return the dialog.","title":"dialog"},{"location":"code-documentation/ui/#QuickOSM.ui.base_panel.BasePanel.panel","text":"Return the panel.","title":"panel"},{"location":"code-documentation/ui/#QuickOSM.ui.base_panel.BasePanel.setup_panel","text":"Setup the UI for the panel.","title":"setup_panel()"},{"location":"code-documentation/ui/#QuickOSM.ui.base_processing_panel","text":"Panel OSM Processing base class.","title":"base_processing_panel"},{"location":"code-documentation/ui/#QuickOSM.ui.base_processing_panel.BaseProcessingPanel","text":"Base for processing panel. This panels will have an run button. This is a kind of virtual class.","title":"BaseProcessingPanel"},{"location":"code-documentation/ui/#QuickOSM.ui.base_processing_panel.BaseProcessingPanel._end_process","text":"Make some stuff after the process.","title":"_end_process()"},{"location":"code-documentation/ui/#QuickOSM.ui.base_processing_panel.BaseProcessingPanel._start_process","text":"Make some stuff before launching the process.","title":"_start_process()"},{"location":"code-documentation/ui/#QuickOSM.ui.base_processing_panel.BaseProcessingPanel.cancel_process","text":"Cancel the process","title":"cancel_process()"},{"location":"code-documentation/ui/#QuickOSM.ui.base_processing_panel.BaseProcessingPanel.disable_enable_format_prefix","text":"Enable only if the directory is set.","title":"disable_enable_format_prefix()"},{"location":"code-documentation/ui/#QuickOSM.ui.base_processing_panel.BaseProcessingPanel.gather_values","text":"Retrieval of the values set by the user.","title":"gather_values()"},{"location":"code-documentation/ui/#QuickOSM.ui.base_processing_panel.BaseProcessingPanel.run","text":"Run the process","title":"run()"},{"location":"code-documentation/ui/#QuickOSM.ui.base_processing_panel.BaseProcessingPanel.run_saved_query","text":"Run the process from a saved query.","title":"run_saved_query()"},{"location":"code-documentation/ui/#QuickOSM.ui.base_processing_panel.BaseProcessingPanel.setup_panel","text":"Function to set custom UI for some panels.","title":"setup_panel()"},{"location":"code-documentation/ui/#QuickOSM.ui.configuration_panel","text":"Configuration panel.","title":"configuration_panel"},{"location":"code-documentation/ui/#QuickOSM.ui.configuration_panel.ConfigurationPanel","text":"Final implementation for the panel.","title":"ConfigurationPanel"},{"location":"code-documentation/ui/#QuickOSM.ui.configuration_panel.ConfigurationPanel.set_server_nominatim_api","text":"Save the new Nominatim server.","title":"set_server_nominatim_api()"},{"location":"code-documentation/ui/#QuickOSM.ui.configuration_panel.ConfigurationPanel.set_server_overpass_api","text":"Save the new Overpass server.","title":"set_server_overpass_api()"},{"location":"code-documentation/ui/#QuickOSM.ui.configuration_panel.ConfigurationPanel.setup_panel","text":"Set UI related the configuration panel.","title":"setup_panel()"},{"location":"code-documentation/ui/#QuickOSM.ui.custom_table","text":"Set up and manage a custum table widget.","title":"custom_table"},{"location":"code-documentation/ui/#QuickOSM.ui.custom_table.TableKeyValue","text":"Handle the keys/values parameters.","title":"TableKeyValue"},{"location":"code-documentation/ui/#QuickOSM.ui.custom_table.TableKeyValue.__init__","text":"Constructor","title":"__init__()"},{"location":"code-documentation/ui/#QuickOSM.ui.custom_table.TableKeyValue.add_row_to_table","text":"Add a row in the table widget.","title":"add_row_to_table()"},{"location":"code-documentation/ui/#QuickOSM.ui.custom_table.TableKeyValue.choice_preset","text":"Fill the table with the keys/values from the preset.","title":"choice_preset()"},{"location":"code-documentation/ui/#QuickOSM.ui.custom_table.TableKeyValue.fill_table","text":"Fill the table with custom parameters.","title":"fill_table()"},{"location":"code-documentation/ui/#QuickOSM.ui.custom_table.TableKeyValue.gather_couple","text":"Gather the keys and values parameters","title":"gather_couple()"},{"location":"code-documentation/ui/#QuickOSM.ui.custom_table.TableKeyValue.key_edited","text":"Add values to the combobox according to the key.","title":"key_edited()"},{"location":"code-documentation/ui/#QuickOSM.ui.custom_table.TableKeyValue.prepare_button","text":"Set up the buttons for a row in the table widget.","title":"prepare_button()"},{"location":"code-documentation/ui/#QuickOSM.ui.custom_table.TableKeyValue.prepare_key_field","text":"Set up the key field for a row in the table widget.","title":"prepare_key_field()"},{"location":"code-documentation/ui/#QuickOSM.ui.custom_table.TableKeyValue.prepare_type_multi_request","text":"Set up the choice of multi request type for a row in the table widget.","title":"prepare_type_multi_request()"},{"location":"code-documentation/ui/#QuickOSM.ui.custom_table.TableKeyValue.prepare_value_field","text":"Set up the value field for a row in the table widget.","title":"prepare_value_field()"},{"location":"code-documentation/ui/#QuickOSM.ui.custom_table.TableKeyValue.remove_selection","text":"Remove the selected row from the table.","title":"remove_selection()"},{"location":"code-documentation/ui/#QuickOSM.ui.custom_table.TableKeyValue.set_couple","text":"Set the couple parameter","title":"set_couple()"},{"location":"code-documentation/ui/#QuickOSM.ui.custom_table.TableKeyValue.setup_preset","text":"Set up the preset","title":"setup_preset()"},{"location":"code-documentation/ui/#QuickOSM.ui.custom_table.TableKeyValue.setup_table","text":"Set up the table","title":"setup_table()"},{"location":"code-documentation/ui/#QuickOSM.ui.custom_table.TableKeyValue.update_friendly","text":"Updates the QuickQuery friendly label (label_qq_friendly).","title":"update_friendly()"},{"location":"code-documentation/ui/#QuickOSM.ui.dialog","text":"Main dialog of QuickOSM.","title":"dialog"},{"location":"code-documentation/ui/#QuickOSM.ui.dialog.Dialog","text":"Main class about the dialog of the plugin","title":"Dialog"},{"location":"code-documentation/ui/#QuickOSM.ui.dialog.Dialog.iface","text":"Get iface.","title":"iface"},{"location":"code-documentation/ui/#QuickOSM.ui.dialog.Dialog.__init__","text":"Constructor.","title":"__init__()"},{"location":"code-documentation/ui/#QuickOSM.ui.dialog.Dialog.display_critical_exception","text":"Display others exceptions, these are criticals. They are not managed by QuickOSM so it's a bug from the plugin. Parameters: Name Type Description Default exception BaseException The exception to display. required","title":"display_critical_exception()"},{"location":"code-documentation/ui/#QuickOSM.ui.dialog.Dialog.display_message_bar","text":"Display a message. Parameters: Name Type Description Default title str Title of the message. required message str The message. None level MessageLevel A QGIS error level. 0 duration int Duration in second. 5 open_logs bool If we need to add a button for the log panel. False more_details str The message to display in the \"More button\". None","title":"display_message_bar()"},{"location":"code-documentation/ui/#QuickOSM.ui.dialog.Dialog.display_quickosm_exception","text":"Display QuickOSM exceptions. These exceptions are been raised by QuickOSM itself. It should be an error from the user. Parameters: Name Type Description Default exception QuickOsmException The exception to display. required","title":"display_quickosm_exception()"},{"location":"code-documentation/ui/#QuickOSM.ui.dialog.Dialog.eventFilter","text":"Set up a custom event to avoid scroll","title":"eventFilter()"},{"location":"code-documentation/ui/#QuickOSM.ui.dialog.Dialog.reset_form","text":"Reset all the GUI to default state.","title":"reset_form()"},{"location":"code-documentation/ui/#QuickOSM.ui.dialog.Dialog.set_progress_percentage","text":"Slot to update percentage during process.","title":"set_progress_percentage()"},{"location":"code-documentation/ui/#QuickOSM.ui.dialog.Dialog.set_progress_text","text":"Slot to update text during process.","title":"set_progress_text()"},{"location":"code-documentation/ui/#QuickOSM.ui.edit_preset","text":"Dialog that edit a preset","title":"edit_preset"},{"location":"code-documentation/ui/#QuickOSM.ui.edit_preset.EditPreset","text":"Dialog that edit a preset","title":"EditPreset"},{"location":"code-documentation/ui/#QuickOSM.ui.edit_preset.EditPreset.__init__","text":"Constructor.","title":"__init__()"},{"location":"code-documentation/ui/#QuickOSM.ui.edit_preset.EditPreset.add_query","text":"Add a query in the preset","title":"add_query()"},{"location":"code-documentation/ui/#QuickOSM.ui.edit_preset.EditPreset.change_query","text":"Display the selected query in the view.","title":"change_query()"},{"location":"code-documentation/ui/#QuickOSM.ui.edit_preset.EditPreset.change_type_preset","text":"Update the form according the preset type.","title":"change_type_preset()"},{"location":"code-documentation/ui/#QuickOSM.ui.edit_preset.EditPreset.data_filling_form","text":"Writing the form with data from preset","title":"data_filling_form()"},{"location":"code-documentation/ui/#QuickOSM.ui.edit_preset.EditPreset.delete_query","text":"Delete a query in the preset","title":"delete_query()"},{"location":"code-documentation/ui/#QuickOSM.ui.edit_preset.EditPreset.disable_enable_format","text":"Enable only if the directory is set.","title":"disable_enable_format()"},{"location":"code-documentation/ui/#QuickOSM.ui.edit_preset.EditPreset.end_show_extent","text":"End the show of the extent.","title":"end_show_extent()"},{"location":"code-documentation/ui/#QuickOSM.ui.edit_preset.EditPreset.gather_general_parameters","text":"Save the general parameters.","title":"gather_general_parameters()"},{"location":"code-documentation/ui/#QuickOSM.ui.edit_preset.EditPreset.gather_parameters","text":"Save the parameters.","title":"gather_parameters()"},{"location":"code-documentation/ui/#QuickOSM.ui.edit_preset.EditPreset.item_context","text":"Set context submenu to delete item in the list.","title":"item_context()"},{"location":"code-documentation/ui/#QuickOSM.ui.edit_preset.EditPreset.rename_query","text":"Rename a query in the preset","title":"rename_query()"},{"location":"code-documentation/ui/#QuickOSM.ui.edit_preset.EditPreset.show_extent_canvas","text":"Show the extent in the canvas","title":"show_extent_canvas()"},{"location":"code-documentation/ui/#QuickOSM.ui.edit_preset.EditPreset.update_qml_format","text":"Update the explanation of the qml file name format.","title":"update_qml_format()"},{"location":"code-documentation/ui/#QuickOSM.ui.edit_preset.EditPreset.validate","text":"Update the preset","title":"validate()"},{"location":"code-documentation/ui/#QuickOSM.ui.edit_preset.EditPreset.verification_delete_query","text":"Delete a query in the preset","title":"verification_delete_query()"},{"location":"code-documentation/ui/#QuickOSM.ui.map_preset_panel","text":"Panel OSM map preset class.","title":"map_preset_panel"},{"location":"code-documentation/ui/#QuickOSM.ui.map_preset_panel.MapPresetPanel","text":"Implementation of the map preset panel.","title":"MapPresetPanel"},{"location":"code-documentation/ui/#QuickOSM.ui.map_preset_panel.MapPresetPanel.__init__","text":"Constructor","title":"__init__()"},{"location":"code-documentation/ui/#QuickOSM.ui.map_preset_panel.MapPresetPanel._run_saved_query","text":"Run a saved query(ies).","title":"_run_saved_query()"},{"location":"code-documentation/ui/#QuickOSM.ui.map_preset_panel.MapPresetPanel.disable_enable_location","text":"Enable only when it is a basic preset.","title":"disable_enable_location()"},{"location":"code-documentation/ui/#QuickOSM.ui.map_preset_panel.MapPresetPanel.edit_preset","text":"Open a dialog to edit the preset","title":"edit_preset()"},{"location":"code-documentation/ui/#QuickOSM.ui.map_preset_panel.MapPresetPanel.prepare_run","text":"Prepare the data before running the process.","title":"prepare_run()"},{"location":"code-documentation/ui/#QuickOSM.ui.map_preset_panel.MapPresetPanel.query_type_updated","text":"Update the ui when the query type is modified.","title":"query_type_updated()"},{"location":"code-documentation/ui/#QuickOSM.ui.map_preset_panel.MapPresetPanel.remove_preset","text":"Remove a preset.","title":"remove_preset()"},{"location":"code-documentation/ui/#QuickOSM.ui.map_preset_panel.MapPresetPanel.select_default","text":"Update the panel knowing a default preset is selected.","title":"select_default()"},{"location":"code-documentation/ui/#QuickOSM.ui.map_preset_panel.MapPresetPanel.select_personal","text":"Update the panel knowing a personal preset is selected.","title":"select_personal()"},{"location":"code-documentation/ui/#QuickOSM.ui.map_preset_panel.MapPresetPanel.setup_default_preset","text":"Setup the display of presets","title":"setup_default_preset()"},{"location":"code-documentation/ui/#QuickOSM.ui.map_preset_panel.MapPresetPanel.setup_panel","text":"Function to set custom UI for some panels.","title":"setup_panel()"},{"location":"code-documentation/ui/#QuickOSM.ui.map_preset_panel.MapPresetPanel.update_personal_preset_view","text":"Update the presets displayed.","title":"update_personal_preset_view()"},{"location":"code-documentation/ui/#QuickOSM.ui.map_preset_panel.MapPresetPanel.verification_remove_preset","text":"Verification of the removal a preset.","title":"verification_remove_preset()"},{"location":"code-documentation/ui/#QuickOSM.ui.osm_file_panel","text":"Configuration panel.","title":"osm_file_panel"},{"location":"code-documentation/ui/#QuickOSM.ui.osm_file_panel.OsmFilePanel","text":"Final implementation for the panel.","title":"OsmFilePanel"},{"location":"code-documentation/ui/#QuickOSM.ui.osm_file_panel.OsmFilePanel.__init__","text":"Constructor","title":"__init__()"},{"location":"code-documentation/ui/#QuickOSM.ui.osm_file_panel.OsmFilePanel._run","text":"Run the process","title":"_run()"},{"location":"code-documentation/ui/#QuickOSM.ui.osm_file_panel.OsmFilePanel.disable_enable_buttons","text":"Display enable only the suitable parameters.","title":"disable_enable_buttons()"},{"location":"code-documentation/ui/#QuickOSM.ui.osm_file_panel.OsmFilePanel.gather_values","text":"Retrieval of the values set by the user.","title":"gather_values()"},{"location":"code-documentation/ui/#QuickOSM.ui.osm_file_panel.OsmFilePanel.generate_sql","text":"Generate the subset query.","title":"generate_sql()"},{"location":"code-documentation/ui/#QuickOSM.ui.osm_file_panel.OsmFilePanel.setup_panel","text":"Setup the panel","title":"setup_panel()"},{"location":"code-documentation/ui/#QuickOSM.ui.query_panel","text":"Panel OSM base class.","title":"query_panel"},{"location":"code-documentation/ui/#QuickOSM.ui.query_panel.QueryPanel","text":"Final implementation for the panel.","title":"QueryPanel"},{"location":"code-documentation/ui/#QuickOSM.ui.query_panel.QueryPanel.allow_nominatim_or_extent","text":"Disable or enable radio buttons if nominatim or extent. Disable buttons if the query is empty.","title":"allow_nominatim_or_extent()"},{"location":"code-documentation/ui/#QuickOSM.ui.query_panel.QueryPanel.gather_values","text":"Retrieval of the values set by the user.","title":"gather_values()"},{"location":"code-documentation/ui/#QuickOSM.ui.query_panel.QueryPanel.generate_query","text":"Generate the query as final.","title":"generate_query()"},{"location":"code-documentation/ui/#QuickOSM.ui.query_panel.QueryPanel.query_language_check","text":"Check the wanted language.","title":"query_language_check()"},{"location":"code-documentation/ui/#QuickOSM.ui.query_panel.QueryPanel.query_type_updated","text":"Update the ui when the query type is modified.","title":"query_type_updated()"},{"location":"code-documentation/ui/#QuickOSM.ui.query_panel.QueryPanel.setup_panel","text":"Function to set custom UI for some panels.","title":"setup_panel()"},{"location":"code-documentation/ui/#QuickOSM.ui.quick_query_panel","text":"Panel OSM base class.","title":"quick_query_panel"},{"location":"code-documentation/ui/#QuickOSM.ui.quick_query_panel.QuickQueryPanel","text":"Final implementation for the panel.","title":"QuickQueryPanel"},{"location":"code-documentation/ui/#QuickOSM.ui.quick_query_panel.QuickQueryPanel.__init__","text":"Constructor","title":"__init__()"},{"location":"code-documentation/ui/#QuickOSM.ui.quick_query_panel.QuickQueryPanel._run","text":"Process for running the query.","title":"_run()"},{"location":"code-documentation/ui/#QuickOSM.ui.quick_query_panel.QuickQueryPanel._run_saved_query","text":"Run a saved query(ies).","title":"_run_saved_query()"},{"location":"code-documentation/ui/#QuickOSM.ui.quick_query_panel.QuickQueryPanel.gather_values","text":"Retrieval of the values set by the user.","title":"gather_values()"},{"location":"code-documentation/ui/#QuickOSM.ui.quick_query_panel.QuickQueryPanel.query_language_oql","text":"Update the wanted language.","title":"query_language_oql()"},{"location":"code-documentation/ui/#QuickOSM.ui.quick_query_panel.QuickQueryPanel.query_language_xml","text":"Update the wanted language.","title":"query_language_xml()"},{"location":"code-documentation/ui/#QuickOSM.ui.quick_query_panel.QuickQueryPanel.query_type_updated","text":"Update the ui when the query type is modified.","title":"query_type_updated()"},{"location":"code-documentation/ui/#QuickOSM.ui.quick_query_panel.QuickQueryPanel.save_add_existing","text":"Verify and ask the save destination.","title":"save_add_existing()"},{"location":"code-documentation/ui/#QuickOSM.ui.quick_query_panel.QuickQueryPanel.save_history_preset","text":"Save a query from history to preset.","title":"save_history_preset()"},{"location":"code-documentation/ui/#QuickOSM.ui.quick_query_panel.QuickQueryPanel.save_new","text":"Verify the save destination.","title":"save_new()"},{"location":"code-documentation/ui/#QuickOSM.ui.quick_query_panel.QuickQueryPanel.save_query","text":"Save a query in a preset.","title":"save_query()"},{"location":"code-documentation/ui/#QuickOSM.ui.quick_query_panel.QuickQueryPanel.select_preset","text":"Launch the wizard.","title":"select_preset()"},{"location":"code-documentation/ui/#QuickOSM.ui.quick_query_panel.QuickQueryPanel.setup_panel","text":"Function to set custom UI for some panels.","title":"setup_panel()"},{"location":"code-documentation/ui/#QuickOSM.ui.quick_query_panel.QuickQueryPanel.show_query","text":"Show the query in the main window.","title":"show_query()"},{"location":"code-documentation/ui/#QuickOSM.ui.quick_query_panel.QuickQueryPanel.update_friendly","text":"Updates the QuickQuery friendly label (label_qq_friendly).","title":"update_friendly()"},{"location":"code-documentation/ui/#QuickOSM.ui.quick_query_panel.QuickQueryPanel.update_history_view","text":"Update the history view.","title":"update_history_view()"},{"location":"code-documentation/ui/#QuickOSM.ui.wizard","text":"Wizard of the preset.","title":"wizard"},{"location":"code-documentation/ui/#QuickOSM.ui.wizard.Wizard","text":"Dialog that help with the preset","title":"Wizard"},{"location":"code-documentation/ui/#QuickOSM.ui.wizard.Wizard.__init__","text":"Constructor.","title":"__init__()"},{"location":"code-documentation/ui/#QuickOSM.ui.wizard.Wizard.end_search","text":"Process the end of the dialog","title":"end_search()"},{"location":"code-documentation/ui/#QuickOSM.ui.wizard.Wizard.search_edited","text":"Show or hide items","title":"search_edited()"},{"location":"code-documentation/ui/#QuickOSM.ui.xml_highlighter","text":"Query Highlighter class.","title":"xml_highlighter"},{"location":"code-documentation/ui/#QuickOSM.ui.xml_highlighter.QueryHighlighter","text":"Query Highlighter class.","title":"QueryHighlighter"},{"location":"code-documentation/ui/#QuickOSM.ui.xml_highlighter.QueryHighlighter.highlightBlock","text":"Highlight of a comment block","title":"highlightBlock()"},{"location":"code-documentation/ui/#QuickOSM.ui.xml_highlighter.QueryHighlighter.match_multiline","text":"Do highlighting of multi-line strings. delimiter should be a QRegExp for triple-single-quotes or triple-double-quotes, and in_state should be a unique integer to represent the corresponding state changes when inside those strings. Returns True if we're still inside a multi-line string when this function is finished.","title":"match_multiline()"},{"location":"processing/","text":"Processing # Run QuickOSM process with a raw query # This algorithm launches all the QuickOSM process from a raw query. The url is built with the parameters, the file is downloaded and treated. Parameters # ID Description Type Info Required Advanced Option QUERY Query String A XML or OQL query to be sent to the Overpass API. It can contain some {{}} tokens. \u2713 TIMEOUT Timeout Integer The timeout to use for the overpass api connexion \u2713 \u2713 Default: 25 Type: Integer Min: 5.0, Max: 1.7976931348623157e+308 EXTENT Extent, if \"{{bbox}}\" in the query Extent If the query has a {{bbox}} token, this extent will be used for replacement. \u2713 SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter AREA Area (if you want to override {{geocodeArea}} in the query) String The query is generated in the OQL format. \u2713 FILE Output file String Path to a geoPackage where the result will be saved Outputs # ID Description Type Info OUTPUT_POINTS Layer with a point geometry QgsVectorLayer OUTPUT_LINES Layer with a line geometry QgsVectorLayer OUTPUT_MULTILINESTRINGS Layer with a multi line geometry QgsVectorLayer OUTPUT_MULTIPOLYGONS Layer with a polygon geometry QgsVectorLayer Run QuickOSM process with a not spatial query # This algorithm launches all the QuickOSM process from a not spatial query. The url is built with the parameters, the file is downloaded and treated. Parameters # ID Description Type Info Required Advanced Option KEY Key, default to all keys String The OSM key to use. It can be empty and it will default to all keys. VALUE Value, default to all values String The OSM value to use. It can be empty and it will default to all values. TIMEOUT Timeout Integer The timeout to use for the overpass api connexion \u2713 \u2713 Default: 25 Type: Integer Min: 5.0, Max: 1.7976931348623157e+308 SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter FILE Output file String Path to a geoPackage where the result will be saved Outputs # ID Description Type Info OUTPUT_POINTS Layer with a point geometry QgsVectorLayer OUTPUT_LINES Layer with a line geometry QgsVectorLayer OUTPUT_MULTILINESTRINGS Layer with a multi line geometry QgsVectorLayer OUTPUT_MULTIPOLYGONS Layer with a polygon geometry QgsVectorLayer Run QuickOSM process with an 'in area' query # This algorithm launches all the QuickOSM process from an 'in area' query. The url is built with the parameters, the file is downloaded and treated. Parameters # ID Description Type Info Required Advanced Option KEY Key, default to all keys String The OSM key to use. It can be empty and it will default to all keys. VALUE Value, default to all values String The OSM value to use. It can be empty and it will default to all values. AREA Around the area String The name of a place, a first query to the Nominatim API will be executed to fetch the OSM ID. A WKT Point string is accepted as well. \u2713 TIMEOUT Timeout Integer The timeout to use for the overpass api connexion \u2713 \u2713 Default: 25 Type: Integer Min: 5.0, Max: 1.7976931348623157e+308 SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter FILE Output file String Path to a geoPackage where the result will be saved Outputs # ID Description Type Info OUTPUT_POINTS Layer with a point geometry QgsVectorLayer OUTPUT_LINES Layer with a line geometry QgsVectorLayer OUTPUT_MULTILINESTRINGS Layer with a multi line geometry QgsVectorLayer OUTPUT_MULTIPOLYGONS Layer with a polygon geometry QgsVectorLayer Run QuickOSM process with an 'around area' query # This algorithm launches all the QuickOSM process from an 'around area' query. The url is built with the parameters, the file is downloaded and treated. Parameters # ID Description Type Info Required Advanced Option KEY Key, default to all keys String The OSM key to use. It can be empty and it will default to all keys. VALUE Value, default to all values String The OSM value to use. It can be empty and it will default to all values. AREA Around the area String The name of a place, a first query to the Nominatim API will be executed to fetch the OSM ID. A WKT Point string is accepted as well. \u2713 DISTANCE Distance (meters) Number The distance to use when doing the buffering around the named area. The distance must be in meters. \u2713 Default: 1000 Type: Integer Min: 1.0, Max: 1.7976931348623157e+308 TIMEOUT Timeout Integer The timeout to use for the overpass api connexion \u2713 \u2713 Default: 25 Type: Integer Min: 5.0, Max: 1.7976931348623157e+308 SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter FILE Output file String Path to a geoPackage where the result will be saved Outputs # ID Description Type Info OUTPUT_POINTS Layer with a point geometry QgsVectorLayer OUTPUT_LINES Layer with a line geometry QgsVectorLayer OUTPUT_MULTILINESTRINGS Layer with a multi line geometry QgsVectorLayer OUTPUT_MULTIPOLYGONS Layer with a polygon geometry QgsVectorLayer Run QuickOSM process with an 'extent' query # This algorithm launches all the QuickOSM process from an 'extent' query. The url is built with the parameters, the file is downloaded and treated. Parameters # ID Description Type Info Required Advanced Option KEY Key, default to all keys String The OSM key to use. It can be empty and it will default to all keys. VALUE Value, default to all values String The OSM value to use. It can be empty and it will default to all values. EXTENT Extent Extent The extent as a rectangle to use when building the query. \u2713 TIMEOUT Timeout Integer The timeout to use for the overpass api connexion \u2713 \u2713 Default: 25 Type: Integer Min: 5.0, Max: 1.7976931348623157e+308 SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter FILE Output file String Path to a geoPackage where the result will be saved Outputs # ID Description Type Info OUTPUT_POINTS Layer with a point geometry QgsVectorLayer OUTPUT_LINES Layer with a line geometry QgsVectorLayer OUTPUT_MULTILINESTRINGS Layer with a multi line geometry QgsVectorLayer OUTPUT_MULTIPOLYGONS Layer with a polygon geometry QgsVectorLayer Advanced # Build query around an area # This algorithm builds a query and then encode it into the Overpass API URL. The \"Download File\" algorithm might be used after that to fetch the result. Parameters # ID Description Type Info Required Advanced Option KEY Key, default to all keys String The OSM key to use. It can be empty and it will default to all keys. VALUE Value, default to all values String The OSM value to use. It can be empty and it will default to all values. AREA Around the area String The name of a place, a first query to the Nominatim API will be executed to fetch the OSM ID. A WKT Point string is accepted as well. \u2713 DISTANCE Distance (meters) Number The distance to use when doing the buffering around the named area. The distance must be in meters. \u2713 Default: 1000 Type: Integer Min: 1.0, Max: 1.7976931348623157e+308 TIMEOUT Timeout Number The timeout to use for the Overpass API. \u2713 \u2713 Default: 25 Type: Integer Min: 5.0, Max: 1.7976931348623157e+308 SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter Outputs # ID Description Type Info OUTPUT_URL Query as encoded URL String The query is generated and encoded with the Overpass API URL. This output should be used in the File Downloader algorithm. OUTPUT_OQL_QUERY Raw query as OQL String The query is generated in the OQL format. Build query by attribute only # This algorithm builds a query and then encode it into the Overpass API URL. The \"Download File\" algorithm might be used after that to fetch the result. Parameters # ID Description Type Info Required Advanced Option KEY Key, default to all keys String The OSM key to use. It can be empty and it will default to all keys. VALUE Value, default to all values String The OSM value to use. It can be empty and it will default to all values. TIMEOUT Timeout Number The timeout to use for the Overpass API. \u2713 \u2713 Default: 25 Type: Integer Min: 5.0, Max: 1.7976931348623157e+308 SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter Outputs # ID Description Type Info OUTPUT_URL Query as encoded URL String The query is generated and encoded with the Overpass API URL. This output should be used in the File Downloader algorithm. OUTPUT_OQL_QUERY Raw query as OQL String The query is generated in the OQL format. Build query inside an extent # This algorithm builds a query and then encode it into the Overpass API URL. The \"Download File\" algorithm might be used after that to fetch the result. Parameters # ID Description Type Info Required Advanced Option KEY Key, default to all keys String The OSM key to use. It can be empty and it will default to all keys. VALUE Value, default to all values String The OSM value to use. It can be empty and it will default to all values. EXTENT Extent Extent The extent as a rectangle to use when building the query. \u2713 TIMEOUT Timeout Number The timeout to use for the Overpass API. \u2713 \u2713 Default: 25 Type: Integer Min: 5.0, Max: 1.7976931348623157e+308 SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter Outputs # ID Description Type Info OUTPUT_URL Query as encoded URL String The query is generated and encoded with the Overpass API URL. This output should be used in the File Downloader algorithm. OUTPUT_OQL_QUERY Raw query as OQL String The query is generated in the OQL format. Build query inside an area # This algorithm builds a query and then encode it into the Overpass API URL. The \"Download File\" algorithm might be used after that to fetch the result. Parameters # ID Description Type Info Required Advanced Option KEY Key, default to all keys String The OSM key to use. It can be empty and it will default to all keys. VALUE Value, default to all values String The OSM value to use. It can be empty and it will default to all values. AREA Inside the area String The name of the area. This will make a first query to the Nominatim API to fetch the OSM ID. \u2713 TIMEOUT Timeout Number The timeout to use for the Overpass API. \u2713 \u2713 Default: 25 Type: Integer Min: 5.0, Max: 1.7976931348623157e+308 SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter Outputs # ID Description Type Info OUTPUT_URL Query as encoded URL String The query is generated and encoded with the Overpass API URL. This output should be used in the File Downloader algorithm. OUTPUT_OQL_QUERY Raw query as OQL String The query is generated in the OQL format. Build raw query # A XML or OQL query to send to a Overpass API server. Parameters # ID Description Type Info Required Advanced Option QUERY Query String A XML or OQL query to be sent to the Overpass API. It can contains some {{}} tokens. \u2713 EXTENT Extent, if \"{{bbox}}\" in the query Extent If the query has a {{bbox}} token, this extent will be used for replacement. SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter AREA Area (if you want to override {{geocodeArea}} in the query) String The query is generated in the OQL format. \u2713 Outputs # ID Description Type Info OUTPUT_URL Query as encoded URL String OUTPUT_OQL_QUERY Raw query as OQL String Open sublayers from an OSM file # Open all sublayers from an OSM file. A custom OSM configuration file can be specified following the OGR documentation. This algorithm will not make a copy of the input file, it will only open it using OGR and custom INI file if provided. Parameters # ID Description Type Info Required Advanced Option FILE OSM file File The extension can be a OSM or PBF file. \u2713 OSM_CONF OSM configuration File The OGR OSM configuration file. This file is used to customize the import process about OSM tags. You should read the OGR documentation https://gdal.org/drivers/vector/osm.html Outputs # ID Description Type Info OUTPUT_POINTS Output points VectorLayer The point layer from the OGR OSM driver. OUTPUT_LINES Output lines VectorLayer The line layer from the OGR OSM driver. OUTPUT_MULTILINESTRINGS Output multilinestrings VectorLayer The multilinestrings layer from the OGR OSM driver. OUTPUT_MULTIPOLYGONS Output multipolygons VectorLayer The multipolygon layer from the OGR OSM driver. OUTPUT_OTHER_RELATIONS Output other relations VectorLayer The relation layer from the OGR OSM driver.","title":"Processing"},{"location":"processing/#processing","text":"","title":"Processing"},{"location":"processing/#run-quickosm-process-with-a-raw-query","text":"This algorithm launches all the QuickOSM process from a raw query. The url is built with the parameters, the file is downloaded and treated.","title":"Run QuickOSM process with a raw query"},{"location":"processing/#parameters","text":"ID Description Type Info Required Advanced Option QUERY Query String A XML or OQL query to be sent to the Overpass API. It can contain some {{}} tokens. \u2713 TIMEOUT Timeout Integer The timeout to use for the overpass api connexion \u2713 \u2713 Default: 25 Type: Integer Min: 5.0, Max: 1.7976931348623157e+308 EXTENT Extent, if \"{{bbox}}\" in the query Extent If the query has a {{bbox}} token, this extent will be used for replacement. \u2713 SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter AREA Area (if you want to override {{geocodeArea}} in the query) String The query is generated in the OQL format. \u2713 FILE Output file String Path to a geoPackage where the result will be saved","title":"Parameters"},{"location":"processing/#outputs","text":"ID Description Type Info OUTPUT_POINTS Layer with a point geometry QgsVectorLayer OUTPUT_LINES Layer with a line geometry QgsVectorLayer OUTPUT_MULTILINESTRINGS Layer with a multi line geometry QgsVectorLayer OUTPUT_MULTIPOLYGONS Layer with a polygon geometry QgsVectorLayer","title":"Outputs"},{"location":"processing/#run-quickosm-process-with-a-not-spatial-query","text":"This algorithm launches all the QuickOSM process from a not spatial query. The url is built with the parameters, the file is downloaded and treated.","title":"Run QuickOSM process with a not spatial query"},{"location":"processing/#parameters_1","text":"ID Description Type Info Required Advanced Option KEY Key, default to all keys String The OSM key to use. It can be empty and it will default to all keys. VALUE Value, default to all values String The OSM value to use. It can be empty and it will default to all values. TIMEOUT Timeout Integer The timeout to use for the overpass api connexion \u2713 \u2713 Default: 25 Type: Integer Min: 5.0, Max: 1.7976931348623157e+308 SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter FILE Output file String Path to a geoPackage where the result will be saved","title":"Parameters"},{"location":"processing/#outputs_1","text":"ID Description Type Info OUTPUT_POINTS Layer with a point geometry QgsVectorLayer OUTPUT_LINES Layer with a line geometry QgsVectorLayer OUTPUT_MULTILINESTRINGS Layer with a multi line geometry QgsVectorLayer OUTPUT_MULTIPOLYGONS Layer with a polygon geometry QgsVectorLayer","title":"Outputs"},{"location":"processing/#run-quickosm-process-with-an-in-area-query","text":"This algorithm launches all the QuickOSM process from an 'in area' query. The url is built with the parameters, the file is downloaded and treated.","title":"Run QuickOSM process with an 'in area' query"},{"location":"processing/#parameters_2","text":"ID Description Type Info Required Advanced Option KEY Key, default to all keys String The OSM key to use. It can be empty and it will default to all keys. VALUE Value, default to all values String The OSM value to use. It can be empty and it will default to all values. AREA Around the area String The name of a place, a first query to the Nominatim API will be executed to fetch the OSM ID. A WKT Point string is accepted as well. \u2713 TIMEOUT Timeout Integer The timeout to use for the overpass api connexion \u2713 \u2713 Default: 25 Type: Integer Min: 5.0, Max: 1.7976931348623157e+308 SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter FILE Output file String Path to a geoPackage where the result will be saved","title":"Parameters"},{"location":"processing/#outputs_2","text":"ID Description Type Info OUTPUT_POINTS Layer with a point geometry QgsVectorLayer OUTPUT_LINES Layer with a line geometry QgsVectorLayer OUTPUT_MULTILINESTRINGS Layer with a multi line geometry QgsVectorLayer OUTPUT_MULTIPOLYGONS Layer with a polygon geometry QgsVectorLayer","title":"Outputs"},{"location":"processing/#run-quickosm-process-with-an-around-area-query","text":"This algorithm launches all the QuickOSM process from an 'around area' query. The url is built with the parameters, the file is downloaded and treated.","title":"Run QuickOSM process with an 'around area' query"},{"location":"processing/#parameters_3","text":"ID Description Type Info Required Advanced Option KEY Key, default to all keys String The OSM key to use. It can be empty and it will default to all keys. VALUE Value, default to all values String The OSM value to use. It can be empty and it will default to all values. AREA Around the area String The name of a place, a first query to the Nominatim API will be executed to fetch the OSM ID. A WKT Point string is accepted as well. \u2713 DISTANCE Distance (meters) Number The distance to use when doing the buffering around the named area. The distance must be in meters. \u2713 Default: 1000 Type: Integer Min: 1.0, Max: 1.7976931348623157e+308 TIMEOUT Timeout Integer The timeout to use for the overpass api connexion \u2713 \u2713 Default: 25 Type: Integer Min: 5.0, Max: 1.7976931348623157e+308 SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter FILE Output file String Path to a geoPackage where the result will be saved","title":"Parameters"},{"location":"processing/#outputs_3","text":"ID Description Type Info OUTPUT_POINTS Layer with a point geometry QgsVectorLayer OUTPUT_LINES Layer with a line geometry QgsVectorLayer OUTPUT_MULTILINESTRINGS Layer with a multi line geometry QgsVectorLayer OUTPUT_MULTIPOLYGONS Layer with a polygon geometry QgsVectorLayer","title":"Outputs"},{"location":"processing/#run-quickosm-process-with-an-extent-query","text":"This algorithm launches all the QuickOSM process from an 'extent' query. The url is built with the parameters, the file is downloaded and treated.","title":"Run QuickOSM process with an 'extent' query"},{"location":"processing/#parameters_4","text":"ID Description Type Info Required Advanced Option KEY Key, default to all keys String The OSM key to use. It can be empty and it will default to all keys. VALUE Value, default to all values String The OSM value to use. It can be empty and it will default to all values. EXTENT Extent Extent The extent as a rectangle to use when building the query. \u2713 TIMEOUT Timeout Integer The timeout to use for the overpass api connexion \u2713 \u2713 Default: 25 Type: Integer Min: 5.0, Max: 1.7976931348623157e+308 SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter FILE Output file String Path to a geoPackage where the result will be saved","title":"Parameters"},{"location":"processing/#outputs_4","text":"ID Description Type Info OUTPUT_POINTS Layer with a point geometry QgsVectorLayer OUTPUT_LINES Layer with a line geometry QgsVectorLayer OUTPUT_MULTILINESTRINGS Layer with a multi line geometry QgsVectorLayer OUTPUT_MULTIPOLYGONS Layer with a polygon geometry QgsVectorLayer","title":"Outputs"},{"location":"processing/#advanced","text":"","title":"Advanced"},{"location":"processing/#build-query-around-an-area","text":"This algorithm builds a query and then encode it into the Overpass API URL. The \"Download File\" algorithm might be used after that to fetch the result.","title":"Build query around an area"},{"location":"processing/#parameters_5","text":"ID Description Type Info Required Advanced Option KEY Key, default to all keys String The OSM key to use. It can be empty and it will default to all keys. VALUE Value, default to all values String The OSM value to use. It can be empty and it will default to all values. AREA Around the area String The name of a place, a first query to the Nominatim API will be executed to fetch the OSM ID. A WKT Point string is accepted as well. \u2713 DISTANCE Distance (meters) Number The distance to use when doing the buffering around the named area. The distance must be in meters. \u2713 Default: 1000 Type: Integer Min: 1.0, Max: 1.7976931348623157e+308 TIMEOUT Timeout Number The timeout to use for the Overpass API. \u2713 \u2713 Default: 25 Type: Integer Min: 5.0, Max: 1.7976931348623157e+308 SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter","title":"Parameters"},{"location":"processing/#outputs_5","text":"ID Description Type Info OUTPUT_URL Query as encoded URL String The query is generated and encoded with the Overpass API URL. This output should be used in the File Downloader algorithm. OUTPUT_OQL_QUERY Raw query as OQL String The query is generated in the OQL format.","title":"Outputs"},{"location":"processing/#build-query-by-attribute-only","text":"This algorithm builds a query and then encode it into the Overpass API URL. The \"Download File\" algorithm might be used after that to fetch the result.","title":"Build query by attribute only"},{"location":"processing/#parameters_6","text":"ID Description Type Info Required Advanced Option KEY Key, default to all keys String The OSM key to use. It can be empty and it will default to all keys. VALUE Value, default to all values String The OSM value to use. It can be empty and it will default to all values. TIMEOUT Timeout Number The timeout to use for the Overpass API. \u2713 \u2713 Default: 25 Type: Integer Min: 5.0, Max: 1.7976931348623157e+308 SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter","title":"Parameters"},{"location":"processing/#outputs_6","text":"ID Description Type Info OUTPUT_URL Query as encoded URL String The query is generated and encoded with the Overpass API URL. This output should be used in the File Downloader algorithm. OUTPUT_OQL_QUERY Raw query as OQL String The query is generated in the OQL format.","title":"Outputs"},{"location":"processing/#build-query-inside-an-extent","text":"This algorithm builds a query and then encode it into the Overpass API URL. The \"Download File\" algorithm might be used after that to fetch the result.","title":"Build query inside an extent"},{"location":"processing/#parameters_7","text":"ID Description Type Info Required Advanced Option KEY Key, default to all keys String The OSM key to use. It can be empty and it will default to all keys. VALUE Value, default to all values String The OSM value to use. It can be empty and it will default to all values. EXTENT Extent Extent The extent as a rectangle to use when building the query. \u2713 TIMEOUT Timeout Number The timeout to use for the Overpass API. \u2713 \u2713 Default: 25 Type: Integer Min: 5.0, Max: 1.7976931348623157e+308 SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter","title":"Parameters"},{"location":"processing/#outputs_7","text":"ID Description Type Info OUTPUT_URL Query as encoded URL String The query is generated and encoded with the Overpass API URL. This output should be used in the File Downloader algorithm. OUTPUT_OQL_QUERY Raw query as OQL String The query is generated in the OQL format.","title":"Outputs"},{"location":"processing/#build-query-inside-an-area","text":"This algorithm builds a query and then encode it into the Overpass API URL. The \"Download File\" algorithm might be used after that to fetch the result.","title":"Build query inside an area"},{"location":"processing/#parameters_8","text":"ID Description Type Info Required Advanced Option KEY Key, default to all keys String The OSM key to use. It can be empty and it will default to all keys. VALUE Value, default to all values String The OSM value to use. It can be empty and it will default to all values. AREA Inside the area String The name of the area. This will make a first query to the Nominatim API to fetch the OSM ID. \u2713 TIMEOUT Timeout Number The timeout to use for the Overpass API. \u2713 \u2713 Default: 25 Type: Integer Min: 5.0, Max: 1.7976931348623157e+308 SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter","title":"Parameters"},{"location":"processing/#outputs_8","text":"ID Description Type Info OUTPUT_URL Query as encoded URL String The query is generated and encoded with the Overpass API URL. This output should be used in the File Downloader algorithm. OUTPUT_OQL_QUERY Raw query as OQL String The query is generated in the OQL format.","title":"Outputs"},{"location":"processing/#build-raw-query","text":"A XML or OQL query to send to a Overpass API server.","title":"Build raw query"},{"location":"processing/#parameters_9","text":"ID Description Type Info Required Advanced Option QUERY Query String A XML or OQL query to be sent to the Overpass API. It can contains some {{}} tokens. \u2713 EXTENT Extent, if \"{{bbox}}\" in the query Extent If the query has a {{bbox}} token, this extent will be used for replacement. SERVER Overpass server String The Overpass API server to use to build the encoded URL. \u2713 \u2713 Default: https://lz4.overpass-api.de/api/interpreter AREA Area (if you want to override {{geocodeArea}} in the query) String The query is generated in the OQL format. \u2713","title":"Parameters"},{"location":"processing/#outputs_9","text":"ID Description Type Info OUTPUT_URL Query as encoded URL String OUTPUT_OQL_QUERY Raw query as OQL String","title":"Outputs"},{"location":"processing/#open-sublayers-from-an-osm-file","text":"Open all sublayers from an OSM file. A custom OSM configuration file can be specified following the OGR documentation. This algorithm will not make a copy of the input file, it will only open it using OGR and custom INI file if provided.","title":"Open sublayers from an OSM file"},{"location":"processing/#parameters_10","text":"ID Description Type Info Required Advanced Option FILE OSM file File The extension can be a OSM or PBF file. \u2713 OSM_CONF OSM configuration File The OGR OSM configuration file. This file is used to customize the import process about OSM tags. You should read the OGR documentation https://gdal.org/drivers/vector/osm.html","title":"Parameters"},{"location":"processing/#outputs_10","text":"ID Description Type Info OUTPUT_POINTS Output points VectorLayer The point layer from the OGR OSM driver. OUTPUT_LINES Output lines VectorLayer The line layer from the OGR OSM driver. OUTPUT_MULTILINESTRINGS Output multilinestrings VectorLayer The multilinestrings layer from the OGR OSM driver. OUTPUT_MULTIPOLYGONS Output multipolygons VectorLayer The multipolygon layer from the OGR OSM driver. OUTPUT_OTHER_RELATIONS Output other relations VectorLayer The relation layer from the OGR OSM driver.","title":"Outputs"},{"location":"user-guide/end-user/","text":"Using the GUI # Map features # To have an overview of all keys and values, have a look to the OpenStreetMap wiki page . Tip You can write what ever you want in the Key and Value fields. OSM data model doesn't restrict any keys or values. Tip If you want to query all data, you can let key and value empty. Video # (Outdated) Watch the Video tutorial Quick how to # Install the QuickOSM plugin : # QGIS Plugins menu \u2192 Manage and Install Plugins\u2026 Search for QuickOSM and select it Install Plugin Try a quick query : # Vector menu \u2192 QuickOSM \u2192 QuickOSM In the key field enter amenity In the value field enter toilets Set the name of the town/village to London Run Query The Overpass API takes a few seconds to respond, and after that you should get new point and polygon layers for the toilets of London! (nodes and ways in OpenStreetMap with the amenity = toilet tag on them) Try to run a preset # Vector menu \u2192 QuickOSM \u2192 QuickOSM Go in Map preset panel Click on preset named Urban Set the name of the town/village to Montpellier Run preset The Overpass API takes a few seconds to respond, and after that you should get new lines and polygon layers that match roads and buildings in Montpellier with a custom style. Try to save and edit a preset # Vector menu \u2192 QuickOSM \u2192 QuickOSM In the key field enter amenity In the value field enter theater Set the name of the town/village to Paris Save query in a new preset Click on edit button in preset named amenity_theater_Paris In the preset name field enter Culture In the description field enter Theater and museum in Paris Add anew query Right click on Query2 \u2192 Rename \u2192 enter Museum In the Layer name field enter tourism_museum_Paris In the key field enter tourism In the value field enter museum In the area field enter Paris Validate You now have a preset that download the theaters and then the museums. You don't need to fill the parameter to run the preset, but you can if you want the theaters and museums in another place than Paris. Custom API server # If you want to add some customs servers, add a file called custom_config.json in your profile_name/QuickOSM folder and add this template in it : 1 2 3 4 5 6 7 8 { \"overpass_servers\" : [ \"http://your_custom_url.com/api/\" ], \"nominatim_servers\" : [ \"http://your_custom_url.com/search?\" ] } Both overpass_servers et nominatim_servers are optionals. If you want to add only one of them, you don't need to write the other. QuickOSM will add your custom list to the list below. To find the profile folder, go in Settings \u2192 Profile \u2192 Open active profile folder . Warning Do not change any files in profile_name/python/plugins/QuickOSM for adding a server. Your changes will be lost everytime the plugin is upgraded. A pull request is more than welcome if you want to add your server in QuickOSM core by updating this list below.","title":"End user"},{"location":"user-guide/end-user/#using-the-gui","text":"","title":"Using the GUI"},{"location":"user-guide/end-user/#map-features","text":"To have an overview of all keys and values, have a look to the OpenStreetMap wiki page . Tip You can write what ever you want in the Key and Value fields. OSM data model doesn't restrict any keys or values. Tip If you want to query all data, you can let key and value empty.","title":"Map features"},{"location":"user-guide/end-user/#video","text":"(Outdated) Watch the Video tutorial","title":"Video"},{"location":"user-guide/end-user/#quick-how-to","text":"","title":"Quick how to"},{"location":"user-guide/end-user/#install-the-quickosm-plugin","text":"QGIS Plugins menu \u2192 Manage and Install Plugins\u2026 Search for QuickOSM and select it Install Plugin","title":"Install the QuickOSM plugin :"},{"location":"user-guide/end-user/#try-a-quick-query","text":"Vector menu \u2192 QuickOSM \u2192 QuickOSM In the key field enter amenity In the value field enter toilets Set the name of the town/village to London Run Query The Overpass API takes a few seconds to respond, and after that you should get new point and polygon layers for the toilets of London! (nodes and ways in OpenStreetMap with the amenity = toilet tag on them)","title":"Try a quick query :"},{"location":"user-guide/end-user/#try-to-run-a-preset","text":"Vector menu \u2192 QuickOSM \u2192 QuickOSM Go in Map preset panel Click on preset named Urban Set the name of the town/village to Montpellier Run preset The Overpass API takes a few seconds to respond, and after that you should get new lines and polygon layers that match roads and buildings in Montpellier with a custom style.","title":"Try to run a preset"},{"location":"user-guide/end-user/#try-to-save-and-edit-a-preset","text":"Vector menu \u2192 QuickOSM \u2192 QuickOSM In the key field enter amenity In the value field enter theater Set the name of the town/village to Paris Save query in a new preset Click on edit button in preset named amenity_theater_Paris In the preset name field enter Culture In the description field enter Theater and museum in Paris Add anew query Right click on Query2 \u2192 Rename \u2192 enter Museum In the Layer name field enter tourism_museum_Paris In the key field enter tourism In the value field enter museum In the area field enter Paris Validate You now have a preset that download the theaters and then the museums. You don't need to fill the parameter to run the preset, but you can if you want the theaters and museums in another place than Paris.","title":"Try to save and edit a preset"},{"location":"user-guide/end-user/#custom-api-server","text":"If you want to add some customs servers, add a file called custom_config.json in your profile_name/QuickOSM folder and add this template in it : 1 2 3 4 5 6 7 8 { \"overpass_servers\" : [ \"http://your_custom_url.com/api/\" ], \"nominatim_servers\" : [ \"http://your_custom_url.com/search?\" ] } Both overpass_servers et nominatim_servers are optionals. If you want to add only one of them, you don't need to write the other. QuickOSM will add your custom list to the list below. To find the profile folder, go in Settings \u2192 Profile \u2192 Open active profile folder . Warning Do not change any files in profile_name/python/plugins/QuickOSM for adding a server. Your changes will be lost everytime the plugin is upgraded. A pull request is more than welcome if you want to add your server in QuickOSM core by updating this list below.","title":"Custom API server"},{"location":"user-guide/processing/","text":"Using QGIS Processing # For the list of algorithms, read the Processing section. Since QGIS 3.4, QuickOSM is available in the Processing modeler . Here some useful algorithms in an appropriate order: QuickOSM \u2192 Advanced , one of the Build query algorithms. File Tools \u2192 Download file , by using the Encoded URL as a input parameter from the previous algorithm. To process the OSM file : Either Modeler Tools \u2192 String concatenation . Useful to concatenate the downloaded filepath with |layername=points |layername=lines |layername=multilinestrings |layername=multipolygons Or QuickOSM \u2192 Open OSM file . Instead of the step above with the string concatenation. Then it's up to you to combine other QGIS algorithms. Check a more detailed answer on stackexchange : Vector Table \u2192 Explode HStore field (QGIS \u2265 3.6) Vector Table \u2192 Feature filter Since QGIS 3.6, you can export your Processing model as a Python script. You can also call these algorithms individually from the QGIS Python Processing framework. As an example, you can download this model and load it in your QGIS . Additionally, you can download example QGIS style files for OSM from here . The model will download and style OSM data from an extent and packages it in one Geopackage.","title":"QGIS Model and Python API"},{"location":"user-guide/processing/#using-qgis-processing","text":"For the list of algorithms, read the Processing section. Since QGIS 3.4, QuickOSM is available in the Processing modeler . Here some useful algorithms in an appropriate order: QuickOSM \u2192 Advanced , one of the Build query algorithms. File Tools \u2192 Download file , by using the Encoded URL as a input parameter from the previous algorithm. To process the OSM file : Either Modeler Tools \u2192 String concatenation . Useful to concatenate the downloaded filepath with |layername=points |layername=lines |layername=multilinestrings |layername=multipolygons Or QuickOSM \u2192 Open OSM file . Instead of the step above with the string concatenation. Then it's up to you to combine other QGIS algorithms. Check a more detailed answer on stackexchange : Vector Table \u2192 Explode HStore field (QGIS \u2265 3.6) Vector Table \u2192 Feature filter Since QGIS 3.6, you can export your Processing model as a Python script. You can also call these algorithms individually from the QGIS Python Processing framework. As an example, you can download this model and load it in your QGIS . Additionally, you can download example QGIS style files for OSM from here . The model will download and style OSM data from an extent and packages it in one Geopackage.","title":"Using QGIS Processing"}]}